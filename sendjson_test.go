package main_test

import (
	"testing"

	"github.com/cfoxon/jrc"
	"github.com/goccy/go-json"

	"github.com/tidwall/sjson"
)

func BenchmarkUnmarshalMarshal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		byt, err := UnmarshalMarshal()

		_ = byt
		_ = err
	}

}

func BenchmarkGjsonSjson(b *testing.B) {
	for i := 0; i < b.N; i++ {
		byt, err := GjsonSjson()

		_ = byt
		_ = err
	}
}

type EngineInfo struct {
	Success                     bool            `json:"success"`
	LastBlockNumber             int64           `json:"lastBlockNumber"`
	LastBlockRefHiveBlockNumber int64           `json:"lastBlockRefHiveBlockNumber"`
	LastHash                    string          `json:"lastHash"`
	LastParsedHiveBlockNumber   int64           `json:"lastParsedHiveBlockNumber"`
	SSCNodeVersion              string          `json:"SSCnodeVersion"`
	Domain                      string          `json:"domain"`
	ChainID                     string          `json:"chainId"`
	DisabledMethods             DisabledMethods `json:"disabledMethods,omitempty"`
	LightNode                   bool            `json:"lightNode"`
	LastVerifiedBlockNumber     int64           `json:"lastVerifiedBlockNumber"`
}

type DisabledMethods struct {
	Blockchain []string `json:"blockchain,omitempty"`
	Contracts  []string `json:"contracts,omitempty"`
	Message    string   `json:"message,omitempty"`
}

func UnmarshalMarshal() ([]byte, error) {
	respData := []byte(`{
		"jsonrpc": "2.0",
		"id": 85,
		"result": {
			"_id": 0,
			"blockNumber": 0,
			"refHiveBlockNumber": 0,
			"refHiveBlockId": "",
			"prevRefHiveBlockId": "",
			"previousHash": "0",
			"previousDatabaseHash": "",
			"timestamp": "2018-06-01T00:00:00",
			"transactions": [
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "null",
					"action": "null",
					"payload": "{\"chainId\":\"mainnet-hive\",\"genesisHiveBlock\":41967000}",
					"executedCodeHash": "",
					"hash": "9fbee5f270abd95510f1d4f97adaa25b86d9733b260bc2385c8025b9c394ff9c",
					"databaseHash": "",
					"logs": "{\"errors\":[\"contract doesn't exist\"]}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "hive-engine",
					"contract": "contract",
					"action": "deploy",
					"payload": "{\"name\":\"tokens\",\"params\":\"\",\"code\":\"\"}",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "985d32ba043b69459e78f19b0cddce4a75c848efac67dda1bb127407640a8b2d",
					"databaseHash": "",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "honey-swap",
					"contract": "contract",
					"action": "deploy",
					"payload": "{\"name\":\"hivepegged\",\"params\":\"\",\"code\":\"LyogZXNsaW50LWRpc2FibGUgbm8tYXdhaXQtaW4tbG9vcCAqLwovKiBnbG9iYWwgYWN0aW9ucywgYXBpICovCgpjb25zdCBpbml0aWF0ZVdpdGhkcmF3YWwgPSBhc3luYyAoaWQsIHJlY2lwaWVudCwgcXVhbnRpdHksIG1lbW8pID0+IHsKICBjb25zdCB3aXRoZHJhd2FsID0ge307CgogIHdpdGhkcmF3YWwuaWQgPSBpZDsKICB3aXRoZHJhd2FsLnR5cGUgPSAnSElWRSc7CiAgd2l0aGRyYXdhbC5yZWNpcGllbnQgPSByZWNpcGllbnQ7CiAgd2l0aGRyYXdhbC5tZW1vID0gbWVtbzsKICB3aXRoZHJhd2FsLnF1YW50aXR5ID0gcXVhbnRpdHk7CgogIGF3YWl0IGFwaS5kYi5pbnNlcnQoJ3dpdGhkcmF3YWxzJywgd2l0aGRyYXdhbCk7Cn07CgphY3Rpb25zLmNyZWF0ZVNTQyA9IGFzeW5jICgpID0+IHsKICBjb25zdCB0YWJsZUV4aXN0cyA9IGF3YWl0IGFwaS5kYi50YWJsZUV4aXN0cygnd2l0aGRyYXdhbHMnKTsKCiAgaWYgKHRhYmxlRXhpc3RzID09PSBmYWxzZSkgewogICAgYXdhaXQgYXBpLmRiLmNyZWF0ZVRhYmxlKCd3aXRoZHJhd2FscycpOwogIH0KfTsKCmFjdGlvbnMuYnV5ID0gYXN5bmMgKHBheWxvYWQpID0+IHsKICBjb25zdCB7IHJlY2lwaWVudCwgYW1vdW50SElWRUhCRCwgaXNTaWduZWRXaXRoQWN0aXZlS2V5IH0gPSBwYXlsb2FkOwoKICBpZiAocmVjaXBpZW50ICE9PSBhcGkub3duZXIpIHJldHVybjsKCiAgaWYgKHJlY2lwaWVudCAmJiBhbW91bnRISVZFSEJEICYmIGlzU2lnbmVkV2l0aEFjdGl2ZUtleSkgewogICAgY29uc3QgcmVzID0gYW1vdW50SElWRUhCRC5zcGxpdCgnICcpOwoKICAgIGNvbnN0IHVuaXQgPSByZXNbMV07CgogICAgLy8gSElWRQogICAgaWYgKGFwaS5hc3NlcnQodW5pdCA9PT0gJ0hJVkUnLCAnb25seSBISVZFIGNhbiBiZSB1c2VkJykpIHsKICAgICAgbGV0IHF1YW50aXR5VG9TZW5kID0gcmVzWzBdOwoKICAgICAgLy8gY2FsY3VsYXRlIHRoZSAxJSBmZWUgKHdpdGggYSBtaW4gb2YgMC4wMDEgSElWRSkKICAgICAgbGV0IGZlZSA9IGFwaS5CaWdOdW1iZXIocXVhbnRpdHlUb1NlbmQpLm11bHRpcGxpZWRCeSgwLjAxKS50b0ZpeGVkKDMpOwoKICAgICAgaWYgKGFwaS5CaWdOdW1iZXIoZmVlKS5sdCgnMC4wMDEnKSkgewogICAgICAgIGZlZSA9ICcwLjAwMSc7CiAgICAgIH0KCiAgICAgIHF1YW50aXR5VG9TZW5kID0gYXBpLkJpZ051bWJlcihxdWFudGl0eVRvU2VuZCkubWludXMoZmVlKS50b0ZpeGVkKDMpOwoKICAgICAgaWYgKGFwaS5CaWdOdW1iZXIocXVhbnRpdHlUb1NlbmQpLmd0KDApKSB7CiAgICAgICAgYXdhaXQgYXBpLmV4ZWN1dGVTbWFydENvbnRyYWN0QXNPd25lcigndG9rZW5zJywgJ3RyYW5zZmVyJywgeyBzeW1ib2w6ICdTV0FQLkhJVkUnLCBxdWFudGl0eTogcXVhbnRpdHlUb1NlbmQsIHRvOiBhcGkuc2VuZGVyIH0pOwogICAgICB9CgogICAgICBpZiAoYXBpLkJpZ051bWJlcihmZWUpLmd0KDApKSB7CiAgICAgICAgY29uc3QgbWVtbyA9IGBmZWUgdHggJHthcGkudHJhbnNhY3Rpb25JZH1gOwogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10ZW1wbGF0ZS1jdXJseS1pbi1zdHJpbmcKICAgICAgICBhd2FpdCBpbml0aWF0ZVdpdGhkcmF3YWwoYCR7YXBpLnRyYW5zYWN0aW9uSWR9LWZlZWAsICJoaXZlLWVuZ2luZSIsIGZlZSwgbWVtbyk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIC8vIFNCRCBub3Qgc3VwcG9ydGVkCiAgICB9CiAgfQp9OwoKYWN0aW9ucy53aXRoZHJhdyA9IGFzeW5jIChwYXlsb2FkKSA9PiB7CiAgY29uc3QgeyBxdWFudGl0eSwgaXNTaWduZWRXaXRoQWN0aXZlS2V5IH0gPSBwYXlsb2FkOwoKICBpZiAoYXBpLmFzc2VydChxdWFudGl0eSAmJiB0eXBlb2YgcXVhbnRpdHkgPT09ICdzdHJpbmcnICYmICFhcGkuQmlnTnVtYmVyKHF1YW50aXR5KS5pc05hTigpCiAgICAmJiBpc1NpZ25lZFdpdGhBY3RpdmVLZXkKICAgICYmIGFwaS5CaWdOdW1iZXIocXVhbnRpdHkpLmRwKCkgPD0gMywgJ2ludmFsaWQgcGFyYW1zJykKICAgICYmIGFwaS5hc3NlcnQoYXBpLkJpZ051bWJlcihxdWFudGl0eSkuZ3RlKDAuMDAyKSwgJ21pbmltdW0gd2l0aGRyYXdhbCBpcyAwLjAwMicpCiAgKSB7CiAgICAvLyBjYWxjdWxhdGUgdGhlIDElIGZlZSAod2l0aCBhIG1pbiBvZiAwLjAwMSBISVZFKQogICAgbGV0IGZlZSA9IGFwaS5CaWdOdW1iZXIocXVhbnRpdHkpLm11bHRpcGxpZWRCeSgwLjAxKS50b0ZpeGVkKDMpOwoKICAgIGlmIChhcGkuQmlnTnVtYmVyKGZlZSkubHQoJzAuMDAxJykpIHsKICAgICAgZmVlID0gJzAuMDAxJzsKICAgIH0KCiAgICBjb25zdCBxdWFudGl0eVRvU2VuZCA9IGFwaS5CaWdOdW1iZXIocXVhbnRpdHkpLm1pbnVzKGZlZSkudG9GaXhlZCgzKTsKCiAgICBpZiAoYXBpLkJpZ051bWJlcihxdWFudGl0eVRvU2VuZCkuZ3QoMCkpIHsKICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXBpLmV4ZWN1dGVTbWFydENvbnRyYWN0KCd0b2tlbnMnLCAndHJhbnNmZXInLCB7IHN5bWJvbDogJ1NXQVAuSElWRScsIHF1YW50aXR5LCB0bzogYXBpLm93bmVyIH0pOwoKICAgICAgaWYgKHJlcy5lcnJvcnMgPT09IHVuZGVmaW5lZAogICAgICAgICYmIHJlcy5ldmVudHMgJiYgcmVzLmV2ZW50cy5maW5kKGVsID0+IGVsLmNvbnRyYWN0ID09PSAndG9rZW5zJyAmJiBlbC5ldmVudCA9PT0gJ3RyYW5zZmVyJyAmJiBlbC5kYXRhLmZyb20gPT09IGFwaS5zZW5kZXIgJiYgZWwuZGF0YS50byA9PT0gYXBpLm93bmVyICYmIGVsLmRhdGEucXVhbnRpdHkgPT09IHF1YW50aXR5ICYmIGVsLmRhdGEuc3ltYm9sID09PSAnU1dBUC5ISVZFJykgIT09IHVuZGVmaW5lZCkgewogICAgICAgIC8vIHdpdGhkcmF3YWwKICAgICAgICBsZXQgbWVtbyA9IGB3aXRoZHJhd2FsIHR4ICR7YXBpLnRyYW5zYWN0aW9uSWR9YDsKCiAgICAgICAgYXdhaXQgaW5pdGlhdGVXaXRoZHJhd2FsKGFwaS50cmFuc2FjdGlvbklkLCBhcGkuc2VuZGVyLCBxdWFudGl0eVRvU2VuZCwgbWVtbyk7CgogICAgICAgIGlmIChhcGkuQmlnTnVtYmVyKGZlZSkuZ3QoMCkpIHsKICAgICAgICAgIG1lbW8gPSBgZmVlIHR4ICR7YXBpLnRyYW5zYWN0aW9uSWR9YDsKICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10ZW1wbGF0ZS1jdXJseS1pbi1zdHJpbmcKICAgICAgICAgIGF3YWl0IGluaXRpYXRlV2l0aGRyYXdhbChgJHthcGkudHJhbnNhY3Rpb25JZH0tZmVlYCwgImhpdmUtZW5naW5lIiwgZmVlLCBtZW1vKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn07CgphY3Rpb25zLnJlbW92ZVdpdGhkcmF3YWwgPSBhc3luYyAocGF5bG9hZCkgPT4gewogIGNvbnN0IHsgaWQsIGlzU2lnbmVkV2l0aEFjdGl2ZUtleSB9ID0gcGF5bG9hZDsKCiAgaWYgKGFwaS5zZW5kZXIgIT09IGFwaS5vd25lcikgcmV0dXJuOwoKICBpZiAoaWQgJiYgaXNTaWduZWRXaXRoQWN0aXZlS2V5KSB7CiAgICBjb25zdCB3aXRoZHJhd2FsID0gYXdhaXQgYXBpLmRiLmZpbmRPbmUoJ3dpdGhkcmF3YWxzJywgeyBpZCB9KTsKCiAgICBpZiAod2l0aGRyYXdhbCkgewogICAgICBhd2FpdCBhcGkuZGIucmVtb3ZlKCd3aXRoZHJhd2FscycsIHdpdGhkcmF3YWwpOwogICAgfQogIH0KfTsK\"}",
					"executedCodeHash": "b220418036c5b78431ebd92327e1d14a5caa71039a357fe452c60a457e8e7825",
					"hash": "19f6dec608478f83aef280fd8c71a60332c80e8b701866efacbd6cdb32361ec7",
					"databaseHash": "",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "contract",
					"action": "deploy",
					"payload": "{\"name\":\"market\",\"params\":\"\",\"code\":\"LyogZXNsaW50LWRpc2FibGUgbm8tYXdhaXQtaW4tbG9vcCAqLwovKiBnbG9iYWwgYWN0aW9ucywgYXBpICovCmNvbnN0IEhJVkVfUEVHR0VEX1NZTUJPTCA9ICdTV0FQLkhJVkUnOwpjb25zdCBISVZFX1BFR0dFRF9TWU1CT0xfUFJFU0lDSU9OID0gODsKY29uc3QgQ09OVFJBQ1RfTkFNRSA9ICdtYXJrZXQnOwoKY29uc3QgZ2V0TWV0cmljID0gYXN5bmMgKHN5bWJvbCkgPT4gewogIGxldCBtZXRyaWMgPSBhd2FpdCBhcGkuZGIuZmluZE9uZSgnbWV0cmljcycsIHsgc3ltYm9sIH0pOwoKICBpZiAobWV0cmljID09PSBudWxsKSB7CiAgICBtZXRyaWMgPSB7fTsKICAgIG1ldHJpYy5zeW1ib2wgPSBzeW1ib2w7CiAgICBtZXRyaWMudm9sdW1lID0gJzAnOwogICAgbWV0cmljLnZvbHVtZUV4cGlyYXRpb24gPSAwOwogICAgbWV0cmljLmxhc3RQcmljZSA9ICcwJzsKICAgIG1ldHJpYy5sb3dlc3RBc2sgPSAnMCc7CiAgICBtZXRyaWMuaGlnaGVzdEJpZCA9ICcwJzsKICAgIG1ldHJpYy5sYXN0RGF5UHJpY2UgPSAnMCc7CiAgICBtZXRyaWMubGFzdERheVByaWNlRXhwaXJhdGlvbiA9IDA7CiAgICBtZXRyaWMucHJpY2VDaGFuZ2VIaXZlID0gJzAnOwogICAgbWV0cmljLnByaWNlQ2hhbmdlUGVyY2VudCA9ICcwJzsKCiAgICBjb25zdCBuZXdNZXRyaWMgPSBhd2FpdCBhcGkuZGIuaW5zZXJ0KCdtZXRyaWNzJywgbWV0cmljKTsKICAgIHJldHVybiBuZXdNZXRyaWM7CiAgfQoKICByZXR1cm4gbWV0cmljOwp9OwoKY29uc3QgdXBkYXRlVm9sdW1lTWV0cmljID0gYXN5bmMgKHN5bWJvbCwgcXVhbnRpdHksIGFkZCA9IHRydWUpID0+IHsKICBjb25zdCBibG9ja0RhdGUgPSBuZXcgRGF0ZShgJHthcGkuaGl2ZUJsb2NrVGltZXN0YW1wfS4wMDBaYCk7CiAgY29uc3QgdGltZXN0YW1wU2VjID0gYmxvY2tEYXRlLmdldFRpbWUoKSAvIDEwMDA7CiAgY29uc3QgbWV0cmljID0gYXdhaXQgZ2V0TWV0cmljKHN5bWJvbCk7CgogIGlmIChhZGQgPT09IHRydWUpIHsKICAgIGlmIChtZXRyaWMudm9sdW1lRXhwaXJhdGlvbiA8IHRpbWVzdGFtcFNlYykgewogICAgICBtZXRyaWMudm9sdW1lID0gJzAuMDAwJzsKICAgIH0KICAgIG1ldHJpYy52b2x1bWUgPSBhcGkuQmlnTnVtYmVyKG1ldHJpYy52b2x1bWUpCiAgICAgIC5wbHVzKHF1YW50aXR5KQogICAgICAudG9GaXhlZChISVZFX1BFR0dFRF9TWU1CT0xfUFJFU0lDSU9OKTsKICAgIG1ldHJpYy52b2x1bWVFeHBpcmF0aW9uID0gYmxvY2tEYXRlLnNldERhdGUoYmxvY2tEYXRlLmdldERhdGUoKSArIDEpIC8gMTAwMDsKICB9IGVsc2UgewogICAgbWV0cmljLnZvbHVtZSA9IGFwaS5CaWdOdW1iZXIobWV0cmljLnZvbHVtZSkKICAgICAgLm1pbnVzKHF1YW50aXR5KQogICAgICAudG9GaXhlZChISVZFX1BFR0dFRF9TWU1CT0xfUFJFU0lDSU9OKTsKICB9CgogIGlmIChhcGkuQmlnTnVtYmVyKG1ldHJpYy52b2x1bWUpLmx0KDApKSB7CiAgICBtZXRyaWMudm9sdW1lID0gJzAuMDAwJzsKICB9CgogIGF3YWl0IGFwaS5kYi51cGRhdGUoJ21ldHJpY3MnLCBtZXRyaWMpOwp9OwoKY29uc3QgdXBkYXRlUHJpY2VNZXRyaWNzID0gYXN5bmMgKHN5bWJvbCwgcHJpY2UpID0+IHsKICBjb25zdCBibG9ja0RhdGUgPSBuZXcgRGF0ZShgJHthcGkuaGl2ZUJsb2NrVGltZXN0YW1wfS4wMDBaYCk7CiAgY29uc3QgdGltZXN0YW1wU2VjID0gYmxvY2tEYXRlLmdldFRpbWUoKSAvIDEwMDA7CgogIGNvbnN0IG1ldHJpYyA9IGF3YWl0IGdldE1ldHJpYyhzeW1ib2wpOwoKICBtZXRyaWMubGFzdFByaWNlID0gcHJpY2U7CgogIGlmIChtZXRyaWMubGFzdERheVByaWNlRXhwaXJhdGlvbiA8IHRpbWVzdGFtcFNlYykgewogICAgbWV0cmljLmxhc3REYXlQcmljZSA9IHByaWNlOwogICAgbWV0cmljLmxhc3REYXlQcmljZUV4cGlyYXRpb24gPSBibG9ja0RhdGUuc2V0RGF0ZShibG9ja0RhdGUuZ2V0RGF0ZSgpICsgMSkgLyAxMDAwOwogICAgbWV0cmljLnByaWNlQ2hhbmdlSGl2ZSA9ICcwJzsKICAgIG1ldHJpYy5wcmljZUNoYW5nZVBlcmNlbnQgPSAnMCUnOwogIH0gZWxzZSB7CiAgICBtZXRyaWMucHJpY2VDaGFuZ2VIaXZlID0gYXBpLkJpZ051bWJlcihwcmljZSkKICAgICAgLm1pbnVzKG1ldHJpYy5sYXN0RGF5UHJpY2UpCiAgICAgIC50b0ZpeGVkKEhJVkVfUEVHR0VEX1NZTUJPTF9QUkVTSUNJT04pOwogICAgbWV0cmljLnByaWNlQ2hhbmdlUGVyY2VudCA9IGAke2FwaS5CaWdOdW1iZXIobWV0cmljLnByaWNlQ2hhbmdlSGl2ZSkuZGl2aWRlZEJ5KG1ldHJpYy5sYXN0RGF5UHJpY2UpLm11bHRpcGxpZWRCeSgxMDApLnRvRml4ZWQoMil9JWA7CiAgfQoKICBhd2FpdCBhcGkuZGIudXBkYXRlKCdtZXRyaWNzJywgbWV0cmljKTsKfTsKCmNvbnN0IHVwZGF0ZUJpZE1ldHJpYyA9IGFzeW5jIChzeW1ib2wpID0+IHsKICBjb25zdCBtZXRyaWMgPSBhd2FpdCBnZXRNZXRyaWMoc3ltYm9sKTsKCiAgY29uc3QgYnV5T3JkZXJCb29rID0gYXdhaXQgYXBpLmRiLmZpbmQoJ2J1eUJvb2snLAogICAgewogICAgICBzeW1ib2wsCiAgICB9LCAxLCAwLAogICAgWwogICAgICB7IGluZGV4OiAncHJpY2VEZWMnLCBkZXNjZW5kaW5nOiB0cnVlIH0sCiAgICBdKTsKCgogIGlmIChidXlPcmRlckJvb2subGVuZ3RoID4gMCkgewogICAgbWV0cmljLmhpZ2hlc3RCaWQgPSBidXlPcmRlckJvb2tbMF0ucHJpY2U7CiAgfSBlbHNlIHsKICAgIG1ldHJpYy5oaWdoZXN0QmlkID0gJzAnOwogIH0KCiAgYXdhaXQgYXBpLmRiLnVwZGF0ZSgnbWV0cmljcycsIG1ldHJpYyk7Cn07Cgpjb25zdCB1cGRhdGVBc2tNZXRyaWMgPSBhc3luYyAoc3ltYm9sKSA9PiB7CiAgY29uc3QgbWV0cmljID0gYXdhaXQgZ2V0TWV0cmljKHN5bWJvbCk7CgogIGNvbnN0IHNlbGxPcmRlckJvb2sgPSBhd2FpdCBhcGkuZGIuZmluZCgnc2VsbEJvb2snLAogICAgewogICAgICBzeW1ib2wsCiAgICB9LCAxLCAwLAogICAgWwogICAgICB7IGluZGV4OiAncHJpY2VEZWMnLCBkZXNjZW5kaW5nOiBmYWxzZSB9LAogICAgXSk7CgogIGlmIChzZWxsT3JkZXJCb29rLmxlbmd0aCA+IDApIHsKICAgIG1ldHJpYy5sb3dlc3RBc2sgPSBzZWxsT3JkZXJCb29rWzBdLnByaWNlOwogIH0gZWxzZSB7CiAgICBtZXRyaWMubG93ZXN0QXNrID0gJzAnOwogIH0KCiAgYXdhaXQgYXBpLmRiLnVwZGF0ZSgnbWV0cmljcycsIG1ldHJpYyk7Cn07Cgpjb25zdCB1cGRhdGVUcmFkZXNIaXN0b3J5ID0gYXN5bmMgKHR5cGUsIGJ1eWVyLCBzZWxsZXIsIHN5bWJvbCwgcXVhbnRpdHksIHByaWNlLCB2b2x1bWUpID0+IHsKICBjb25zdCBibG9ja0RhdGUgPSBuZXcgRGF0ZShgJHthcGkuaGl2ZUJsb2NrVGltZXN0YW1wfS4wMDBaYCk7CiAgY29uc3QgdGltZXN0YW1wU2VjID0gYmxvY2tEYXRlLmdldFRpbWUoKSAvIDEwMDA7CiAgY29uc3QgdGltZXN0YW1wTWludXMyNGhycyA9IGJsb2NrRGF0ZS5zZXREYXRlKGJsb2NrRGF0ZS5nZXREYXRlKCkgLSAxKSAvIDEwMDA7CiAgLy8gY2xlYW4gaGlzdG9yeQoKICBsZXQgdHJhZGVzVG9EZWxldGUgPSBhd2FpdCBhcGkuZGIuZmluZCgKICAgICd0cmFkZXNIaXN0b3J5JywKICAgIHsKICAgICAgc3ltYm9sLAogICAgICB0aW1lc3RhbXA6IHsKICAgICAgICAkbHQ6IHRpbWVzdGFtcE1pbnVzMjRocnMsCiAgICAgIH0sCiAgICB9LAogICk7CiAgbGV0IG5iVHJhZGVzVG9EZWxldGUgPSB0cmFkZXNUb0RlbGV0ZS5sZW5ndGg7CgogIHdoaWxlIChuYlRyYWRlc1RvRGVsZXRlID4gMCkgewogICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG5iVHJhZGVzVG9EZWxldGU7IGluZGV4ICs9IDEpIHsKICAgICAgY29uc3QgdHJhZGUgPSB0cmFkZXNUb0RlbGV0ZVtpbmRleF07CiAgICAgIGF3YWl0IHVwZGF0ZVZvbHVtZU1ldHJpYyh0cmFkZS5zeW1ib2wsIHRyYWRlLnZvbHVtZSwgZmFsc2UpOwogICAgICBhd2FpdCBhcGkuZGIucmVtb3ZlKCd0cmFkZXNIaXN0b3J5JywgdHJhZGUpOwogICAgfQogICAgdHJhZGVzVG9EZWxldGUgPSBhd2FpdCBhcGkuZGIuZmluZCgKICAgICAgJ3RyYWRlc0hpc3RvcnknLAogICAgICB7CiAgICAgICAgc3ltYm9sLAogICAgICAgIHRpbWVzdGFtcDogewogICAgICAgICAgJGx0OiB0aW1lc3RhbXBNaW51czI0aHJzLAogICAgICAgIH0sCiAgICAgIH0sCiAgICApOwogICAgbmJUcmFkZXNUb0RlbGV0ZSA9IHRyYWRlc1RvRGVsZXRlLmxlbmd0aDsKICB9CiAgLy8gYWRkIG9yZGVyIHRvIHRoZSBoaXN0b3J5CiAgY29uc3QgbmV3VHJhZGUgPSB7fTsKICBuZXdUcmFkZS50eXBlID0gdHlwZTsKICBuZXdUcmFkZS5idXllciA9IGJ1eWVyOwogIG5ld1RyYWRlLnNlbGxlciA9IHNlbGxlcjsKICBuZXdUcmFkZS5zeW1ib2wgPSBzeW1ib2w7CiAgbmV3VHJhZGUucXVhbnRpdHkgPSBxdWFudGl0eTsKICBuZXdUcmFkZS5wcmljZSA9IHByaWNlOwogIG5ld1RyYWRlLnRpbWVzdGFtcCA9IHRpbWVzdGFtcFNlYzsKICBuZXdUcmFkZS52b2x1bWUgPSB2b2x1bWU7CiAgYXdhaXQgYXBpLmRiLmluc2VydCgndHJhZGVzSGlzdG9yeScsIG5ld1RyYWRlKTsKICBhd2FpdCB1cGRhdGVQcmljZU1ldHJpY3Moc3ltYm9sLCBwcmljZSk7Cn07Cgpjb25zdCBjb3VudERlY2ltYWxzID0gdmFsdWUgPT4gYXBpLkJpZ051bWJlcih2YWx1ZSkuZHAoKTsKCmNvbnN0IHJlbW92ZUV4cGlyZWRPcmRlcnMgPSBhc3luYyAodGFibGUpID0+IHsKICBjb25zdCB0aW1lc3RhbXBTZWMgPSBhcGkuQmlnTnVtYmVyKG5ldyBEYXRlKGAke2FwaS5oaXZlQmxvY2tUaW1lc3RhbXB9LjAwMFpgKS5nZXRUaW1lKCkpCiAgICAuZGl2aWRlZEJ5KDEwMDApCiAgICAudG9OdW1iZXIoKTsKCiAgLy8gY2xlYW4gb3JkZXJzCiAgbGV0IG5iT3JkZXJzVG9EZWxldGUgPSAwOwogIGxldCBvcmRlcnNUb0RlbGV0ZSA9IGF3YWl0IGFwaS5kYi5maW5kKAogICAgdGFibGUsCiAgICB7CiAgICAgIGV4cGlyYXRpb246IHsKICAgICAgICAkbHRlOiB0aW1lc3RhbXBTZWMsCiAgICAgIH0sCiAgICB9LAogICk7CgogIG5iT3JkZXJzVG9EZWxldGUgPSBvcmRlcnNUb0RlbGV0ZS5sZW5ndGg7CiAgd2hpbGUgKG5iT3JkZXJzVG9EZWxldGUgPiAwKSB7CiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbmJPcmRlcnNUb0RlbGV0ZTsgaW5kZXggKz0gMSkgewogICAgICBjb25zdCBvcmRlciA9IG9yZGVyc1RvRGVsZXRlW2luZGV4XTsKICAgICAgbGV0IHF1YW50aXR5OwogICAgICBsZXQgc3ltYm9sOwoKICAgICAgaWYgKHRhYmxlID09PSAnYnV5Qm9vaycpIHsKICAgICAgICBzeW1ib2wgPSBISVZFX1BFR0dFRF9TWU1CT0w7CiAgICAgICAgcXVhbnRpdHkgPSBvcmRlci50b2tlbnNMb2NrZWQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nCiAgICAgICAgc3ltYm9sID0gb3JkZXIuc3ltYm9sOwogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZwogICAgICAgIHF1YW50aXR5ID0gb3JkZXIucXVhbnRpdHk7CiAgICAgIH0KCiAgICAgIC8vIHVubG9jayB0b2tlbnMKICAgICAgYXdhaXQgYXBpLnRyYW5zZmVyVG9rZW5zKG9yZGVyLmFjY291bnQsIHN5bWJvbCwgcXVhbnRpdHksICd1c2VyJyk7CgogICAgICBhd2FpdCBhcGkuZGIucmVtb3ZlKHRhYmxlLCBvcmRlcik7CgogICAgICBpZiAodGFibGUgPT09ICdidXlCb29rJykgewogICAgICAgIGFwaS5lbWl0KCdvcmRlckV4cGlyZWQnLCB7IHR5cGU6ICdidXknLCB0eElkOiBvcmRlci50eElkIH0pOwoKICAgICAgICBhd2FpdCB1cGRhdGVBc2tNZXRyaWMob3JkZXIuc3ltYm9sKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBhcGkuZW1pdCgnb3JkZXJFeHBpcmVkJywgeyB0eXBlOiAnc2VsbCcsIHR4SWQ6IG9yZGVyLnR4SWQgfSk7CgogICAgICAgIGF3YWl0IHVwZGF0ZUJpZE1ldHJpYyhvcmRlci5zeW1ib2wpOwogICAgICB9CiAgICB9CgogICAgb3JkZXJzVG9EZWxldGUgPSBhd2FpdCBhcGkuZGIuZmluZCgKICAgICAgdGFibGUsCiAgICAgIHsKICAgICAgICBleHBpcmF0aW9uOiB7CiAgICAgICAgICAkbHRlOiB0aW1lc3RhbXBTZWMsCiAgICAgICAgfSwKICAgICAgfSwKICAgICk7CgogICAgbmJPcmRlcnNUb0RlbGV0ZSA9IG9yZGVyc1RvRGVsZXRlLmxlbmd0aDsKICB9Cn07CgphY3Rpb25zLmNyZWF0ZVNTQyA9IGFzeW5jICgpID0+IHsKICBjb25zdCB0YWJsZUV4aXN0cyA9IGF3YWl0IGFwaS5kYi50YWJsZUV4aXN0cygnYnV5Qm9vaycpOwoKICBpZiAodGFibGVFeGlzdHMgPT09IGZhbHNlKSB7CiAgICBhd2FpdCBhcGkuZGIuY3JlYXRlVGFibGUoJ2J1eUJvb2snLCBbJ3N5bWJvbCcsICdhY2NvdW50JywgJ3ByaWNlRGVjJywgJ2V4cGlyYXRpb24nLCAndHhJZCddKTsKICAgIGF3YWl0IGFwaS5kYi5jcmVhdGVUYWJsZSgnc2VsbEJvb2snLCBbJ3N5bWJvbCcsICdhY2NvdW50JywgJ3ByaWNlRGVjJywgJ2V4cGlyYXRpb24nLCAndHhJZCddKTsKICAgIGF3YWl0IGFwaS5kYi5jcmVhdGVUYWJsZSgndHJhZGVzSGlzdG9yeScsIFsnc3ltYm9sJ10pOwogICAgYXdhaXQgYXBpLmRiLmNyZWF0ZVRhYmxlKCdtZXRyaWNzJywgWydzeW1ib2wnXSk7CiAgfQp9OwoKYWN0aW9ucy5jYW5jZWwgPSBhc3luYyAocGF5bG9hZCkgPT4gewogIGNvbnN0IHsgdHlwZSwgaWQsIGlzU2lnbmVkV2l0aEFjdGl2ZUtleSB9ID0gcGF5bG9hZDsKCiAgY29uc3QgdHlwZXMgPSBbJ2J1eScsICdzZWxsJ107CgogIGlmIChhcGkuYXNzZXJ0KGlzU2lnbmVkV2l0aEFjdGl2ZUtleSA9PT0gdHJ1ZSwgJ3lvdSBtdXN0IHVzZSBhIGN1c3RvbV9qc29uIHNpZ25lZCB3aXRoIHlvdXIgYWN0aXZlIGtleScpCiAgICAmJiBhcGkuYXNzZXJ0KHR5cGUgJiYgdHlwZXMuaW5jbHVkZXModHlwZSkKICAgICAgJiYgaWQsICdpbnZhbGlkIHBhcmFtcycpKSB7CiAgICBjb25zdCB0YWJsZSA9IHR5cGUgPT09ICdidXknID8gJ2J1eUJvb2snIDogJ3NlbGxCb29rJzsKCiAgICBsZXQgb3JkZXIgPSBudWxsOwogICAgLy8gZ2V0IG9yZGVyCiAgICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJyAmJiBpZC5sZW5ndGggPCA1MCkgewogICAgICBvcmRlciA9IGF3YWl0IGFwaS5kYi5maW5kT25lKHRhYmxlLCB7IHR4SWQ6IGlkIH0pOwogICAgfQoKICAgIGlmIChhcGkuYXNzZXJ0KG9yZGVyICE9PSBudWxsLCAnb3JkZXIgZG9lcyBub3QgZXhpc3Qgb3IgaW52YWxpZCBwYXJhbXMnKQogICAgICAmJiBvcmRlci5hY2NvdW50ID09PSBhcGkuc2VuZGVyKSB7CiAgICAgIGxldCBxdWFudGl0eTsKICAgICAgbGV0IHN5bWJvbDsKCiAgICAgIGlmICh0eXBlID09PSAnYnV5JykgewogICAgICAgIHN5bWJvbCA9IEhJVkVfUEVHR0VEX1NZTUJPTDsKICAgICAgICBxdWFudGl0eSA9IG9yZGVyLnRva2Vuc0xvY2tlZDsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmcKICAgICAgICBzeW1ib2wgPSBvcmRlci5zeW1ib2w7CiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nCiAgICAgICAgcXVhbnRpdHkgPSBvcmRlci5xdWFudGl0eTsKICAgICAgfQoKICAgICAgLy8gdW5sb2NrIHRva2VucwogICAgICBhd2FpdCBhcGkudHJhbnNmZXJUb2tlbnMoYXBpLnNlbmRlciwgc3ltYm9sLCBxdWFudGl0eSwgJ3VzZXInKTsKCiAgICAgIGF3YWl0IGFwaS5kYi5yZW1vdmUodGFibGUsIG9yZGVyKTsKCiAgICAgIGlmICh0eXBlID09PSAnc2VsbCcpIHsKICAgICAgICBhd2FpdCB1cGRhdGVBc2tNZXRyaWMob3JkZXIuc3ltYm9sKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBhd2FpdCB1cGRhdGVCaWRNZXRyaWMob3JkZXIuc3ltYm9sKTsKICAgICAgfQogICAgfQogIH0KfTsKCmNvbnN0IGZpbmRNYXRjaGluZ1NlbGxPcmRlcnMgPSBhc3luYyAob3JkZXIsIHRva2VuUHJlY2lzaW9uKSA9PiB7CiAgY29uc3QgewogICAgYWNjb3VudCwKICAgIHN5bWJvbCwKICAgIHByaWNlRGVjLAogIH0gPSBvcmRlcjsKCiAgY29uc3QgYnV5T3JkZXIgPSBvcmRlcjsKICBsZXQgb2Zmc2V0ID0gMDsKICBsZXQgdm9sdW1lVHJhZGVkID0gMDsKCiAgYXdhaXQgcmVtb3ZlRXhwaXJlZE9yZGVycygnc2VsbEJvb2snKTsKCiAgLy8gZ2V0IHRoZSBvcmRlcnMgdGhhdCBtYXRjaCB0aGUgc3ltYm9sIGFuZCB0aGUgcHJpY2UKICBsZXQgc2VsbE9yZGVyQm9vayA9IGF3YWl0IGFwaS5kYi5maW5kKCdzZWxsQm9vaycsIHsKICAgIHN5bWJvbCwKICAgIHByaWNlRGVjOiB7CiAgICAgICRsdGU6IHByaWNlRGVjLAogICAgfSwKICB9LCAxMDAwLCBvZmZzZXQsCiAgWwogICAgeyBpbmRleDogJ3ByaWNlRGVjJywgZGVzY2VuZGluZzogZmFsc2UgfSwKICAgIHsgaW5kZXg6ICdfaWQnLCBkZXNjZW5kaW5nOiBmYWxzZSB9LAogIF0pOwoKICBkbyB7CiAgICBjb25zdCBuYk9yZGVycyA9IHNlbGxPcmRlckJvb2subGVuZ3RoOwogICAgbGV0IGluYyA9IDA7CgogICAgd2hpbGUgKGluYyA8IG5iT3JkZXJzICYmIGFwaS5CaWdOdW1iZXIoYnV5T3JkZXIucXVhbnRpdHkpLmd0KDApKSB7CiAgICAgIGNvbnN0IHNlbGxPcmRlciA9IHNlbGxPcmRlckJvb2tbaW5jXTsKICAgICAgaWYgKGFwaS5CaWdOdW1iZXIoYnV5T3JkZXIucXVhbnRpdHkpLmx0ZShzZWxsT3JkZXIucXVhbnRpdHkpKSB7CiAgICAgICAgbGV0IHF0eVRva2Vuc1RvU2VuZCA9IGFwaS5CaWdOdW1iZXIoc2VsbE9yZGVyLnByaWNlKQogICAgICAgICAgLm11bHRpcGxpZWRCeShidXlPcmRlci5xdWFudGl0eSkKICAgICAgICAgIC50b0ZpeGVkKEhJVkVfUEVHR0VEX1NZTUJPTF9QUkVTSUNJT04pOwoKICAgICAgICBpZiAoYXBpLkJpZ051bWJlcihxdHlUb2tlbnNUb1NlbmQpLmd0KGJ1eU9yZGVyLnRva2Vuc0xvY2tlZCkpIHsKICAgICAgICAgIHF0eVRva2Vuc1RvU2VuZCA9IGFwaS5CaWdOdW1iZXIoc2VsbE9yZGVyLnByaWNlKQogICAgICAgICAgICAubXVsdGlwbGllZEJ5KGJ1eU9yZGVyLnF1YW50aXR5KQogICAgICAgICAgICAudG9GaXhlZChISVZFX1BFR0dFRF9TWU1CT0xfUFJFU0lDSU9OLCBhcGkuQmlnTnVtYmVyLlJPVU5EX0RPV04pOwogICAgICAgIH0KCiAgICAgICAgaWYgKGFwaS5hc3NlcnQoYXBpLkJpZ051bWJlcihxdHlUb2tlbnNUb1NlbmQpLmd0KDApCiAgICAgICAgICAmJiBhcGkuQmlnTnVtYmVyKGJ1eU9yZGVyLnF1YW50aXR5KS5ndCgwKSwgJ3RoZSBvcmRlciBjYW5ub3QgYmUgZmlsbGVkJykpIHsKICAgICAgICAgIC8vIHRyYW5zZmVyIHRoZSB0b2tlbnMgdG8gdGhlIGJ1eWVyCiAgICAgICAgICBsZXQgcmVzID0gYXdhaXQgYXBpLnRyYW5zZmVyVG9rZW5zKGFjY291bnQsIHN5bWJvbCwgYnV5T3JkZXIucXVhbnRpdHksICd1c2VyJyk7CgogICAgICAgICAgaWYgKHJlcy5lcnJvcnMpIHsKICAgICAgICAgICAgYXBpLmRlYnVnKHJlcy5lcnJvcnMpOwogICAgICAgICAgICBhcGkuZGVidWcoYFRYSUQ6ICR7YXBpLnRyYW5zYWN0aW9uSWR9YCk7CiAgICAgICAgICAgIGFwaS5kZWJ1ZyhhY2NvdW50KTsKICAgICAgICAgICAgYXBpLmRlYnVnKHN5bWJvbCk7CiAgICAgICAgICAgIGFwaS5kZWJ1ZyhidXlPcmRlci5xdWFudGl0eSk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gdHJhbnNmZXIgdGhlIHRva2VucyB0byB0aGUgc2VsbGVyCiAgICAgICAgICByZXMgPSBhd2FpdCBhcGkudHJhbnNmZXJUb2tlbnMoc2VsbE9yZGVyLmFjY291bnQsIEhJVkVfUEVHR0VEX1NZTUJPTCwgcXR5VG9rZW5zVG9TZW5kLCAndXNlcicpOwoKICAgICAgICAgIGlmIChyZXMuZXJyb3JzKSB7CiAgICAgICAgICAgIGFwaS5kZWJ1ZyhyZXMuZXJyb3JzKTsKICAgICAgICAgICAgYXBpLmRlYnVnKGBUWElEOiAke2FwaS50cmFuc2FjdGlvbklkfWApOwogICAgICAgICAgICBhcGkuZGVidWcoc2VsbE9yZGVyLmFjY291bnQpOwogICAgICAgICAgICBhcGkuZGVidWcoSElWRV9QRUdHRURfU1lNQk9MKTsKICAgICAgICAgICAgYXBpLmRlYnVnKHF0eVRva2Vuc1RvU2VuZCk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gdXBkYXRlIHRoZSBzZWxsIG9yZGVyCiAgICAgICAgICBjb25zdCBxdHlMZWZ0U2VsbE9yZGVyID0gYXBpLkJpZ051bWJlcihzZWxsT3JkZXIucXVhbnRpdHkpCiAgICAgICAgICAgIC5taW51cyhidXlPcmRlci5xdWFudGl0eSkKICAgICAgICAgICAgLnRvRml4ZWQodG9rZW5QcmVjaXNpb24pOwogICAgICAgICAgY29uc3QgbmJUb2tlbnNUb0ZpbGxPcmRlciA9IGFwaS5CaWdOdW1iZXIoc2VsbE9yZGVyLnByaWNlKQogICAgICAgICAgICAubXVsdGlwbGllZEJ5KHF0eUxlZnRTZWxsT3JkZXIpCiAgICAgICAgICAgIC50b0ZpeGVkKEhJVkVfUEVHR0VEX1NZTUJPTF9QUkVTSUNJT04pOwoKICAgICAgICAgIGlmIChhcGkuQmlnTnVtYmVyKHF0eUxlZnRTZWxsT3JkZXIpLmd0KDApCiAgICAgICAgICAgICYmIChhcGkuQmlnTnVtYmVyKG5iVG9rZW5zVG9GaWxsT3JkZXIpLmd0ZSgnMC4wMDAwMDAwMScpKSkgewogICAgICAgICAgICBzZWxsT3JkZXIucXVhbnRpdHkgPSBxdHlMZWZ0U2VsbE9yZGVyOwoKICAgICAgICAgICAgYXdhaXQgYXBpLmRiLnVwZGF0ZSgnc2VsbEJvb2snLCBzZWxsT3JkZXIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKGFwaS5CaWdOdW1iZXIocXR5TGVmdFNlbGxPcmRlcikuZ3QoMCkpIHsKICAgICAgICAgICAgICBhd2FpdCBhcGkudHJhbnNmZXJUb2tlbnMoc2VsbE9yZGVyLmFjY291bnQsIHN5bWJvbCwgcXR5TGVmdFNlbGxPcmRlciwgJ3VzZXInKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBhcGkuZW1pdCgnb3JkZXJDbG9zZWQnLCB7IGFjY291bnQ6IHNlbGxPcmRlci5hY2NvdW50LCB0eXBlOiAnc2VsbCcsIHR4SWQ6IHNlbGxPcmRlci50eElkIH0pOwogICAgICAgICAgICBhd2FpdCBhcGkuZGIucmVtb3ZlKCdzZWxsQm9vaycsIHNlbGxPcmRlcik7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gdW5sb2NrIHJlbWFpbmluZyB0b2tlbnMsIHVwZGF0ZSB0aGUgcXVhbnRpdHkgdG8gZ2V0IGFuZCByZW1vdmUgdGhlIGJ1eSBvcmRlcgogICAgICAgICAgY29uc3QgdG9rZW5zVG9VbmxvY2sgPSBhcGkuQmlnTnVtYmVyKGJ1eU9yZGVyLnRva2Vuc0xvY2tlZCkKICAgICAgICAgICAgLm1pbnVzKHF0eVRva2Vuc1RvU2VuZCkKICAgICAgICAgICAgLnRvRml4ZWQoSElWRV9QRUdHRURfU1lNQk9MX1BSRVNJQ0lPTik7CgogICAgICAgICAgaWYgKGFwaS5CaWdOdW1iZXIodG9rZW5zVG9VbmxvY2spLmd0KDApKSB7CiAgICAgICAgICAgIGF3YWl0IGFwaS50cmFuc2ZlclRva2VucyhhY2NvdW50LCBISVZFX1BFR0dFRF9TWU1CT0wsIHRva2Vuc1RvVW5sb2NrLCAndXNlcicpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIGFkZCB0aGUgdHJhZGUgdG8gdGhlIGhpc3RvcnkKICAgICAgICAgIGF3YWl0IHVwZGF0ZVRyYWRlc0hpc3RvcnkoJ2J1eScsIGFjY291bnQsIHNlbGxPcmRlci5hY2NvdW50LCBzeW1ib2wsIGJ1eU9yZGVyLnF1YW50aXR5LCBzZWxsT3JkZXIucHJpY2UsIHF0eVRva2Vuc1RvU2VuZCk7CgogICAgICAgICAgLy8gdXBkYXRlIHRoZSB2b2x1bWUKICAgICAgICAgIHZvbHVtZVRyYWRlZCA9IGFwaS5CaWdOdW1iZXIodm9sdW1lVHJhZGVkKS5wbHVzKHF0eVRva2Vuc1RvU2VuZCk7CgogICAgICAgICAgYnV5T3JkZXIucXVhbnRpdHkgPSAnMCc7CiAgICAgICAgICBhd2FpdCBhcGkuZGIucmVtb3ZlKCdidXlCb29rJywgYnV5T3JkZXIpOwogICAgICAgICAgYXBpLmVtaXQoJ29yZGVyQ2xvc2VkJywgeyBhY2NvdW50OiBidXlPcmRlci5hY2NvdW50LCB0eXBlOiAnYnV5JywgdHhJZDogYnV5T3JkZXIudHhJZCB9KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbGV0IHF0eVRva2Vuc1RvU2VuZCA9IGFwaS5CaWdOdW1iZXIoc2VsbE9yZGVyLnByaWNlKQogICAgICAgICAgLm11bHRpcGxpZWRCeShzZWxsT3JkZXIucXVhbnRpdHkpCiAgICAgICAgICAudG9GaXhlZChISVZFX1BFR0dFRF9TWU1CT0xfUFJFU0lDSU9OKTsKCiAgICAgICAgaWYgKGFwaS5CaWdOdW1iZXIocXR5VG9rZW5zVG9TZW5kKS5ndChidXlPcmRlci50b2tlbnNMb2NrZWQpKSB7CiAgICAgICAgICBxdHlUb2tlbnNUb1NlbmQgPSBhcGkuQmlnTnVtYmVyKHNlbGxPcmRlci5wcmljZSkKICAgICAgICAgICAgLm11bHRpcGxpZWRCeShzZWxsT3JkZXIucXVhbnRpdHkpCiAgICAgICAgICAgIC50b0ZpeGVkKEhJVkVfUEVHR0VEX1NZTUJPTF9QUkVTSUNJT04sIGFwaS5CaWdOdW1iZXIuUk9VTkRfRE9XTik7CiAgICAgICAgfQoKICAgICAgICBpZiAoYXBpLmFzc2VydChhcGkuQmlnTnVtYmVyKHF0eVRva2Vuc1RvU2VuZCkuZ3QoMCkKICAgICAgICAgICYmIGFwaS5CaWdOdW1iZXIoYnV5T3JkZXIucXVhbnRpdHkpLmd0KDApLCAndGhlIG9yZGVyIGNhbm5vdCBiZSBmaWxsZWQnKSkgewogICAgICAgICAgLy8gdHJhbnNmZXIgdGhlIHRva2VucyB0byB0aGUgYnV5ZXIKICAgICAgICAgIGxldCByZXMgPSBhd2FpdCBhcGkudHJhbnNmZXJUb2tlbnMoYWNjb3VudCwgc3ltYm9sLCBzZWxsT3JkZXIucXVhbnRpdHksICd1c2VyJyk7CgogICAgICAgICAgaWYgKHJlcy5lcnJvcnMpIHsKICAgICAgICAgICAgYXBpLmRlYnVnKHJlcy5lcnJvcnMpOwogICAgICAgICAgICBhcGkuZGVidWcoYFRYSUQ6ICR7YXBpLnRyYW5zYWN0aW9uSWR9YCk7CiAgICAgICAgICAgIGFwaS5kZWJ1ZyhhY2NvdW50KTsKICAgICAgICAgICAgYXBpLmRlYnVnKHN5bWJvbCk7CiAgICAgICAgICAgIGFwaS5kZWJ1ZyhzZWxsT3JkZXIucXVhbnRpdHkpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIHRyYW5zZmVyIHRoZSB0b2tlbnMgdG8gdGhlIHNlbGxlcgogICAgICAgICAgcmVzID0gYXdhaXQgYXBpLnRyYW5zZmVyVG9rZW5zKHNlbGxPcmRlci5hY2NvdW50LCBISVZFX1BFR0dFRF9TWU1CT0wsIHF0eVRva2Vuc1RvU2VuZCwgJ3VzZXInKTsKCiAgICAgICAgICBpZiAocmVzLmVycm9ycykgewogICAgICAgICAgICBhcGkuZGVidWcocmVzLmVycm9ycyk7CiAgICAgICAgICAgIGFwaS5kZWJ1ZyhgVFhJRDogJHthcGkudHJhbnNhY3Rpb25JZH1gKTsKICAgICAgICAgICAgYXBpLmRlYnVnKHNlbGxPcmRlci5hY2NvdW50KTsKICAgICAgICAgICAgYXBpLmRlYnVnKEhJVkVfUEVHR0VEX1NZTUJPTCk7CiAgICAgICAgICAgIGFwaS5kZWJ1ZyhxdHlUb2tlbnNUb1NlbmQpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIHJlbW92ZSB0aGUgc2VsbCBvcmRlcgogICAgICAgICAgYXdhaXQgYXBpLmRiLnJlbW92ZSgnc2VsbEJvb2snLCBzZWxsT3JkZXIpOwogICAgICAgICAgYXBpLmVtaXQoJ29yZGVyQ2xvc2VkJywgeyBhY2NvdW50OiBzZWxsT3JkZXIuYWNjb3VudCwgdHlwZTogJ3NlbGwnLCB0eElkOiBzZWxsT3JkZXIudHhJZCB9KTsKCiAgICAgICAgICAvLyB1cGRhdGUgdG9rZW5zTG9ja2VkIGFuZCB0aGUgcXVhbnRpdHkgdG8gZ2V0CiAgICAgICAgICBidXlPcmRlci50b2tlbnNMb2NrZWQgPSBhcGkuQmlnTnVtYmVyKGJ1eU9yZGVyLnRva2Vuc0xvY2tlZCkKICAgICAgICAgICAgLm1pbnVzKHF0eVRva2Vuc1RvU2VuZCkKICAgICAgICAgICAgLnRvRml4ZWQoSElWRV9QRUdHRURfU1lNQk9MX1BSRVNJQ0lPTik7CiAgICAgICAgICBidXlPcmRlci5xdWFudGl0eSA9IGFwaS5CaWdOdW1iZXIoYnV5T3JkZXIucXVhbnRpdHkpCiAgICAgICAgICAgIC5taW51cyhzZWxsT3JkZXIucXVhbnRpdHkpCiAgICAgICAgICAgIC50b0ZpeGVkKHRva2VuUHJlY2lzaW9uKTsKCiAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgb3JkZXIgY2FuIHN0aWxsIGJlIGZpbGxlZAogICAgICAgICAgY29uc3QgbmJUb2tlbnNUb0ZpbGxPcmRlciA9IGFwaS5CaWdOdW1iZXIoYnV5T3JkZXIucHJpY2UpCiAgICAgICAgICAgIC5tdWx0aXBsaWVkQnkoYnV5T3JkZXIucXVhbnRpdHkpCiAgICAgICAgICAgIC50b0ZpeGVkKEhJVkVfUEVHR0VEX1NZTUJPTF9QUkVTSUNJT04pOwoKICAgICAgICAgIGlmIChhcGkuQmlnTnVtYmVyKG5iVG9rZW5zVG9GaWxsT3JkZXIpLmx0KCcwLjAwMDAwMDAxJykpIHsKICAgICAgICAgICAgYXdhaXQgYXBpLnRyYW5zZmVyVG9rZW5zKGFjY291bnQsIEhJVkVfUEVHR0VEX1NZTUJPTCwgYnV5T3JkZXIudG9rZW5zTG9ja2VkLCAndXNlcicpOwoKICAgICAgICAgICAgYnV5T3JkZXIucXVhbnRpdHkgPSAnMCc7CiAgICAgICAgICAgIGF3YWl0IGFwaS5kYi5yZW1vdmUoJ2J1eUJvb2snLCBidXlPcmRlcik7CiAgICAgICAgICAgIGFwaS5lbWl0KCdvcmRlckNsb3NlZCcsIHsgYWNjb3VudDogYnV5T3JkZXIuYWNjb3VudCwgdHlwZTogJ2J1eScsIHR4SWQ6IGJ1eU9yZGVyLnR4SWQgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gYWRkIHRoZSB0cmFkZSB0byB0aGUgaGlzdG9yeQogICAgICAgICAgYXdhaXQgdXBkYXRlVHJhZGVzSGlzdG9yeSgnYnV5JywgYWNjb3VudCwgc2VsbE9yZGVyLmFjY291bnQsIHN5bWJvbCwgc2VsbE9yZGVyLnF1YW50aXR5LCBzZWxsT3JkZXIucHJpY2UsIHF0eVRva2Vuc1RvU2VuZCk7CgogICAgICAgICAgLy8gdXBkYXRlIHRoZSB2b2x1bWUKICAgICAgICAgIHZvbHVtZVRyYWRlZCA9IGFwaS5CaWdOdW1iZXIodm9sdW1lVHJhZGVkKS5wbHVzKHF0eVRva2Vuc1RvU2VuZCk7CiAgICAgICAgfQogICAgICB9CgogICAgICBpbmMgKz0gMTsKICAgIH0KCiAgICBvZmZzZXQgKz0gMTAwMDsKCiAgICBpZiAoYXBpLkJpZ051bWJlcihidXlPcmRlci5xdWFudGl0eSkuZ3QoMCkpIHsKICAgICAgLy8gZ2V0IHRoZSBvcmRlcnMgdGhhdCBtYXRjaCB0aGUgc3ltYm9sIGFuZCB0aGUgcHJpY2UKICAgICAgc2VsbE9yZGVyQm9vayA9IGF3YWl0IGFwaS5kYi5maW5kKCdzZWxsQm9vaycsIHsKICAgICAgICBzeW1ib2wsCiAgICAgICAgcHJpY2VEZWM6IHsKICAgICAgICAgICRsdGU6IHByaWNlRGVjLAogICAgICAgIH0sCiAgICAgIH0sIDEwMDAsIG9mZnNldCwKICAgICAgWwogICAgICAgIHsgaW5kZXg6ICdwcmljZURlYycsIGRlc2NlbmRpbmc6IGZhbHNlIH0sCiAgICAgICAgeyBpbmRleDogJ19pZCcsIGRlc2NlbmRpbmc6IGZhbHNlIH0sCiAgICAgIF0pOwogICAgfQogIH0gd2hpbGUgKHNlbGxPcmRlckJvb2subGVuZ3RoID4gMCAmJiBhcGkuQmlnTnVtYmVyKGJ1eU9yZGVyLnF1YW50aXR5KS5ndCgwKSk7CgogIC8vIHVwZGF0ZSB0aGUgYnV5IG9yZGVyIGlmIHBhcnRpYWxseSBmaWxsZWQKICBpZiAoYXBpLkJpZ051bWJlcihidXlPcmRlci5xdWFudGl0eSkuZ3QoMCkpIHsKICAgIGF3YWl0IGFwaS5kYi51cGRhdGUoJ2J1eUJvb2snLCBidXlPcmRlcik7CiAgfQogIGlmIChhcGkuQmlnTnVtYmVyKHZvbHVtZVRyYWRlZCkuZ3QoMCkpIHsKICAgIGF3YWl0IHVwZGF0ZVZvbHVtZU1ldHJpYyhzeW1ib2wsIHZvbHVtZVRyYWRlZCk7CiAgfQogIGF3YWl0IHVwZGF0ZUFza01ldHJpYyhzeW1ib2wpOwogIGF3YWl0IHVwZGF0ZUJpZE1ldHJpYyhzeW1ib2wpOwp9OwoKY29uc3QgZmluZE1hdGNoaW5nQnV5T3JkZXJzID0gYXN5bmMgKG9yZGVyLCB0b2tlblByZWNpc2lvbikgPT4gewogIGNvbnN0IHsKICAgIGFjY291bnQsCiAgICBzeW1ib2wsCiAgICBwcmljZURlYywKICB9ID0gb3JkZXI7CgogIGNvbnN0IHNlbGxPcmRlciA9IG9yZGVyOwogIGxldCBvZmZzZXQgPSAwOwogIGxldCB2b2x1bWVUcmFkZWQgPSAwOwoKICBhd2FpdCByZW1vdmVFeHBpcmVkT3JkZXJzKCdidXlCb29rJyk7CgogIC8vIGdldCB0aGUgb3JkZXJzIHRoYXQgbWF0Y2ggdGhlIHN5bWJvbCBhbmQgdGhlIHByaWNlCiAgbGV0IGJ1eU9yZGVyQm9vayA9IGF3YWl0IGFwaS5kYi5maW5kKCdidXlCb29rJywgewogICAgc3ltYm9sLAogICAgcHJpY2VEZWM6IHsKICAgICAgJGd0ZTogcHJpY2VEZWMsCiAgICB9LAogIH0sIDEwMDAsIG9mZnNldCwKICBbCiAgICB7IGluZGV4OiAncHJpY2VEZWMnLCBkZXNjZW5kaW5nOiB0cnVlIH0sCiAgICB7IGluZGV4OiAnX2lkJywgZGVzY2VuZGluZzogZmFsc2UgfSwKICBdKTsKCiAgZG8gewogICAgY29uc3QgbmJPcmRlcnMgPSBidXlPcmRlckJvb2subGVuZ3RoOwogICAgbGV0IGluYyA9IDA7CgogICAgd2hpbGUgKGluYyA8IG5iT3JkZXJzICYmIGFwaS5CaWdOdW1iZXIoc2VsbE9yZGVyLnF1YW50aXR5KS5ndCgwKSkgewogICAgICBjb25zdCBidXlPcmRlciA9IGJ1eU9yZGVyQm9va1tpbmNdOwogICAgICBpZiAoYXBpLkJpZ051bWJlcihzZWxsT3JkZXIucXVhbnRpdHkpLmx0ZShidXlPcmRlci5xdWFudGl0eSkpIHsKICAgICAgICBsZXQgcXR5VG9rZW5zVG9TZW5kID0gYXBpLkJpZ051bWJlcihidXlPcmRlci5wcmljZSkKICAgICAgICAgIC5tdWx0aXBsaWVkQnkoc2VsbE9yZGVyLnF1YW50aXR5KQogICAgICAgICAgLnRvRml4ZWQoSElWRV9QRUdHRURfU1lNQk9MX1BSRVNJQ0lPTik7CgogICAgICAgIGlmIChhcGkuQmlnTnVtYmVyKHF0eVRva2Vuc1RvU2VuZCkuZ3QoYnV5T3JkZXIudG9rZW5zTG9ja2VkKSkgewogICAgICAgICAgcXR5VG9rZW5zVG9TZW5kID0gYXBpLkJpZ051bWJlcihidXlPcmRlci5wcmljZSkKICAgICAgICAgICAgLm11bHRpcGxpZWRCeShzZWxsT3JkZXIucXVhbnRpdHkpCiAgICAgICAgICAgIC50b0ZpeGVkKEhJVkVfUEVHR0VEX1NZTUJPTF9QUkVTSUNJT04sIGFwaS5CaWdOdW1iZXIuUk9VTkRfRE9XTik7CiAgICAgICAgfQoKICAgICAgICBpZiAoYXBpLmFzc2VydChhcGkuQmlnTnVtYmVyKHF0eVRva2Vuc1RvU2VuZCkuZ3QoMCkKICAgICAgICAgICYmIGFwaS5CaWdOdW1iZXIoc2VsbE9yZGVyLnF1YW50aXR5KS5ndCgwKSwgJ3RoZSBvcmRlciBjYW5ub3QgYmUgZmlsbGVkJykpIHsKICAgICAgICAgIC8vIHRyYW5zZmVyIHRoZSB0b2tlbnMgdG8gdGhlIGJ1eWVyCiAgICAgICAgICBsZXQgcmVzID0gYXdhaXQgYXBpLnRyYW5zZmVyVG9rZW5zKGJ1eU9yZGVyLmFjY291bnQsIHN5bWJvbCwgc2VsbE9yZGVyLnF1YW50aXR5LCAndXNlcicpOwoKICAgICAgICAgIGlmIChyZXMuZXJyb3JzKSB7CiAgICAgICAgICAgIGFwaS5kZWJ1ZyhyZXMuZXJyb3JzKTsKICAgICAgICAgICAgYXBpLmRlYnVnKGBUWElEOiAke2FwaS50cmFuc2FjdGlvbklkfWApOwogICAgICAgICAgICBhcGkuZGVidWcoYnV5T3JkZXIuYWNjb3VudCk7CiAgICAgICAgICAgIGFwaS5kZWJ1ZyhzeW1ib2wpOwogICAgICAgICAgICBhcGkuZGVidWcoc2VsbE9yZGVyLnF1YW50aXR5KTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyB0cmFuc2ZlciB0aGUgdG9rZW5zIHRvIHRoZSBzZWxsZXIKICAgICAgICAgIHJlcyA9IGF3YWl0IGFwaS50cmFuc2ZlclRva2VucyhhY2NvdW50LCBISVZFX1BFR0dFRF9TWU1CT0wsIHF0eVRva2Vuc1RvU2VuZCwgJ3VzZXInKTsKCiAgICAgICAgICBpZiAocmVzLmVycm9ycykgewogICAgICAgICAgICBhcGkuZGVidWcocmVzLmVycm9ycyk7CiAgICAgICAgICAgIGFwaS5kZWJ1ZyhgVFhJRDogJHthcGkudHJhbnNhY3Rpb25JZH1gKTsKICAgICAgICAgICAgYXBpLmRlYnVnKGFjY291bnQpOwogICAgICAgICAgICBhcGkuZGVidWcoSElWRV9QRUdHRURfU1lNQk9MKTsKICAgICAgICAgICAgYXBpLmRlYnVnKHF0eVRva2Vuc1RvU2VuZCk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gdXBkYXRlIHRoZSBidXkgb3JkZXIKICAgICAgICAgIGNvbnN0IHF0eUxlZnRCdXlPcmRlciA9IGFwaS5CaWdOdW1iZXIoYnV5T3JkZXIucXVhbnRpdHkpCiAgICAgICAgICAgIC5taW51cyhzZWxsT3JkZXIucXVhbnRpdHkpCiAgICAgICAgICAgIC50b0ZpeGVkKHRva2VuUHJlY2lzaW9uKTsKCiAgICAgICAgICBjb25zdCBidXlPcmRlcnRva2Vuc0xvY2tlZCA9IGFwaS5CaWdOdW1iZXIoYnV5T3JkZXIudG9rZW5zTG9ja2VkKQogICAgICAgICAgICAubWludXMocXR5VG9rZW5zVG9TZW5kKQogICAgICAgICAgICAudG9GaXhlZChISVZFX1BFR0dFRF9TWU1CT0xfUFJFU0lDSU9OKTsKICAgICAgICAgIGNvbnN0IG5iVG9rZW5zVG9GaWxsT3JkZXIgPSBhcGkuQmlnTnVtYmVyKGJ1eU9yZGVyLnByaWNlKQogICAgICAgICAgICAubXVsdGlwbGllZEJ5KHF0eUxlZnRCdXlPcmRlcikKICAgICAgICAgICAgLnRvRml4ZWQoSElWRV9QRUdHRURfU1lNQk9MX1BSRVNJQ0lPTik7CgogICAgICAgICAgaWYgKGFwaS5CaWdOdW1iZXIocXR5TGVmdEJ1eU9yZGVyKS5ndCgwKQogICAgICAgICAgICAmJiAoYXBpLkJpZ051bWJlcihuYlRva2Vuc1RvRmlsbE9yZGVyKS5ndGUoJzAuMDAwMDAwMDEnKSkpIHsKICAgICAgICAgICAgYnV5T3JkZXIucXVhbnRpdHkgPSBxdHlMZWZ0QnV5T3JkZXI7CiAgICAgICAgICAgIGJ1eU9yZGVyLnRva2Vuc0xvY2tlZCA9IGJ1eU9yZGVydG9rZW5zTG9ja2VkOwoKICAgICAgICAgICAgYXdhaXQgYXBpLmRiLnVwZGF0ZSgnYnV5Qm9vaycsIGJ1eU9yZGVyKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChhcGkuQmlnTnVtYmVyKGJ1eU9yZGVydG9rZW5zTG9ja2VkKS5ndCgwKSkgewogICAgICAgICAgICAgIGF3YWl0IGFwaS50cmFuc2ZlclRva2VucyhidXlPcmRlci5hY2NvdW50LCBISVZFX1BFR0dFRF9TWU1CT0wsIGJ1eU9yZGVydG9rZW5zTG9ja2VkLCAndXNlcicpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGFwaS5lbWl0KCdvcmRlckNsb3NlZCcsIHsgYWNjb3VudDogYnV5T3JkZXIuYWNjb3VudCwgdHlwZTogJ2J1eScsIHR4SWQ6IGJ1eU9yZGVyLnR4SWQgfSk7CiAgICAgICAgICAgIGF3YWl0IGFwaS5kYi5yZW1vdmUoJ2J1eUJvb2snLCBidXlPcmRlcik7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gYWRkIHRoZSB0cmFkZSB0byB0aGUgaGlzdG9yeQogICAgICAgICAgYXdhaXQgdXBkYXRlVHJhZGVzSGlzdG9yeSgnc2VsbCcsIGJ1eU9yZGVyLmFjY291bnQsIGFjY291bnQsIHN5bWJvbCwgc2VsbE9yZGVyLnF1YW50aXR5LCBidXlPcmRlci5wcmljZSwgcXR5VG9rZW5zVG9TZW5kKTsKCiAgICAgICAgICAvLyB1cGRhdGUgdGhlIHZvbHVtZQogICAgICAgICAgdm9sdW1lVHJhZGVkID0gYXBpLkJpZ051bWJlcih2b2x1bWVUcmFkZWQpLnBsdXMocXR5VG9rZW5zVG9TZW5kKTsKCiAgICAgICAgICBzZWxsT3JkZXIucXVhbnRpdHkgPSAwOwogICAgICAgICAgYXdhaXQgYXBpLmRiLnJlbW92ZSgnc2VsbEJvb2snLCBzZWxsT3JkZXIpOwogICAgICAgICAgYXBpLmVtaXQoJ29yZGVyQ2xvc2VkJywgeyBhY2NvdW50OiBzZWxsT3JkZXIuYWNjb3VudCwgdHlwZTogJ3NlbGwnLCB0eElkOiBzZWxsT3JkZXIudHhJZCB9KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbGV0IHF0eVRva2Vuc1RvU2VuZCA9IGFwaS5CaWdOdW1iZXIoYnV5T3JkZXIucHJpY2UpCiAgICAgICAgICAubXVsdGlwbGllZEJ5KGJ1eU9yZGVyLnF1YW50aXR5KQogICAgICAgICAgLnRvRml4ZWQoSElWRV9QRUdHRURfU1lNQk9MX1BSRVNJQ0lPTik7CgogICAgICAgIGlmIChxdHlUb2tlbnNUb1NlbmQgPiBidXlPcmRlci50b2tlbnNMb2NrZWQpIHsKICAgICAgICAgIHF0eVRva2Vuc1RvU2VuZCA9IGFwaS5CaWdOdW1iZXIoYnV5T3JkZXIucHJpY2UpCiAgICAgICAgICAgIC5tdWx0aXBsaWVkQnkoYnV5T3JkZXIucXVhbnRpdHkpCiAgICAgICAgICAgIC50b0ZpeGVkKEhJVkVfUEVHR0VEX1NZTUJPTF9QUkVTSUNJT04sIGFwaS5CaWdOdW1iZXIuUk9VTkRfRE9XTik7CiAgICAgICAgfQoKICAgICAgICBpZiAoYXBpLmFzc2VydChhcGkuQmlnTnVtYmVyKHF0eVRva2Vuc1RvU2VuZCkuZ3QoMCkKICAgICAgICAgICYmIGFwaS5CaWdOdW1iZXIoc2VsbE9yZGVyLnF1YW50aXR5KS5ndCgwKSwgJ3RoZSBvcmRlciBjYW5ub3QgYmUgZmlsbGVkJykpIHsKICAgICAgICAgIC8vIHRyYW5zZmVyIHRoZSB0b2tlbnMgdG8gdGhlIGJ1eWVyCiAgICAgICAgICBsZXQgcmVzID0gYXdhaXQgYXBpLnRyYW5zZmVyVG9rZW5zKGJ1eU9yZGVyLmFjY291bnQsIHN5bWJvbCwgYnV5T3JkZXIucXVhbnRpdHksICd1c2VyJyk7CgogICAgICAgICAgaWYgKHJlcy5lcnJvcnMpIHsKICAgICAgICAgICAgYXBpLmRlYnVnKHJlcy5lcnJvcnMpOwogICAgICAgICAgICBhcGkuZGVidWcoYFRYSUQ6ICR7YXBpLnRyYW5zYWN0aW9uSWR9YCk7CiAgICAgICAgICAgIGFwaS5kZWJ1ZyhidXlPcmRlci5hY2NvdW50KTsKICAgICAgICAgICAgYXBpLmRlYnVnKHN5bWJvbCk7CiAgICAgICAgICAgIGFwaS5kZWJ1ZyhidXlPcmRlci5xdWFudGl0eSk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gdHJhbnNmZXIgdGhlIHRva2VucyB0byB0aGUgc2VsbGVyCiAgICAgICAgICByZXMgPSBhd2FpdCBhcGkudHJhbnNmZXJUb2tlbnMoYWNjb3VudCwgSElWRV9QRUdHRURfU1lNQk9MLCBxdHlUb2tlbnNUb1NlbmQsICd1c2VyJyk7CgogICAgICAgICAgaWYgKHJlcy5lcnJvcnMpIHsKICAgICAgICAgICAgYXBpLmRlYnVnKHJlcy5lcnJvcnMpOwogICAgICAgICAgICBhcGkuZGVidWcoYFRYSUQ6ICR7YXBpLnRyYW5zYWN0aW9uSWR9YCk7CiAgICAgICAgICAgIGFwaS5kZWJ1ZyhhY2NvdW50KTsKICAgICAgICAgICAgYXBpLmRlYnVnKEhJVkVfUEVHR0VEX1NZTUJPTCk7CiAgICAgICAgICAgIGFwaS5kZWJ1ZyhxdHlUb2tlbnNUb1NlbmQpOwogICAgICAgICAgfQoKICAgICAgICAgIGNvbnN0IGJ1eU9yZGVydG9rZW5zTG9ja2VkID0gYXBpLkJpZ051bWJlcihidXlPcmRlci50b2tlbnNMb2NrZWQpCiAgICAgICAgICAgIC5taW51cyhxdHlUb2tlbnNUb1NlbmQpCiAgICAgICAgICAgIC50b0ZpeGVkKEhJVkVfUEVHR0VEX1NZTUJPTF9QUkVTSUNJT04pOwoKICAgICAgICAgIGlmIChhcGkuQmlnTnVtYmVyKGJ1eU9yZGVydG9rZW5zTG9ja2VkKS5ndCgwKSkgewogICAgICAgICAgICBhd2FpdCBhcGkudHJhbnNmZXJUb2tlbnMoYnV5T3JkZXIuYWNjb3VudCwgSElWRV9QRUdHRURfU1lNQk9MLCBidXlPcmRlcnRva2Vuc0xvY2tlZCwgJ3VzZXInKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyByZW1vdmUgdGhlIGJ1eSBvcmRlcgogICAgICAgICAgYXdhaXQgYXBpLmRiLnJlbW92ZSgnYnV5Qm9vaycsIGJ1eU9yZGVyKTsKICAgICAgICAgIGFwaS5lbWl0KCdvcmRlckNsb3NlZCcsIHsgYWNjb3VudDogYnV5T3JkZXIuYWNjb3VudCwgdHlwZTogJ2J1eScsIHR4SWQ6IGJ1eU9yZGVyLnR4SWQgfSk7CgogICAgICAgICAgLy8gdXBkYXRlIHRoZSBxdWFudGl0eSB0byBnZXQKICAgICAgICAgIHNlbGxPcmRlci5xdWFudGl0eSA9IGFwaS5CaWdOdW1iZXIoc2VsbE9yZGVyLnF1YW50aXR5KQogICAgICAgICAgICAubWludXMoYnV5T3JkZXIucXVhbnRpdHkpCiAgICAgICAgICAgIC50b0ZpeGVkKHRva2VuUHJlY2lzaW9uKTsKCiAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgb3JkZXIgY2FuIHN0aWxsIGJlIGZpbGxlZAogICAgICAgICAgY29uc3QgbmJUb2tlbnNUb0ZpbGxPcmRlciA9IGFwaS5CaWdOdW1iZXIoc2VsbE9yZGVyLnByaWNlKQogICAgICAgICAgICAubXVsdGlwbGllZEJ5KHNlbGxPcmRlci5xdWFudGl0eSkKICAgICAgICAgICAgLnRvRml4ZWQoSElWRV9QRUdHRURfU1lNQk9MX1BSRVNJQ0lPTik7CgogICAgICAgICAgaWYgKGFwaS5CaWdOdW1iZXIobmJUb2tlbnNUb0ZpbGxPcmRlcikubHQoJzAuMDAwMDAwMDEnKSkgewogICAgICAgICAgICBhd2FpdCBhcGkudHJhbnNmZXJUb2tlbnMoYWNjb3VudCwgc3ltYm9sLCBzZWxsT3JkZXIucXVhbnRpdHksICd1c2VyJyk7CgogICAgICAgICAgICBzZWxsT3JkZXIucXVhbnRpdHkgPSAnMCc7CiAgICAgICAgICAgIGF3YWl0IGFwaS5kYi5yZW1vdmUoJ3NlbGxCb29rJywgc2VsbE9yZGVyKTsKICAgICAgICAgICAgYXBpLmVtaXQoJ29yZGVyQ2xvc2VkJywgeyBhY2NvdW50OiBzZWxsT3JkZXIuYWNjb3VudCwgdHlwZTogJ3NlbGwnLCB0eElkOiBzZWxsT3JkZXIudHhJZCB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBhZGQgdGhlIHRyYWRlIHRvIHRoZSBoaXN0b3J5CiAgICAgICAgICBhd2FpdCB1cGRhdGVUcmFkZXNIaXN0b3J5KCdzZWxsJywgYnV5T3JkZXIuYWNjb3VudCwgYWNjb3VudCwgc3ltYm9sLCBidXlPcmRlci5xdWFudGl0eSwgYnV5T3JkZXIucHJpY2UsIHF0eVRva2Vuc1RvU2VuZCk7CgogICAgICAgICAgLy8gdXBkYXRlIHRoZSB2b2x1bWUKICAgICAgICAgIHZvbHVtZVRyYWRlZCA9IGFwaS5CaWdOdW1iZXIodm9sdW1lVHJhZGVkKS5wbHVzKHF0eVRva2Vuc1RvU2VuZCk7CiAgICAgICAgfQogICAgICB9CgogICAgICBpbmMgKz0gMTsKICAgIH0KCiAgICBvZmZzZXQgKz0gMTAwMDsKCiAgICBpZiAoYXBpLkJpZ051bWJlcihzZWxsT3JkZXIucXVhbnRpdHkpLmd0KDApKSB7CiAgICAgIC8vIGdldCB0aGUgb3JkZXJzIHRoYXQgbWF0Y2ggdGhlIHN5bWJvbCBhbmQgdGhlIHByaWNlCiAgICAgIGJ1eU9yZGVyQm9vayA9IGF3YWl0IGFwaS5kYi5maW5kKCdidXlCb29rJywgewogICAgICAgIHN5bWJvbCwKICAgICAgICBwcmljZURlYzogewogICAgICAgICAgJGd0ZTogcHJpY2VEZWMsCiAgICAgICAgfSwKICAgICAgfSwgMTAwMCwgb2Zmc2V0LAogICAgICBbCiAgICAgICAgeyBpbmRleDogJ3ByaWNlRGVjJywgZGVzY2VuZGluZzogdHJ1ZSB9LAogICAgICAgIHsgaW5kZXg6ICdfaWQnLCBkZXNjZW5kaW5nOiBmYWxzZSB9LAogICAgICBdKTsKICAgIH0KICB9IHdoaWxlIChidXlPcmRlckJvb2subGVuZ3RoID4gMCAmJiBhcGkuQmlnTnVtYmVyKHNlbGxPcmRlci5xdWFudGl0eSkuZ3QoMCkpOwoKICAvLyB1cGRhdGUgdGhlIHNlbGwgb3JkZXIgaWYgcGFydGlhbGx5IGZpbGxlZAogIGlmIChhcGkuQmlnTnVtYmVyKHNlbGxPcmRlci5xdWFudGl0eSkuZ3QoMCkpIHsKICAgIGF3YWl0IGFwaS5kYi51cGRhdGUoJ3NlbGxCb29rJywgc2VsbE9yZGVyKTsKICB9CgogIGlmIChhcGkuQmlnTnVtYmVyKHZvbHVtZVRyYWRlZCkuZ3QoMCkpIHsKICAgIGF3YWl0IHVwZGF0ZVZvbHVtZU1ldHJpYyhzeW1ib2wsIHZvbHVtZVRyYWRlZCk7CiAgfQogIGF3YWl0IHVwZGF0ZUFza01ldHJpYyhzeW1ib2wpOwogIGF3YWl0IHVwZGF0ZUJpZE1ldHJpYyhzeW1ib2wpOwp9OwoKYWN0aW9ucy5idXkgPSBhc3luYyAocGF5bG9hZCkgPT4gewogIGNvbnN0IHsKICAgIHN5bWJvbCwKICAgIHF1YW50aXR5LAogICAgcHJpY2UsCiAgICBleHBpcmF0aW9uLAogICAgaXNTaWduZWRXaXRoQWN0aXZlS2V5LAogIH0gPSBwYXlsb2FkOwoKICAvLyBidXkgKHF1YW50aXR5KSBvZiAoc3ltYm9sKSBhdCAocHJpY2UpKEhJVkVfUEVHR0VEX1NZTUJPTCkgcGVyIChzeW1ib2wpCiAgaWYgKGFwaS5hc3NlcnQoaXNTaWduZWRXaXRoQWN0aXZlS2V5ID09PSB0cnVlLCAneW91IG11c3QgdXNlIGEgY3VzdG9tX2pzb24gc2lnbmVkIHdpdGggeW91ciBhY3RpdmUga2V5JykKICAgICYmIGFwaS5hc3NlcnQocHJpY2UgJiYgdHlwZW9mIHByaWNlID09PSAnc3RyaW5nJyAmJiAhYXBpLkJpZ051bWJlcihwcmljZSkuaXNOYU4oKQogICAgICAmJiBzeW1ib2wgJiYgdHlwZW9mIHN5bWJvbCA9PT0gJ3N0cmluZycgJiYgc3ltYm9sICE9PSBISVZFX1BFR0dFRF9TWU1CT0wKICAgICAgJiYgcXVhbnRpdHkgJiYgdHlwZW9mIHF1YW50aXR5ID09PSAnc3RyaW5nJyAmJiAhYXBpLkJpZ051bWJlcihxdWFudGl0eSkuaXNOYU4oKQogICAgICAmJiAoZXhwaXJhdGlvbiA9PT0gdW5kZWZpbmVkIHx8IChleHBpcmF0aW9uICYmIE51bWJlci5pc0ludGVnZXIoZXhwaXJhdGlvbikgJiYgZXhwaXJhdGlvbiA+IDApKSwgJ2ludmFsaWQgcGFyYW1zJykKICApIHsKICAgIC8vIGdldCB0aGUgdG9rZW4gcGFyYW1zCiAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGFwaS5kYi5maW5kT25lSW5UYWJsZSgndG9rZW5zJywgJ3Rva2VucycsIHsgc3ltYm9sIH0pOwoKICAgIC8vIHBlcmZvcm0gYSBmZXcgdmVyaWZpY2F0aW9ucwogICAgaWYgKGFwaS5hc3NlcnQodG9rZW4KICAgICAgJiYgYXBpLkJpZ051bWJlcihwcmljZSkuZ3QoMCkKICAgICAgJiYgY291bnREZWNpbWFscyhwcmljZSkgPD0gSElWRV9QRUdHRURfU1lNQk9MX1BSRVNJQ0lPTgogICAgICAmJiBjb3VudERlY2ltYWxzKHF1YW50aXR5KSA8PSB0b2tlbi5wcmVjaXNpb24sICdpbnZhbGlkIHBhcmFtcycpKSB7CiAgICAgIC8vIGluaXRpYXRlIGEgdHJhbnNmZXIgZnJvbSBhcGkuc2VuZGVyIHRvIGNvbnRyYWN0IGJhbGFuY2UKCiAgICAgIGNvbnN0IG5iVG9rZW5zVG9Mb2NrID0gYXBpLkJpZ051bWJlcihwcmljZSkKICAgICAgICAubXVsdGlwbGllZEJ5KHF1YW50aXR5KQogICAgICAgIC50b0ZpeGVkKEhJVkVfUEVHR0VEX1NZTUJPTF9QUkVTSUNJT04pOwoKICAgICAgaWYgKGFwaS5hc3NlcnQoYXBpLkJpZ051bWJlcihuYlRva2Vuc1RvTG9jaykuZ3RlKCcwLjAwMDAwMDAxJyksICdvcmRlciBjYW5ub3QgYmUgcGxhY2VkIGFzIGl0IGNhbm5vdCBiZSBmaWxsZWQnKSkgewogICAgICAgIC8vIGxvY2sgSElWRV9QRUdHRURfU1lNQk9MIHRva2VucwogICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFwaS5leGVjdXRlU21hcnRDb250cmFjdCgndG9rZW5zJywgJ3RyYW5zZmVyVG9Db250cmFjdCcsIHsgc3ltYm9sOiBISVZFX1BFR0dFRF9TWU1CT0wsIHF1YW50aXR5OiBuYlRva2Vuc1RvTG9jaywgdG86IENPTlRSQUNUX05BTUUgfSk7CgogICAgICAgIGlmIChyZXMuZXJyb3JzID09PSB1bmRlZmluZWQKICAgICAgICAgICYmIHJlcy5ldmVudHMgJiYgcmVzLmV2ZW50cy5maW5kKGVsID0+IGVsLmNvbnRyYWN0ID09PSAndG9rZW5zJyAmJiBlbC5ldmVudCA9PT0gJ3RyYW5zZmVyVG9Db250cmFjdCcgJiYgZWwuZGF0YS5mcm9tID09PSBhcGkuc2VuZGVyICYmIGVsLmRhdGEudG8gPT09IENPTlRSQUNUX05BTUUgJiYgZWwuZGF0YS5xdWFudGl0eSA9PT0gbmJUb2tlbnNUb0xvY2sgJiYgZWwuZGF0YS5zeW1ib2wgPT09IEhJVkVfUEVHR0VEX1NZTUJPTCkgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgY29uc3QgdGltZXN0YW1wU2VjID0gYXBpLkJpZ051bWJlcihuZXcgRGF0ZShgJHthcGkuaGl2ZUJsb2NrVGltZXN0YW1wfS4wMDBaYCkuZ2V0VGltZSgpKQogICAgICAgICAgICAuZGl2aWRlZEJ5KDEwMDApCiAgICAgICAgICAgIC50b051bWJlcigpOwoKICAgICAgICAgIC8vIG9yZGVyCiAgICAgICAgICBjb25zdCBvcmRlciA9IHt9OwoKICAgICAgICAgIG9yZGVyLnR4SWQgPSBhcGkudHJhbnNhY3Rpb25JZDsKICAgICAgICAgIG9yZGVyLnRpbWVzdGFtcCA9IHRpbWVzdGFtcFNlYzsKICAgICAgICAgIG9yZGVyLmFjY291bnQgPSBhcGkuc2VuZGVyOwogICAgICAgICAgb3JkZXIuc3ltYm9sID0gc3ltYm9sOwogICAgICAgICAgb3JkZXIucXVhbnRpdHkgPSBhcGkuQmlnTnVtYmVyKHF1YW50aXR5KS50b0ZpeGVkKHRva2VuLnByZWNpc2lvbik7CiAgICAgICAgICBvcmRlci5wcmljZSA9IGFwaS5CaWdOdW1iZXIocHJpY2UpLnRvRml4ZWQoSElWRV9QRUdHRURfU1lNQk9MX1BSRVNJQ0lPTik7CiAgICAgICAgICBvcmRlci5wcmljZURlYyA9IHsgJG51bWJlckRlY2ltYWw6IG9yZGVyLnByaWNlIH07CiAgICAgICAgICBvcmRlci50b2tlbnNMb2NrZWQgPSBuYlRva2Vuc1RvTG9jazsKICAgICAgICAgIG9yZGVyLmV4cGlyYXRpb24gPSBleHBpcmF0aW9uID09PSB1bmRlZmluZWQgfHwgZXhwaXJhdGlvbiA+IDI1OTIwMDAKICAgICAgICAgICAgPyB0aW1lc3RhbXBTZWMgKyAyNTkyMDAwCiAgICAgICAgICAgIDogdGltZXN0YW1wU2VjICsgZXhwaXJhdGlvbjsKCiAgICAgICAgICBjb25zdCBvcmRlckluRGIgPSBhd2FpdCBhcGkuZGIuaW5zZXJ0KCdidXlCb29rJywgb3JkZXIpOwoKICAgICAgICAgIGF3YWl0IGZpbmRNYXRjaGluZ1NlbGxPcmRlcnMob3JkZXJJbkRiLCB0b2tlbi5wcmVjaXNpb24pOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfTsKCmFjdGlvbnMuc2VsbCA9IGFzeW5jIChwYXlsb2FkKSA9PiB7CiAgY29uc3QgewogICAgc3ltYm9sLAogICAgcXVhbnRpdHksCiAgICBwcmljZSwKICAgIGV4cGlyYXRpb24sCiAgICBpc1NpZ25lZFdpdGhBY3RpdmVLZXksCiAgfSA9IHBheWxvYWQ7CiAgLy8gc2VsbCAocXVhbnRpdHkpIG9mIChzeW1ib2wpIGF0IChwcmljZSkoSElWRV9QRUdHRURfU1lNQk9MKSBwZXIgKHN5bWJvbCkKICBpZiAoYXBpLmFzc2VydChpc1NpZ25lZFdpdGhBY3RpdmVLZXkgPT09IHRydWUsICd5b3UgbXVzdCB1c2UgYSBjdXN0b21fanNvbiBzaWduZWQgd2l0aCB5b3VyIGFjdGl2ZSBrZXknKQogICAgJiYgYXBpLmFzc2VydChwcmljZSAmJiB0eXBlb2YgcHJpY2UgPT09ICdzdHJpbmcnICYmICFhcGkuQmlnTnVtYmVyKHByaWNlKS5pc05hTigpCiAgICAgICYmIHN5bWJvbCAmJiB0eXBlb2Ygc3ltYm9sID09PSAnc3RyaW5nJyAmJiBzeW1ib2wgIT09IEhJVkVfUEVHR0VEX1NZTUJPTAogICAgICAmJiBxdWFudGl0eSAmJiB0eXBlb2YgcXVhbnRpdHkgPT09ICdzdHJpbmcnICYmICFhcGkuQmlnTnVtYmVyKHF1YW50aXR5KS5pc05hTigpCiAgICAgICYmIChleHBpcmF0aW9uID09PSB1bmRlZmluZWQgfHwgKGV4cGlyYXRpb24gJiYgTnVtYmVyLmlzSW50ZWdlcihleHBpcmF0aW9uKSAmJiBleHBpcmF0aW9uID4gMCkpLCAnaW52YWxpZCBwYXJhbXMnKSkgewogICAgLy8gZ2V0IHRoZSB0b2tlbiBwYXJhbXMKICAgIGNvbnN0IHRva2VuID0gYXdhaXQgYXBpLmRiLmZpbmRPbmVJblRhYmxlKCd0b2tlbnMnLCAndG9rZW5zJywgeyBzeW1ib2wgfSk7CgogICAgLy8gcGVyZm9ybSBhIGZldyB2ZXJpZmljYXRpb25zCiAgICBpZiAoYXBpLmFzc2VydCh0b2tlbgogICAgICAmJiBhcGkuQmlnTnVtYmVyKHByaWNlKS5ndCgwKQogICAgICAmJiBjb3VudERlY2ltYWxzKHByaWNlKSA8PSBISVZFX1BFR0dFRF9TWU1CT0xfUFJFU0lDSU9OCiAgICAgICYmIGNvdW50RGVjaW1hbHMocXVhbnRpdHkpIDw9IHRva2VuLnByZWNpc2lvbiwgJ2ludmFsaWQgcGFyYW1zJykpIHsKICAgICAgY29uc3QgbmJUb2tlbnNUb0ZpbGxPcmRlciA9IGFwaS5CaWdOdW1iZXIocHJpY2UpCiAgICAgICAgLm11bHRpcGxpZWRCeShxdWFudGl0eSkKICAgICAgICAudG9GaXhlZChISVZFX1BFR0dFRF9TWU1CT0xfUFJFU0lDSU9OKTsKCiAgICAgIGlmIChhcGkuYXNzZXJ0KGFwaS5CaWdOdW1iZXIobmJUb2tlbnNUb0ZpbGxPcmRlcikuZ3RlKCcwLjAwMDAwMDAxJyksICdvcmRlciBjYW5ub3QgYmUgcGxhY2VkIGFzIGl0IGNhbm5vdCBiZSBmaWxsZWQnKSkgewogICAgICAgIC8vIGluaXRpYXRlIGEgdHJhbnNmZXIgZnJvbSBhcGkuc2VuZGVyIHRvIGNvbnRyYWN0IGJhbGFuY2UKICAgICAgICAvLyBsb2NrIHN5bWJvbCB0b2tlbnMKICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBhcGkuZXhlY3V0ZVNtYXJ0Q29udHJhY3QoJ3Rva2VucycsICd0cmFuc2ZlclRvQ29udHJhY3QnLCB7IHN5bWJvbCwgcXVhbnRpdHksIHRvOiBDT05UUkFDVF9OQU1FIH0pOwoKICAgICAgICBpZiAocmVzLmVycm9ycyA9PT0gdW5kZWZpbmVkCiAgICAgICAgICAmJiByZXMuZXZlbnRzICYmIHJlcy5ldmVudHMuZmluZChlbCA9PiBlbC5jb250cmFjdCA9PT0gJ3Rva2VucycgJiYgZWwuZXZlbnQgPT09ICd0cmFuc2ZlclRvQ29udHJhY3QnICYmIGVsLmRhdGEuZnJvbSA9PT0gYXBpLnNlbmRlciAmJiBlbC5kYXRhLnRvID09PSBDT05UUkFDVF9OQU1FICYmIGVsLmRhdGEucXVhbnRpdHkgPT09IHF1YW50aXR5ICYmIGVsLmRhdGEuc3ltYm9sID09PSBzeW1ib2wpICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcFNlYyA9IGFwaS5CaWdOdW1iZXIobmV3IERhdGUoYCR7YXBpLmhpdmVCbG9ja1RpbWVzdGFtcH0uMDAwWmApLmdldFRpbWUoKSkKICAgICAgICAgICAgLmRpdmlkZWRCeSgxMDAwKQogICAgICAgICAgICAudG9OdW1iZXIoKTsKCiAgICAgICAgICAvLyBvcmRlcgogICAgICAgICAgY29uc3Qgb3JkZXIgPSB7fTsKCiAgICAgICAgICBvcmRlci50eElkID0gYXBpLnRyYW5zYWN0aW9uSWQ7CiAgICAgICAgICBvcmRlci50aW1lc3RhbXAgPSB0aW1lc3RhbXBTZWM7CiAgICAgICAgICBvcmRlci5hY2NvdW50ID0gYXBpLnNlbmRlcjsKICAgICAgICAgIG9yZGVyLnN5bWJvbCA9IHN5bWJvbDsKICAgICAgICAgIG9yZGVyLnF1YW50aXR5ID0gYXBpLkJpZ051bWJlcihxdWFudGl0eSkudG9GaXhlZCh0b2tlbi5wcmVjaXNpb24pOwogICAgICAgICAgb3JkZXIucHJpY2UgPSBhcGkuQmlnTnVtYmVyKHByaWNlKS50b0ZpeGVkKEhJVkVfUEVHR0VEX1NZTUJPTF9QUkVTSUNJT04pOwogICAgICAgICAgb3JkZXIucHJpY2VEZWMgPSB7ICRudW1iZXJEZWNpbWFsOiBvcmRlci5wcmljZSB9OwogICAgICAgICAgb3JkZXIuZXhwaXJhdGlvbiA9IGV4cGlyYXRpb24gPT09IHVuZGVmaW5lZCB8fCBleHBpcmF0aW9uID4gMjU5MjAwMAogICAgICAgICAgICA/IHRpbWVzdGFtcFNlYyArIDI1OTIwMDAKICAgICAgICAgICAgOiB0aW1lc3RhbXBTZWMgKyBleHBpcmF0aW9uOwoKICAgICAgICAgIGNvbnN0IG9yZGVySW5EYiA9IGF3YWl0IGFwaS5kYi5pbnNlcnQoJ3NlbGxCb29rJywgb3JkZXIpOwoKICAgICAgICAgIGF3YWl0IGZpbmRNYXRjaGluZ0J1eU9yZGVycyhvcmRlckluRGIsIHRva2VuLnByZWNpc2lvbik7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Owo=\"}",
					"executedCodeHash": "daca9f4f772da3be08a257770395408eb188d319965a825026d12de52ab5b194",
					"hash": "113126adc396224eef362bc357c4f465b298858b204dd72e9e4e66e80555e638",
					"databaseHash": "",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "hive-engine",
					"contract": "contract",
					"action": "deploy",
					"payload": "{\"name\":\"nft\",\"params\":\"\",\"code\":\"\"}",
					"executedCodeHash": "a9fcb0e0d0c8e3f97888f8f95b743deb5f20574152118b23be0a8dea3077108b",
					"hash": "9f4753de861cf14e197f2aafa65deb0c8faa133bdc4ce96c0de4a555798cfd08",
					"databaseHash": "",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "hive-engine",
					"contract": "contract",
					"action": "deploy",
					"payload": "{\"name\":\"nftmarket\",\"params\":\"\",\"code\":\"\"}",
					"executedCodeHash": "ab6dbc26ad0b970342cf84f113e4c33c18fad1f9016f97e95e8c93f1ef8a2cde",
					"hash": "8f209268468e7a9d3a5159db155696ef0fc02edcacac4248bdec2e5cc0b862e6",
					"databaseHash": "",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "contract",
					"action": "deploy",
					"payload": "{\"name\":\"inflation\",\"params\":\"\",\"code\":\"LyogZXNsaW50LWRpc2FibGUgbm8tYXdhaXQtaW4tbG9vcCAqLwovKiBnbG9iYWwgYWN0aW9ucywgYXBpICovCgovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGVtcGxhdGUtY3VybHktaW4tc3RyaW5nCmNvbnN0IFVUSUxJVFlfVE9LRU5fU1lNQk9MID0gIkJFRSI7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10ZW1wbGF0ZS1jdXJseS1pbi1zdHJpbmcKY29uc3QgSElWRV9FTkdJTkVfQUNDT1VOVCA9ICJoaXZlLWVuZ2luZSI7CgphY3Rpb25zLmNyZWF0ZVNTQyA9IGFzeW5jICgpID0+IHsKCn07CgphY3Rpb25zLmlzc3VlTmV3VG9rZW5zID0gYXN5bmMgKCkgPT4gewogIGlmIChhcGkuc2VuZGVyICE9PSAnbnVsbCcpIHJldHVybjsKCiAgLy8gaXNzdWUgdG9rZW5zIHRvIEhJVkVfRU5HSU5FX0FDQ09VTlQKICAvLyAxMDBrIHRva2VucyBwZXIgeWVhciA9IDExLjQxNTUyNTExIHRva2VucyBwZXIgaG91ciAoYW4gaG91ciA9IDEyMDAgYmxvY2tzKQogIGxldCBuYlRva2VucyA9ICcxMS40MTU1MjUxMSc7CiAgYXdhaXQgYXBpLmV4ZWN1dGVTbWFydENvbnRyYWN0KCd0b2tlbnMnLCAnaXNzdWUnLAogICAgeyBzeW1ib2w6IFVUSUxJVFlfVE9LRU5fU1lNQk9MLCBxdWFudGl0eTogbmJUb2tlbnMsIHRvOiBISVZFX0VOR0lORV9BQ0NPVU5UIH0pOwoKICAvLyBpc3N1ZSB0b2tlbnMgdG8gZW5ncG9vbAogIC8vIDEwMGsgdG9rZW5zIHBlciB5ZWFyID0gMTEuNDE1NTI1MTEgdG9rZW5zIHBlciBob3VyIChhbiBob3VyID0gMTIwMCBibG9ja3MpCiAgbmJUb2tlbnMgPSAnMTEuNDE1NTI1MTEnOwogIGF3YWl0IGFwaS5leGVjdXRlU21hcnRDb250cmFjdCgndG9rZW5zJywgJ2lzc3VlJywgeyBzeW1ib2w6IFVUSUxJVFlfVE9LRU5fU1lNQk9MLCBxdWFudGl0eTogbmJUb2tlbnMsIHRvOiAnaGl2ZS1taW5lcicgfSk7CgogIC8vIGlzc3VlIHRva2VucyB0byAid2l0bmVzc2VzIiBjb250cmFjdAogIC8vIDIwMGsgdG9rZW5zIHBlciB5ZWFyID0gMjIuODMxMDUwMjIgdG9rZW5zIHBlciBob3VyIChhbiBob3VyID0gMTIwMCBibG9ja3MpCiAgLy8gbmJUb2tlbnMgPSAnMjIuODMxMDUwMjInOwogIC8vIGF3YWl0IGFwaS5leGVjdXRlU21hcnRDb250cmFjdCgndG9rZW5zJywgJ2lzc3VlVG9Db250cmFjdCcsCiAgLy8geyBzeW1ib2w6IFVUSUxJVFlfVE9LRU5fU1lNQk9MLCBxdWFudGl0eTogbmJUb2tlbnMsIHRvOiAnd2l0bmVzc2VzJyB9KTsKfTsK\"}",
					"executedCodeHash": "d569228ce2477d9d7bdce9bb33012daba5d33288916775e990a8c62b2a92cd61",
					"hash": "fb7865ba90ddf0969910d420ac2debcdef74a12c24c34c6d3a7ad616776be15a",
					"databaseHash": "",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "tokens",
					"action": "create",
					"payload": "{ \"name\": \"Hive Engine Token\", \"symbol\": \"BEE\", \"precision\": 8, \"maxSupply\": \"9007199254740991\", \"isSignedWithActiveKey\": true }",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "93e25ffd3efe42ce6475fc69a7c1ec01ba8eb42a7513ec36e30db10d98bbb85b",
					"databaseHash": "cd372fb85148700fa88095e3492d3f9f5beb43e555e5ff26d95f5a6adc36f8e6",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "tokens",
					"action": "enableStaking",
					"payload": "{ \"symbol\": \"BEE\", \"unstakingCooldown\": 40, \"numberTransactions\": 4, \"isSignedWithActiveKey\": true }",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "02bc2d2ad2dd12929499c4cf9265b30cfc988f965a8f44fca933803f597b8dce",
					"databaseHash": "70629dda753befe92a0e93dbc2f167b6f4eb87cbb22d908cbe493a1b957eb2ba",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "tokens",
					"action": "enableDelegation",
					"payload": "{ \"symbol\": \"BEE\", \"undelegationCooldown\": 7, \"isSignedWithActiveKey\": true }",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "79abd5e2fa309b4a1c61a011c79699edbd4173081413dc091d7fcc02024b3cb5",
					"databaseHash": "242fc58b7cef57c90d55a732b773ac517acc4fe92b4ef771fda8634044c0f3e3",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "tokens",
					"action": "updateMetadata",
					"payload": "{\"symbol\":\"BEE\", \"metadata\": { \"url\":\"https://hive-engine.com\", \"icon\": \"https://s3.amazonaws.com/steem-engine/images/icon_steem-engine_gradient.svg\", \"desc\": \"BEE is the native token for the Hive Engine platform\" }}",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "225a01b30dbe2e9609eeb34aaf50e66048779f5fdc287f88feed1e119cfaf6e7",
					"databaseHash": "5b38aed4c3c00d3211dc1e2fcfa830bc175a6addaf22a2ed0701db095c87bec5",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "tokens",
					"action": "issue",
					"payload": "{ \"symbol\": \"BEE\", \"to\": \"hive-engine\", \"quantity\": \"1500000\", \"isSignedWithActiveKey\": true }",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "d86419d46048aca3205af418f36ee328f12b4eb63b63e56117d20a3bac6a25b5",
					"databaseHash": "507eaef969b8e4ddeb62c58050233ec13d22773afda822bee3965699c8122f9a",
					"logs": "{\"events\":[{\"contract\":\"tokens\",\"event\":\"transferFromContract\",\"data\":{\"from\":\"tokens\",\"to\":\"hive-engine\",\"symbol\":\"BEE\",\"quantity\":\"1500000\"}}]}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "honey-swap",
					"contract": "tokens",
					"action": "create",
					"payload": "{ \"name\": \"HIVE Pegged\", \"symbol\": \"SWAP.HIVE\", \"precision\": 8, \"maxSupply\": \"9007199254740991\", \"isSignedWithActiveKey\": true }",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "a5e323235ec93f2f9ac164f8b028a4d100cd27e03452699646e9c72966bd7df5",
					"databaseHash": "6c0ad6d2fdc16effed48043d8d7ee48d1e5753400aab56eacc896f4808e812e4",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "honey-swap",
					"contract": "tokens",
					"action": "updateMetadata",
					"payload": "{\"symbol\":\"SWAP.HIVE\", \"metadata\": { \"desc\": \"HIVE backed by the hive-engine team\" }}",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "49aed78e13dc9bbcb61e16a5f82d4dc5f87c3f80d0c007ede071805b8ff9a7f8",
					"databaseHash": "0eac0ec8bd3f5ef0c3d217ef07af13f986c4aa27e10fa8f812d37a3f98c567b7",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "honey-swap",
					"contract": "tokens",
					"action": "issue",
					"payload": "{ \"symbol\": \"SWAP.HIVE\", \"to\": \"honey-swap\", \"quantity\": \"9007199254740991\", \"isSignedWithActiveKey\": true }",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "ebc1ff3cac1551575bab1d5ac1e6b0bc817fd53e644d9655dc4dce8fcf36c71a",
					"databaseHash": "4dd45fca34669705218f75c7b60be775d6f01b0104024ab4bbfba1d40d87076e",
					"logs": "{\"events\":[{\"contract\":\"tokens\",\"event\":\"transferFromContract\",\"data\":{\"from\":\"tokens\",\"to\":\"honey-swap\",\"symbol\":\"SWAP.HIVE\",\"quantity\":\"9007199254740991\"}}]}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "hive-engine",
					"contract": "tokens",
					"action": "updateParams",
					"payload": "{ \"tokenCreationFee\": \"100\", \"enableDelegationFee\": \"1000\", \"enableStakingFee\": \"1000\" }",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "9c16a15f0268257c6e7189a3a04fc29d086875ad658c2c4545b9dae438d21c15",
					"databaseHash": "21b383a0ed1d8a389e99f46c65b1ff8fc1b82d4baba443fd13ad9da664182a9a",
					"logs": "{}"
				}
			],
			"virtualTransactions": [
				{
					"refHiveBlockNumber": 0,
					"transactionId": "0-3",
					"sender": "null",
					"contract": "inflation",
					"action": "issueNewTokens",
					"payload": "{ \"isSignedWithActiveKey\": true }",
					"executedCodeHash": "d569228ce2477d9d7bdce9bb33012daba5d33288916775e990a8c62b2a92cd619f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e109f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "f52a059a9418fb83d66edb35932d49d8e8fb29b8d29ac104f89a4d17b875267c",
					"databaseHash": "c29618888716429e58e1c533cf5dcea1b0bd6c1c4123208212c451ba43bc2001",
					"logs": "{\"events\":[{\"contract\":\"tokens\",\"event\":\"transferFromContract\",\"data\":{\"from\":\"tokens\",\"to\":\"hive-engine\",\"symbol\":\"BEE\",\"quantity\":\"11.41552511\"}},{\"contract\":\"tokens\",\"event\":\"transferFromContract\",\"data\":{\"from\":\"tokens\",\"to\":\"hive-miner\",\"symbol\":\"BEE\",\"quantity\":\"11.41552511\"}}]}"
				}
			],
			"hash": "66e2be521f83eb882b0736054f4e172769e6bcb68303f668799243b4beee8650",
			"databaseHash": "9358cdfbc5d508a188506b51b6fbcb2a1a43322bf74179665520b7dc0510f0c7",
			"merkleRoot": "f85195574e06fdaf304fc2781c1385493244e34a8b793947cfe27d903815222c",
			"round": null,
			"roundHash": "",
			"witness": "",
			"signingKey": "",
			"roundSignature": ""
		}
	}`)

	var resp jrc.RpcResponse

	err := json.Unmarshal(respData, &resp)

	if err != nil {
		panic(err)
	}

	resp.ID = 1

	return json.Marshal(resp)
}

func GjsonSjson() ([]byte, error) {
	respData := []byte(`{
		"jsonrpc": "2.0",
		"id": 85,
		"result": {
			"_id": 0,
			"blockNumber": 0,
			"refHiveBlockNumber": 0,
			"refHiveBlockId": "",
			"prevRefHiveBlockId": "",
			"previousHash": "0",
			"previousDatabaseHash": "",
			"timestamp": "2018-06-01T00:00:00",
			"transactions": [
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "null",
					"action": "null",
					"payload": "{\"chainId\":\"mainnet-hive\",\"genesisHiveBlock\":41967000}",
					"executedCodeHash": "",
					"hash": "9fbee5f270abd95510f1d4f97adaa25b86d9733b260bc2385c8025b9c394ff9c",
					"databaseHash": "",
					"logs": "{\"errors\":[\"contract doesn't exist\"]}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "hive-engine",
					"contract": "contract",
					"action": "deploy",
					"payload": "{\"name\":\"tokens\",\"params\":\"\",\"code\":\"\"}",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "985d32ba043b69459e78f19b0cddce4a75c848efac67dda1bb127407640a8b2d",
					"databaseHash": "",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "honey-swap",
					"contract": "contract",
					"action": "deploy",
					"payload": "{\"name\":\"hivepegged\",\"params\":\"\",\"code\":\"LyogZXNsaW50LWRpc2FibGUgbm8tYXdhaXQtaW4tbG9vcCAqLwovKiBnbG9iYWwgYWN0aW9ucywgYXBpICovCgpjb25zdCBpbml0aWF0ZVdpdGhkcmF3YWwgPSBhc3luYyAoaWQsIHJlY2lwaWVudCwgcXVhbnRpdHksIG1lbW8pID0+IHsKICBjb25zdCB3aXRoZHJhd2FsID0ge307CgogIHdpdGhkcmF3YWwuaWQgPSBpZDsKICB3aXRoZHJhd2FsLnR5cGUgPSAnSElWRSc7CiAgd2l0aGRyYXdhbC5yZWNpcGllbnQgPSByZWNpcGllbnQ7CiAgd2l0aGRyYXdhbC5tZW1vID0gbWVtbzsKICB3aXRoZHJhd2FsLnF1YW50aXR5ID0gcXVhbnRpdHk7CgogIGF3YWl0IGFwaS5kYi5pbnNlcnQoJ3dpdGhkcmF3YWxzJywgd2l0aGRyYXdhbCk7Cn07CgphY3Rpb25zLmNyZWF0ZVNTQyA9IGFzeW5jICgpID0+IHsKICBjb25zdCB0YWJsZUV4aXN0cyA9IGF3YWl0IGFwaS5kYi50YWJsZUV4aXN0cygnd2l0aGRyYXdhbHMnKTsKCiAgaWYgKHRhYmxlRXhpc3RzID09PSBmYWxzZSkgewogICAgYXdhaXQgYXBpLmRiLmNyZWF0ZVRhYmxlKCd3aXRoZHJhd2FscycpOwogIH0KfTsKCmFjdGlvbnMuYnV5ID0gYXN5bmMgKHBheWxvYWQpID0+IHsKICBjb25zdCB7IHJlY2lwaWVudCwgYW1vdW50SElWRUhCRCwgaXNTaWduZWRXaXRoQWN0aXZlS2V5IH0gPSBwYXlsb2FkOwoKICBpZiAocmVjaXBpZW50ICE9PSBhcGkub3duZXIpIHJldHVybjsKCiAgaWYgKHJlY2lwaWVudCAmJiBhbW91bnRISVZFSEJEICYmIGlzU2lnbmVkV2l0aEFjdGl2ZUtleSkgewogICAgY29uc3QgcmVzID0gYW1vdW50SElWRUhCRC5zcGxpdCgnICcpOwoKICAgIGNvbnN0IHVuaXQgPSByZXNbMV07CgogICAgLy8gSElWRQogICAgaWYgKGFwaS5hc3NlcnQodW5pdCA9PT0gJ0hJVkUnLCAnb25seSBISVZFIGNhbiBiZSB1c2VkJykpIHsKICAgICAgbGV0IHF1YW50aXR5VG9TZW5kID0gcmVzWzBdOwoKICAgICAgLy8gY2FsY3VsYXRlIHRoZSAxJSBmZWUgKHdpdGggYSBtaW4gb2YgMC4wMDEgSElWRSkKICAgICAgbGV0IGZlZSA9IGFwaS5CaWdOdW1iZXIocXVhbnRpdHlUb1NlbmQpLm11bHRpcGxpZWRCeSgwLjAxKS50b0ZpeGVkKDMpOwoKICAgICAgaWYgKGFwaS5CaWdOdW1iZXIoZmVlKS5sdCgnMC4wMDEnKSkgewogICAgICAgIGZlZSA9ICcwLjAwMSc7CiAgICAgIH0KCiAgICAgIHF1YW50aXR5VG9TZW5kID0gYXBpLkJpZ051bWJlcihxdWFudGl0eVRvU2VuZCkubWludXMoZmVlKS50b0ZpeGVkKDMpOwoKICAgICAgaWYgKGFwaS5CaWdOdW1iZXIocXVhbnRpdHlUb1NlbmQpLmd0KDApKSB7CiAgICAgICAgYXdhaXQgYXBpLmV4ZWN1dGVTbWFydENvbnRyYWN0QXNPd25lcigndG9rZW5zJywgJ3RyYW5zZmVyJywgeyBzeW1ib2w6ICdTV0FQLkhJVkUnLCBxdWFudGl0eTogcXVhbnRpdHlUb1NlbmQsIHRvOiBhcGkuc2VuZGVyIH0pOwogICAgICB9CgogICAgICBpZiAoYXBpLkJpZ051bWJlcihmZWUpLmd0KDApKSB7CiAgICAgICAgY29uc3QgbWVtbyA9IGBmZWUgdHggJHthcGkudHJhbnNhY3Rpb25JZH1gOwogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10ZW1wbGF0ZS1jdXJseS1pbi1zdHJpbmcKICAgICAgICBhd2FpdCBpbml0aWF0ZVdpdGhkcmF3YWwoYCR7YXBpLnRyYW5zYWN0aW9uSWR9LWZlZWAsICJoaXZlLWVuZ2luZSIsIGZlZSwgbWVtbyk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIC8vIFNCRCBub3Qgc3VwcG9ydGVkCiAgICB9CiAgfQp9OwoKYWN0aW9ucy53aXRoZHJhdyA9IGFzeW5jIChwYXlsb2FkKSA9PiB7CiAgY29uc3QgeyBxdWFudGl0eSwgaXNTaWduZWRXaXRoQWN0aXZlS2V5IH0gPSBwYXlsb2FkOwoKICBpZiAoYXBpLmFzc2VydChxdWFudGl0eSAmJiB0eXBlb2YgcXVhbnRpdHkgPT09ICdzdHJpbmcnICYmICFhcGkuQmlnTnVtYmVyKHF1YW50aXR5KS5pc05hTigpCiAgICAmJiBpc1NpZ25lZFdpdGhBY3RpdmVLZXkKICAgICYmIGFwaS5CaWdOdW1iZXIocXVhbnRpdHkpLmRwKCkgPD0gMywgJ2ludmFsaWQgcGFyYW1zJykKICAgICYmIGFwaS5hc3NlcnQoYXBpLkJpZ051bWJlcihxdWFudGl0eSkuZ3RlKDAuMDAyKSwgJ21pbmltdW0gd2l0aGRyYXdhbCBpcyAwLjAwMicpCiAgKSB7CiAgICAvLyBjYWxjdWxhdGUgdGhlIDElIGZlZSAod2l0aCBhIG1pbiBvZiAwLjAwMSBISVZFKQogICAgbGV0IGZlZSA9IGFwaS5CaWdOdW1iZXIocXVhbnRpdHkpLm11bHRpcGxpZWRCeSgwLjAxKS50b0ZpeGVkKDMpOwoKICAgIGlmIChhcGkuQmlnTnVtYmVyKGZlZSkubHQoJzAuMDAxJykpIHsKICAgICAgZmVlID0gJzAuMDAxJzsKICAgIH0KCiAgICBjb25zdCBxdWFudGl0eVRvU2VuZCA9IGFwaS5CaWdOdW1iZXIocXVhbnRpdHkpLm1pbnVzKGZlZSkudG9GaXhlZCgzKTsKCiAgICBpZiAoYXBpLkJpZ051bWJlcihxdWFudGl0eVRvU2VuZCkuZ3QoMCkpIHsKICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXBpLmV4ZWN1dGVTbWFydENvbnRyYWN0KCd0b2tlbnMnLCAndHJhbnNmZXInLCB7IHN5bWJvbDogJ1NXQVAuSElWRScsIHF1YW50aXR5LCB0bzogYXBpLm93bmVyIH0pOwoKICAgICAgaWYgKHJlcy5lcnJvcnMgPT09IHVuZGVmaW5lZAogICAgICAgICYmIHJlcy5ldmVudHMgJiYgcmVzLmV2ZW50cy5maW5kKGVsID0+IGVsLmNvbnRyYWN0ID09PSAndG9rZW5zJyAmJiBlbC5ldmVudCA9PT0gJ3RyYW5zZmVyJyAmJiBlbC5kYXRhLmZyb20gPT09IGFwaS5zZW5kZXIgJiYgZWwuZGF0YS50byA9PT0gYXBpLm93bmVyICYmIGVsLmRhdGEucXVhbnRpdHkgPT09IHF1YW50aXR5ICYmIGVsLmRhdGEuc3ltYm9sID09PSAnU1dBUC5ISVZFJykgIT09IHVuZGVmaW5lZCkgewogICAgICAgIC8vIHdpdGhkcmF3YWwKICAgICAgICBsZXQgbWVtbyA9IGB3aXRoZHJhd2FsIHR4ICR7YXBpLnRyYW5zYWN0aW9uSWR9YDsKCiAgICAgICAgYXdhaXQgaW5pdGlhdGVXaXRoZHJhd2FsKGFwaS50cmFuc2FjdGlvbklkLCBhcGkuc2VuZGVyLCBxdWFudGl0eVRvU2VuZCwgbWVtbyk7CgogICAgICAgIGlmIChhcGkuQmlnTnVtYmVyKGZlZSkuZ3QoMCkpIHsKICAgICAgICAgIG1lbW8gPSBgZmVlIHR4ICR7YXBpLnRyYW5zYWN0aW9uSWR9YDsKICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10ZW1wbGF0ZS1jdXJseS1pbi1zdHJpbmcKICAgICAgICAgIGF3YWl0IGluaXRpYXRlV2l0aGRyYXdhbChgJHthcGkudHJhbnNhY3Rpb25JZH0tZmVlYCwgImhpdmUtZW5naW5lIiwgZmVlLCBtZW1vKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn07CgphY3Rpb25zLnJlbW92ZVdpdGhkcmF3YWwgPSBhc3luYyAocGF5bG9hZCkgPT4gewogIGNvbnN0IHsgaWQsIGlzU2lnbmVkV2l0aEFjdGl2ZUtleSB9ID0gcGF5bG9hZDsKCiAgaWYgKGFwaS5zZW5kZXIgIT09IGFwaS5vd25lcikgcmV0dXJuOwoKICBpZiAoaWQgJiYgaXNTaWduZWRXaXRoQWN0aXZlS2V5KSB7CiAgICBjb25zdCB3aXRoZHJhd2FsID0gYXdhaXQgYXBpLmRiLmZpbmRPbmUoJ3dpdGhkcmF3YWxzJywgeyBpZCB9KTsKCiAgICBpZiAod2l0aGRyYXdhbCkgewogICAgICBhd2FpdCBhcGkuZGIucmVtb3ZlKCd3aXRoZHJhd2FscycsIHdpdGhkcmF3YWwpOwogICAgfQogIH0KfTsK\"}",
					"executedCodeHash": "b220418036c5b78431ebd92327e1d14a5caa71039a357fe452c60a457e8e7825",
					"hash": "19f6dec608478f83aef280fd8c71a60332c80e8b701866efacbd6cdb32361ec7",
					"databaseHash": "",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "contract",
					"action": "deploy",
					"payload": "{\"name\":\"market\",\"params\":\"\",\"code\":\"\"}",
					"executedCodeHash": "daca9f4f772da3be08a257770395408eb188d319965a825026d12de52ab5b194",
					"hash": "113126adc396224eef362bc357c4f465b298858b204dd72e9e4e66e80555e638",
					"databaseHash": "",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "hive-engine",
					"contract": "contract",
					"action": "deploy",
					"payload": "{\"name\":\"nft\",\"params\":\"\",\"code\":\"LyogZXNsaW50LWRpc2FibGUgbm8tYXdhaXQtaW4tbG9vcCAqLwovKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC10eXBlb2YgKi8KLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqLwovKiBnbG9iYWwgYWN0aW9ucywgYXBpICovCgpjb25zdCBDT05UUkFDVF9OQU1FID0gJ25mdCc7CgovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGVtcGxhdGUtY3VybHktaW4tc3RyaW5nCmNvbnN0IFVUSUxJVFlfVE9LRU5fU1lNQk9MID0gIkJFRSI7CmNvbnN0IE1BWF9OVU1fQVVUSE9SSVpFRF9JU1NVRVJTID0gMTA7CmNvbnN0IE1BWF9OVU1fTE9DS0VEX1RPS0VOX1RZUEVTID0gMTA7CmNvbnN0IE1BWF9TWU1CT0xfTEVOR1RIID0gMTA7CmNvbnN0IE1BWF9EQVRBX1BST1BFUlRZX0xFTkdUSCA9IDEwMDsKCi8vIGNhbm5vdCBpc3N1ZSBtb3JlIHRoYW4gdGhpcyBudW1iZXIgb2YgTkZUIGluc3RhbmNlcyBpbiBvbmUgYWN0aW9uCmNvbnN0IE1BWF9OVU1fTkZUU19JU1NVQUJMRSA9IDEwOwoKLy8gY2Fubm90IHNldCBwcm9wZXJ0aWVzIG9uIG1vcmUgdGhhbiB0aGlzIG51bWJlciBvZiBORlQgaW5zdGFuY2VzIGluIG9uZSBhY3Rpb24KY29uc3QgTUFYX05VTV9ORlRTX0VESVRBQkxFID0gNTA7CgovLyBjYW5ub3QgYnVybiwgdHJhbnNmZXIsIGRlbGVnYXRlLCBvciB1bmRlbGVnYXRlIG1vcmUgdGhhbgovLyB0aGlzIG51bWJlciBvZiBORlQgaW5zdGFuY2VzIGluIG9uZSBhY3Rpb24KY29uc3QgTUFYX05VTV9ORlRTX09QRVJBQkxFID0gNTA7CgovLyBjYW5ub3QgaXNzdWUgb3IgYnVybiBtb3JlIHRoYW4gdGhpcyBudW1iZXIgb2YgTkZUCi8vIGluc3RhbmNlcyBpbiBvbmUgYWN0aW9uLCB3aGVuIHRoZSBsaXN0IG9mIE5GVCBpbnN0YW5jZXMKLy8gdG8gYWN0IG9uIGluY2x1ZGVzIGEgdG9rZW4gd2l0aCBsb2NrZWQgTkZUIGluc3RhbmNlcwovLyBjb250YWluZWQgd2l0aGluIGl0CmNvbnN0IE1BWF9OVU1fQ09OVEFJTkVSX05GVFNfT1BFUkFCTEUgPSAxOwoKY29uc3QgUkVTRVJWRURfU1lNQk9MUyA9IHsKICBDRUxMOiAnYmVnZ2FycycsCiAgUVVTVDogJ3NpbXBsZWdhbWUnLAogIFRFU1RFUkE6ICdhZ2dyb2VkJywKICBTUVJMOiAnc3R1ZmZieXNwZW5jZXInLAogIENSQUZUOiAnaW1tYW51ZWw5NCcsCiAgTVVTSUM6ICdhdG9tY29sbGVjdG9yJywKICBDR1VMTDogJ2NndWxsJywKICBORlQ6ICdjYWRhd2cnLAogIFJBUkU6ICdiZWdnYXJzJywKICBMSUM6ICdsaWN0b2tlbicsCiAgTUVNQkVSOiAnbWVtYmVydG9rZW4nLAogIENPRkZFRTogJ2MwZmYzM2EnLAogIEFSVDogJ2J5bycsCiAgUk9DSzogJ2JlZ2dhcnMnLAogIENSSVRURVI6ICdjcnlwdG9tYW5jZXInLAogIENJVFk6ICdnZXJiZXInLAogIE1PTlNURVJTOiAnc2ltcGxlZ2FtZScsCiAgU0VUUzogJ2xvb3RraXQuZ2FtZXMnLAogIEFOSU1FOiAnYW5pbWV0b2tlbicsCiAgUEhPVE9GVDogJ3d3d2llYmUnLAogIEJFRVI6ICdkZXRsZXYnLAogIFNQSVI6ICdzcGludmVzdCcsCiAgSUZHOiAnbGlvbjIwMCcsCiAgR1VJTERTOiAnc2ltcGxlZ2FtZScsCiAgRkNBUkQ6ICdsaW9uMjAwJywKICBQWEw6ICdwaXhlbG5mdCcsCiAgQ09XOiAnc3R1ZmZieXNwZW5jZXInLAogIExPT09UOiAnc3R1ZmZieXNwZW5jZXInLAogIEFQSTogJ3N0ZWVtY2l0eWFwaScsCiAgU1BPUlRTTU9NOiAnc3BvcnRzdGVzdGVyJywKICBTV1Q6ICdzYXRyZW4nLAogIFNUQVI6ICdhdG9tY29sbGVjdG9yJywKfTsKCmFjdGlvbnMuY3JlYXRlU1NDID0gYXN5bmMgKCkgPT4gewogIGNvbnN0IHRhYmxlRXhpc3RzID0gYXdhaXQgYXBpLmRiLnRhYmxlRXhpc3RzKCduZnRzJyk7CiAgaWYgKHRhYmxlRXhpc3RzID09PSBmYWxzZSkgewogICAgYXdhaXQgYXBpLmRiLmNyZWF0ZVRhYmxlKCduZnRzJywgWydzeW1ib2wnXSk7CiAgICBhd2FpdCBhcGkuZGIuY3JlYXRlVGFibGUoJ3BhcmFtcycpOwogICAgLy8gTkZUIGluc3RhbmNlIGRlbGVnYXRpb25zIHRoYXQgYXJlIGluIGNvb2xkb3duIGFmdGVyIGJlaW5nIHVuZGVsZWdhdGVkCiAgICBhd2FpdCBhcGkuZGIuY3JlYXRlVGFibGUoJ3BlbmRpbmdVbmRlbGVnYXRpb25zJywgWydzeW1ib2wnLCAnY29tcGxldGVUaW1lc3RhbXAnXSk7CgogICAgY29uc3QgcGFyYW1zID0ge307CiAgICBwYXJhbXMubmZ0Q3JlYXRpb25GZWUgPSAnMTAwJzsKICAgIC8vIGlzc3VhbmNlIGZlZSBjYW4gYmUgcGFpZCBpbiBvbmUgb2Ygc2V2ZXJhbCBkaWZmZXJlbnQgdG9rZW5zCiAgICBwYXJhbXMubmZ0SXNzdWFuY2VGZWUgPSB7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10ZW1wbGF0ZS1jdXJseS1pbi1zdHJpbmcKICAgICAgIkJFRSI6ICcwLjAwMScsCiAgICAgIFBBTDogJzAuMDAxJywKICAgIH07CiAgICAvLyBmaXJzdCAzIHByb3BlcnRpZXMgYXJlIGZyZWUsIHRoZW4gdGhpcyBmZWUgYXBwbGllcyBmb3IgZWFjaCBvbmUgYWZ0ZXIgdGhlIGluaXRpYWwgMwogICAgcGFyYW1zLmRhdGFQcm9wZXJ0eUNyZWF0aW9uRmVlID0gJzEwMCc7CiAgICBwYXJhbXMuZW5hYmxlRGVsZWdhdGlvbkZlZSA9ICcxMDAwJzsKICAgIGF3YWl0IGFwaS5kYi5pbnNlcnQoJ3BhcmFtcycsIHBhcmFtcyk7CiAgfQp9OwoKYWN0aW9ucy51cGRhdGVQYXJhbXMgPSBhc3luYyAocGF5bG9hZCkgPT4gewogIGlmIChhcGkuc2VuZGVyICE9PSBhcGkub3duZXIpIHJldHVybjsKCiAgY29uc3QgewogICAgbmZ0Q3JlYXRpb25GZWUsCiAgICBuZnRJc3N1YW5jZUZlZSwKICAgIGRhdGFQcm9wZXJ0eUNyZWF0aW9uRmVlLAogICAgZW5hYmxlRGVsZWdhdGlvbkZlZSwKICB9ID0gcGF5bG9hZDsKCiAgY29uc3QgcGFyYW1zID0gYXdhaXQgYXBpLmRiLmZpbmRPbmUoJ3BhcmFtcycsIHt9KTsKCiAgaWYgKG5mdENyZWF0aW9uRmVlICYmIHR5cGVvZiBuZnRDcmVhdGlvbkZlZSA9PT0gJ3N0cmluZycgJiYgIWFwaS5CaWdOdW1iZXIobmZ0Q3JlYXRpb25GZWUpLmlzTmFOKCkgJiYgYXBpLkJpZ051bWJlcihuZnRDcmVhdGlvbkZlZSkuZ3RlKDApKSB7CiAgICBwYXJhbXMubmZ0Q3JlYXRpb25GZWUgPSBuZnRDcmVhdGlvbkZlZTsKICB9CiAgaWYgKG5mdElzc3VhbmNlRmVlICYmIHR5cGVvZiBuZnRJc3N1YW5jZUZlZSA9PT0gJ29iamVjdCcpIHsKICAgIHBhcmFtcy5uZnRJc3N1YW5jZUZlZSA9IG5mdElzc3VhbmNlRmVlOwogIH0KICBpZiAoZGF0YVByb3BlcnR5Q3JlYXRpb25GZWUgJiYgdHlwZW9mIGRhdGFQcm9wZXJ0eUNyZWF0aW9uRmVlID09PSAnc3RyaW5nJyAmJiAhYXBpLkJpZ051bWJlcihkYXRhUHJvcGVydHlDcmVhdGlvbkZlZSkuaXNOYU4oKSAmJiBhcGkuQmlnTnVtYmVyKGRhdGFQcm9wZXJ0eUNyZWF0aW9uRmVlKS5ndGUoMCkpIHsKICAgIHBhcmFtcy5kYXRhUHJvcGVydHlDcmVhdGlvbkZlZSA9IGRhdGFQcm9wZXJ0eUNyZWF0aW9uRmVlOwogIH0KICBpZiAoZW5hYmxlRGVsZWdhdGlvbkZlZSAmJiB0eXBlb2YgZW5hYmxlRGVsZWdhdGlvbkZlZSA9PT0gJ3N0cmluZycgJiYgIWFwaS5CaWdOdW1iZXIoZW5hYmxlRGVsZWdhdGlvbkZlZSkuaXNOYU4oKSAmJiBhcGkuQmlnTnVtYmVyKGVuYWJsZURlbGVnYXRpb25GZWUpLmd0ZSgwKSkgewogICAgcGFyYW1zLmVuYWJsZURlbGVnYXRpb25GZWUgPSBlbmFibGVEZWxlZ2F0aW9uRmVlOwogIH0KCiAgYXdhaXQgYXBpLmRiLnVwZGF0ZSgncGFyYW1zJywgcGFyYW1zKTsKfTsKCi8vIGNoZWNrIHRoYXQgdG9rZW4gdHJhbnNmZXJzIHN1Y2NlZWRlZApjb25zdCBpc1Rva2VuVHJhbnNmZXJWZXJpZmllZCA9IChyZXN1bHQsIGZyb20sIHRvLCBzeW1ib2wsIHF1YW50aXR5LCBldmVudFN0cikgPT4gewogIGlmIChyZXN1bHQuZXJyb3JzID09PSB1bmRlZmluZWQKICAgICYmIHJlc3VsdC5ldmVudHMgJiYgcmVzdWx0LmV2ZW50cy5maW5kKGVsID0+IGVsLmNvbnRyYWN0ID09PSAndG9rZW5zJyAmJiBlbC5ldmVudCA9PT0gZXZlbnRTdHIKICAgICAgJiYgZWwuZGF0YS5mcm9tID09PSBmcm9tICYmIGVsLmRhdGEudG8gPT09IHRvICYmIGVsLmRhdGEucXVhbnRpdHkgPT09IHF1YW50aXR5ICYmIGVsLmRhdGEuc3ltYm9sID09PSBzeW1ib2wpICE9PSB1bmRlZmluZWQpIHsKICAgIHJldHVybiB0cnVlOwogIH0KICByZXR1cm4gZmFsc2U7Cn07Cgpjb25zdCBjYWxjdWxhdGVCYWxhbmNlID0gKGJhbGFuY2UsIHF1YW50aXR5LCBwcmVjaXNpb24sIGFkZCkgPT4gKGFkZAogID8gYXBpLkJpZ051bWJlcihiYWxhbmNlKS5wbHVzKHF1YW50aXR5KS50b0ZpeGVkKHByZWNpc2lvbikKICA6IGFwaS5CaWdOdW1iZXIoYmFsYW5jZSkubWludXMocXVhbnRpdHkpLnRvRml4ZWQocHJlY2lzaW9uKSk7Cgpjb25zdCBjb3VudERlY2ltYWxzID0gdmFsdWUgPT4gYXBpLkJpZ051bWJlcih2YWx1ZSkuZHAoKTsKCi8vIGNoZWNrIGlmIGR1cGxpY2F0ZSBlbGVtZW50cyBpbiBhcnJheQpjb25zdCBjb250YWluc0R1cGxpY2F0ZXMgPSBhcnIgPT4gbmV3IFNldChhcnIpLnNpemUgIT09IGFyci5sZW5ndGg7CgovLyBhIHZhbGlkIEhpdmUgYWNjb3VudCBpcyBiZXR3ZWVuIDMgYW5kIDE2IGNoYXJhY3RlcnMgaW4gbGVuZ3RoCmNvbnN0IGlzVmFsaWRIaXZlQWNjb3VudExlbmd0aCA9IGFjY291bnQgPT4gYWNjb3VudC5sZW5ndGggPj0gMyAmJiBhY2NvdW50Lmxlbmd0aCA8PSAxNjsKCi8vIGEgdmFsaWQgY29udHJhY3QgbmFtZSBpcyBiZXR3ZWVuIDMgYW5kIDUwIGNoYXJhY3RlcnMgaW4gbGVuZ3RoCmNvbnN0IGlzVmFsaWRDb250cmFjdExlbmd0aCA9IGNvbnRyYWN0ID0+IGNvbnRyYWN0Lmxlbmd0aCA+PSAzICYmIGNvbnRyYWN0Lmxlbmd0aCA8PSA1MDsKCmNvbnN0IGlzVmFsaWRBY2NvdW50c0FycmF5ID0gKGFycikgPT4gewogIGxldCB2YWxpZENvbnRlbnRzID0gdHJ1ZTsKICBhcnIuZm9yRWFjaCgoYWNjb3VudCkgPT4gewogICAgaWYgKCEodHlwZW9mIGFjY291bnQgPT09ICdzdHJpbmcnKSB8fCAhaXNWYWxpZEhpdmVBY2NvdW50TGVuZ3RoKGFjY291bnQpKSB7CiAgICAgIHZhbGlkQ29udGVudHMgPSBmYWxzZTsKICAgIH0KICB9KTsKICByZXR1cm4gdmFsaWRDb250ZW50czsKfTsKCmNvbnN0IGlzVmFsaWRDb250cmFjdHNBcnJheSA9IChhcnIpID0+IHsKICBsZXQgdmFsaWRDb250ZW50cyA9IHRydWU7CiAgYXJyLmZvckVhY2goKGNvbnRyYWN0KSA9PiB7CiAgICBpZiAoISh0eXBlb2YgY29udHJhY3QgPT09ICdzdHJpbmcnKSB8fCAhaXNWYWxpZENvbnRyYWN0TGVuZ3RoKGNvbnRyYWN0KSkgewogICAgICB2YWxpZENvbnRlbnRzID0gZmFsc2U7CiAgICB9CiAgfSk7CiAgcmV0dXJuIHZhbGlkQ29udGVudHM7Cn07CgovLyB1c2VkIGJ5IGlzc3VlIGFjdGlvbiB0byB2YWxpZGF0ZSB1c2VyIGlucHV0CmNvbnN0IGlzVmFsaWREYXRhUHJvcGVydGllcyA9IChmcm9tLCBmcm9tVHlwZSwgbmZ0LCBwcm9wZXJ0aWVzKSA9PiB7CiAgY29uc3QgcHJvcGVydHlDb3VudCA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmxlbmd0aDsKICBjb25zdCBuZnRQcm9wZXJ0eUNvdW50ID0gT2JqZWN0LmtleXMobmZ0LnByb3BlcnRpZXMpLmxlbmd0aDsKICBpZiAoIWFwaS5hc3NlcnQocHJvcGVydHlDb3VudCA8PSBuZnRQcm9wZXJ0eUNvdW50LCAnY2Fubm90IHNldCBtb3JlIGRhdGEgcHJvcGVydGllcyB0aGFuIE5GVCBoYXMnKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4CiAgZm9yIChjb25zdCBbbmFtZSwgZGF0YV0gb2YgT2JqZWN0LmVudHJpZXMocHJvcGVydGllcykpIHsKICAgIGxldCB2YWxpZENvbnRlbnRzID0gZmFsc2U7CiAgICBpZiAoYXBpLmFzc2VydChuYW1lICYmIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJwogICAgICAmJiBhcGkudmFsaWRhdG9yLmlzQWxwaGFudW1lcmljKG5hbWUpICYmIG5hbWUubGVuZ3RoID4gMCAmJiBuYW1lLmxlbmd0aCA8PSAyNSwgJ2ludmFsaWQgZGF0YSBwcm9wZXJ0eSBuYW1lOiBsZXR0ZXJzICYgbnVtYmVycyBvbmx5LCBtYXggbGVuZ3RoIG9mIDI1JykpIHsKICAgICAgaWYgKGFwaS5hc3NlcnQobmFtZSBpbiBuZnQucHJvcGVydGllcywgJ2RhdGEgcHJvcGVydHkgbXVzdCBleGlzdCcpKSB7CiAgICAgICAgY29uc3QgcHJvcGVydHlTY2hlbWEgPSBuZnQucHJvcGVydGllc1tuYW1lXTsKICAgICAgICBpZiAoYXBpLmFzc2VydChkYXRhICE9PSB1bmRlZmluZWQgJiYgZGF0YSAhPT0gbnVsbAogICAgICAgICAgJiYgKHR5cGVvZiBkYXRhID09PSBwcm9wZXJ0eVNjaGVtYS50eXBlCiAgICAgICAgICAgIHx8IChwcm9wZXJ0eVNjaGVtYS50eXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycgJiYgIWFwaS5CaWdOdW1iZXIoZGF0YSkuaXNOYU4oKSkpLCBgZGF0YSBwcm9wZXJ0eSB0eXBlIG1pc21hdGNoOiBleHBlY3RlZCAke3Byb3BlcnR5U2NoZW1hLnR5cGV9IGJ1dCBnb3QgJHt0eXBlb2YgZGF0YX0gZm9yIHByb3BlcnR5ICR7bmFtZX1gKQogICAgICAgICAgJiYgYXBpLmFzc2VydCh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycgfHwgZGF0YS5sZW5ndGggPD0gTUFYX0RBVEFfUFJPUEVSVFlfTEVOR1RILCBgc3RyaW5nIHByb3BlcnR5IG1heCBsZW5ndGggaXMgJHtNQVhfREFUQV9QUk9QRVJUWV9MRU5HVEh9IGNoYXJhY3RlcnNgKQogICAgICAgICAgJiYgYXBpLmFzc2VydCgoZnJvbVR5cGUgPT09ICdjb250cmFjdCcgJiYgcHJvcGVydHlTY2hlbWEuYXV0aG9yaXplZEVkaXRpbmdDb250cmFjdHMuaW5jbHVkZXMoZnJvbSkpCiAgICAgICAgICAgIHx8IChmcm9tVHlwZSA9PT0gJ3VzZXInICYmIHByb3BlcnR5U2NoZW1hLmF1dGhvcml6ZWRFZGl0aW5nQWNjb3VudHMuaW5jbHVkZXMoZnJvbSkpLCAnbm90IGFsbG93ZWQgdG8gc2V0IGRhdGEgcHJvcGVydGllcycpKSB7CiAgICAgICAgICB2YWxpZENvbnRlbnRzID0gdHJ1ZTsKCiAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgbnVtYmVyIHR5cGUgcmVwcmVzZW50ZWQgYXMgYSBzdHJpbmcsIHRoZW4gbmVlZCB0byBkbyB0eXBlIGNvbnZlcnNpb24KICAgICAgICAgIGlmIChwcm9wZXJ0eVNjaGVtYS50eXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduCiAgICAgICAgICAgIHByb3BlcnRpZXNbbmFtZV0gPSBhcGkuQmlnTnVtYmVyKGRhdGEpLnRvTnVtYmVyKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAoIXZhbGlkQ29udGVudHMpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgcmV0dXJuIHRydWU7Cn07CgovLyB1c2VkIGJ5IHNldFByb3BlcnRpZXMgYWN0aW9uIHRvIHZhbGlkYXRlIHVzZXIgaW5wdXQKY29uc3QgaXNWYWxpZERhdGFQcm9wZXJ0aWVzQXJyYXkgPSAoZnJvbSwgZnJvbVR5cGUsIG5mdCwgYXJyKSA9PiB7CiAgdHJ5IHsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgIGxldCB2YWxpZENvbnRlbnRzID0gZmFsc2U7CiAgICAgIGNvbnN0IHsgaWQsIHByb3BlcnRpZXMgfSA9IGFycltpXTsKICAgICAgaWYgKGFwaS5hc3NlcnQoaWQgJiYgdHlwZW9mIGlkID09PSAnc3RyaW5nJyAmJiAhYXBpLkJpZ051bWJlcihpZCkuaXNOYU4oKSAmJiBhcGkuQmlnTnVtYmVyKGlkKS5ndCgwKQogICAgICAgICYmIHByb3BlcnRpZXMgJiYgdHlwZW9mIHByb3BlcnRpZXMgPT09ICdvYmplY3QnLCAnaW52YWxpZCBkYXRhIHByb3BlcnRpZXMnKSkgewogICAgICAgIGlmIChpc1ZhbGlkRGF0YVByb3BlcnRpZXMoZnJvbSwgZnJvbVR5cGUsIG5mdCwgcHJvcGVydGllcykpIHsKICAgICAgICAgIHZhbGlkQ29udGVudHMgPSB0cnVlOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoIXZhbGlkQ29udGVudHMpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9IGNhdGNoIChlKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIHJldHVybiB0cnVlOwp9OwoKY29uc3QgaXNWYWxpZE5mdElkQXJyYXkgPSAoYXJyKSA9PiB7CiAgdHJ5IHsKICAgIGxldCBpbnN0YW5jZUNvdW50ID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgIGxldCB2YWxpZENvbnRlbnRzID0gZmFsc2U7CiAgICAgIGNvbnN0IHsgc3ltYm9sLCBpZHMgfSA9IGFycltpXTsKICAgICAgaWYgKGFwaS5hc3NlcnQoc3ltYm9sICYmIHR5cGVvZiBzeW1ib2wgPT09ICdzdHJpbmcnCiAgICAgICAgJiYgYXBpLnZhbGlkYXRvci5pc0FscGhhKHN5bWJvbCkgJiYgYXBpLnZhbGlkYXRvci5pc1VwcGVyY2FzZShzeW1ib2wpICYmIHN5bWJvbC5sZW5ndGggPiAwICYmIHN5bWJvbC5sZW5ndGggPD0gTUFYX1NZTUJPTF9MRU5HVEgKICAgICAgICAmJiBpZHMgJiYgdHlwZW9mIGlkcyA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShpZHMpLCAnaW52YWxpZCBuZnQgbGlzdCcpKSB7CiAgICAgICAgaW5zdGFuY2VDb3VudCArPSBpZHMubGVuZ3RoOwogICAgICAgIGlmIChhcGkuYXNzZXJ0KGluc3RhbmNlQ291bnQgPD0gTUFYX05VTV9ORlRTX09QRVJBQkxFLCBgY2Fubm90IG9wZXJhdGUgb24gbW9yZSB0aGFuICR7TUFYX05VTV9ORlRTX09QRVJBQkxFfSBORlQgaW5zdGFuY2VzIGF0IG9uY2VgKSkgewogICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpZHMubGVuZ3RoOyBqICs9IDEpIHsKICAgICAgICAgICAgY29uc3QgaWQgPSBpZHNbal07CiAgICAgICAgICAgIGlmICghYXBpLmFzc2VydChpZCAmJiB0eXBlb2YgaWQgPT09ICdzdHJpbmcnICYmICFhcGkuQmlnTnVtYmVyKGlkKS5pc05hTigpICYmIGFwaS5CaWdOdW1iZXIoaWQpLmd0KDApLCAnaW52YWxpZCBuZnQgbGlzdCcpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICB2YWxpZENvbnRlbnRzID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKCF2YWxpZENvbnRlbnRzKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfSBjYXRjaCAoZSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICByZXR1cm4gdHJ1ZTsKfTsKCi8vIHVzZWQgdG8gdmFsaWRhdGUgYnVuZGxlcyBvZiB0b2tlbnMgdG8gYmUgbG9ja2VkIGluIGFuIE5GVCB1cG9uIGlzc3VhbmNlCi8vICh0b2tlbnMgbXVzdCBleGlzdCwgYmFza2V0IG11c3Qgbm90IGNvbnNpc3Qgb2YgdG9vIG1hbnkgdG9rZW4gdHlwZXMsIGFuZCBpc3N1aW5nIGFjY291bnQKLy8gbXVzdCBoYXZlIGVub3VnaCBvZiBlYWNoIHRva2VuKQpjb25zdCBpc1ZhbGlkVG9rZW5CYXNrZXQgPSBhc3luYyAoYmFza2V0LCBiYWxhbmNlVGFibGVOYW1lLCBhY2NvdW50TmFtZSwgZmVlU3ltYm9sLCBmZWVRdWFudGl0eSkgPT4gewogIHRyeSB7CiAgICBjb25zdCBzeW1ib2xDb3VudCA9IE9iamVjdC5rZXlzKGJhc2tldCkubGVuZ3RoOwogICAgaWYgKHN5bWJvbENvdW50ID4gTUFYX05VTV9MT0NLRURfVE9LRU5fVFlQRVMpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4CiAgICBmb3IgKGNvbnN0IFtzeW1ib2wsIHF1YW50aXR5XSBvZiBPYmplY3QuZW50cmllcyhiYXNrZXQpKSB7CiAgICAgIGxldCB2YWxpZENvbnRlbnRzID0gZmFsc2U7CiAgICAgIGlmICh0eXBlb2Ygc3ltYm9sID09PSAnc3RyaW5nJyAmJiBhcGkudmFsaWRhdG9yLmlzQWxwaGEoc3ltYm9sKSAmJiBhcGkudmFsaWRhdG9yLmlzVXBwZXJjYXNlKHN5bWJvbCkgJiYgc3ltYm9sLmxlbmd0aCA+IDAgJiYgc3ltYm9sLmxlbmd0aCA8PSBNQVhfU1lNQk9MX0xFTkdUSCkgewogICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgYXBpLmRiLmZpbmRPbmVJblRhYmxlKCd0b2tlbnMnLCAndG9rZW5zJywgeyBzeW1ib2wgfSk7CiAgICAgICAgaWYgKHRva2VuKSB7CiAgICAgICAgICBpZiAocXVhbnRpdHkgJiYgdHlwZW9mIHF1YW50aXR5ID09PSAnc3RyaW5nJyAmJiAhYXBpLkJpZ051bWJlcihxdWFudGl0eSkuaXNOYU4oKSAmJiBhcGkuQmlnTnVtYmVyKHF1YW50aXR5KS5ndCgwKSAmJiBjb3VudERlY2ltYWxzKHF1YW50aXR5KSA8PSB0b2tlbi5wcmVjaXNpb24pIHsKICAgICAgICAgICAgY29uc3QgZmluYWxRdWFudGl0eSA9IHN5bWJvbCA9PT0gZmVlU3ltYm9sID8gY2FsY3VsYXRlQmFsYW5jZShxdWFudGl0eSwgZmVlUXVhbnRpdHksIHRva2VuLnByZWNpc2lvbiwgdHJ1ZSkgOiBxdWFudGl0eTsKICAgICAgICAgICAgY29uc3QgYmFza2V0VG9rZW5CYWxhbmNlID0gYXdhaXQgYXBpLmRiLmZpbmRPbmVJblRhYmxlKCd0b2tlbnMnLCBiYWxhbmNlVGFibGVOYW1lLCB7IGFjY291bnQ6IGFjY291bnROYW1lLCBzeW1ib2wgfSk7CiAgICAgICAgICAgIGlmIChiYXNrZXRUb2tlbkJhbGFuY2UgJiYgYXBpLkJpZ051bWJlcihiYXNrZXRUb2tlbkJhbGFuY2UuYmFsYW5jZSkuZ3RlKGZpbmFsUXVhbnRpdHkpKSB7CiAgICAgICAgICAgICAgdmFsaWRDb250ZW50cyA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKCF2YWxpZENvbnRlbnRzKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfSBjYXRjaCAoZSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICByZXR1cm4gdHJ1ZTsKfTsKCi8vIHVzZWQgYnkgaXNzdWUgJiBidXJuIGFjdGlvbnMgdG8gbG9jay91bmxvY2sgTkZUIGluc3RhbmNlcyB3aXRoaW4gdG9rZW5zCi8vIHBlcmZvcm1zIGEgdHJhbnNmZXIgYW5kIGRvZXMgZXh0ZW5kZWQgdmVyaWZpY2F0aW9uIG9uIHRoZSByZXN1bHRzCmNvbnN0IHRyYW5zZmVyQW5kVmVyaWZ5TmZ0cyA9IGFzeW5jIChmcm9tLCBmcm9tVHlwZSwgdG8sIHRvVHlwZSwgbmZ0cywgaXNTaWduZWRXaXRoQWN0aXZlS2V5LCBjYWxsaW5nQ29udHJhY3RJbmZvKSA9PiB7CiAgY29uc3QgcmVzdWx0cyA9IHsKICAgIHN1Y2Nlc3M6IFtdLAogICAgZmFpbDogW10sCiAgfTsKCiAgY29uc3QgZmluYWxGcm9tVHlwZSA9IGZyb21UeXBlID09PSAndXNlcicgPyAndScgOiAnYyc7CiAgY29uc3QgZmluYWxUb1R5cGUgPSB0b1R5cGUgPT09ICd1c2VyJyA/ICd1JyA6ICdjJzsKCiAgYXdhaXQgYWN0aW9ucy50cmFuc2Zlcih7CiAgICBmcm9tVHlwZSwKICAgIHRvLAogICAgdG9UeXBlLAogICAgbmZ0cywKICAgIGlzU2lnbmVkV2l0aEFjdGl2ZUtleSwKICAgIGNhbGxpbmdDb250cmFjdEluZm8sCiAgfSk7CiAgY29uc3QgbG9ncyA9IGFwaS5sb2dzKCk7CiAgY29uc3QgdG9rZW5NYXAgPSB7fTsKICBjb25zdCBjb3VudGVkTWFwID0ge307CgogIGlmIChsb2dzLmV2ZW50cykgewogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2dzLmV2ZW50cy5sZW5ndGg7IGkgKz0gMSkgewogICAgICBjb25zdCBldiA9IGxvZ3MuZXZlbnRzW2ldOwogICAgICBpZiAoZXYuY29udHJhY3QgJiYgZXYuZXZlbnQgJiYgZXYuZGF0YQogICAgICAgICYmIGV2LmNvbnRyYWN0ID09PSAnbmZ0JwogICAgICAgICYmIGV2LmV2ZW50ID09PSAndHJhbnNmZXInCiAgICAgICAgJiYgZXYuZGF0YS5mcm9tID09PSBmcm9tCiAgICAgICAgJiYgZXYuZGF0YS5mcm9tVHlwZSA9PT0gZmluYWxGcm9tVHlwZQogICAgICAgICYmIGV2LmRhdGEudG8gPT09IHRvCiAgICAgICAgJiYgZXYuZGF0YS50b1R5cGUgPT09IGZpbmFsVG9UeXBlKSB7CiAgICAgICAgLy8gdHJhbnNmZXIgaXMgdmVyaWZpZWQsIHNhdmUgaXQgc28gd2UgY2FuIG1hdGNoIGFnYWluc3QgbmZ0cwogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItdGVtcGxhdGUKICAgICAgICBjb25zdCBrZXkgPSBldi5kYXRhLnN5bWJvbCArICctJyArIGV2LmRhdGEuaWQ7CiAgICAgICAgdG9rZW5NYXBba2V5XSA9IDE7CiAgICAgIH0KICAgIH0KICB9CgogIC8vIGdlbmVyYXRlIHJlc3VsdCBkYXRhCiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG5mdHMubGVuZ3RoOyBpbmRleCArPSAxKSB7CiAgICBjb25zdCB7IHN5bWJvbCwgaWRzIH0gPSBuZnRzW2luZGV4XTsKICAgIGNvbnN0IHN1Y2Nlc3MgPSBbXTsKICAgIGNvbnN0IGZhaWwgPSBbXTsKICAgIGZvciAobGV0IGogPSAwOyBqIDwgaWRzLmxlbmd0aDsgaiArPSAxKSB7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItdGVtcGxhdGUKICAgICAgY29uc3QgaW5wdXRLZXkgPSBzeW1ib2wgKyAnLScgKyBpZHNbal07CiAgICAgIGlmICghKGlucHV0S2V5IGluIGNvdW50ZWRNYXApKSB7CiAgICAgICAgaWYgKGlucHV0S2V5IGluIHRva2VuTWFwKSB7CiAgICAgICAgICBzdWNjZXNzLnB1c2goaWRzW2pdLnRvU3RyaW5nKCkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmYWlsLnB1c2goaWRzW2pdLnRvU3RyaW5nKCkpOwogICAgICAgIH0KICAgICAgICBjb3VudGVkTWFwW2lucHV0S2V5XSA9IDE7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoc3VjY2Vzcy5sZW5ndGggPiAwKSB7CiAgICAgIHJlc3VsdHMuc3VjY2Vzcy5wdXNoKHsKICAgICAgICBzeW1ib2wsCiAgICAgICAgaWRzOiBzdWNjZXNzLAogICAgICB9KTsKICAgIH0KICAgIGlmIChmYWlsLmxlbmd0aCA+IDApIHsKICAgICAgcmVzdWx0cy5mYWlsLnB1c2goewogICAgICAgIHN5bWJvbCwKICAgICAgICBpZHM6IGZhaWwsCiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHJlc3VsdHM7Cn07CgphY3Rpb25zLnVwZGF0ZVVybCA9IGFzeW5jIChwYXlsb2FkKSA9PiB7CiAgY29uc3QgeyB1cmwsIHN5bWJvbCB9ID0gcGF5bG9hZDsKCiAgaWYgKGFwaS5hc3NlcnQoc3ltYm9sICYmIHR5cGVvZiBzeW1ib2wgPT09ICdzdHJpbmcnCiAgICAmJiB1cmwgJiYgdHlwZW9mIHVybCA9PT0gJ3N0cmluZycsICdpbnZhbGlkIHBhcmFtcycpCiAgICAmJiBhcGkuYXNzZXJ0KHVybC5sZW5ndGggPD0gMjU1LCAnaW52YWxpZCB1cmw6IG1heCBsZW5ndGggb2YgMjU1JykpIHsKICAgIC8vIGNoZWNrIGlmIHRoZSBORlQgZXhpc3RzCiAgICBjb25zdCBuZnQgPSBhd2FpdCBhcGkuZGIuZmluZE9uZSgnbmZ0cycsIHsgc3ltYm9sIH0pOwoKICAgIGlmIChuZnQpIHsKICAgICAgaWYgKGFwaS5hc3NlcnQobmZ0Lmlzc3VlciA9PT0gYXBpLnNlbmRlciwgJ211c3QgYmUgdGhlIGlzc3VlcicpKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gSlNPTi5wYXJzZShuZnQubWV0YWRhdGEpOwoKICAgICAgICAgIGlmIChhcGkuYXNzZXJ0KG1ldGFkYXRhICYmIG1ldGFkYXRhLnVybCwgJ2FuIGVycm9yIG9jY3VyZWQgd2hlbiB0cnlpbmcgdG8gdXBkYXRlIHRoZSB1cmwnKSkgewogICAgICAgICAgICBtZXRhZGF0YS51cmwgPSB1cmw7CiAgICAgICAgICAgIG5mdC5tZXRhZGF0YSA9IEpTT04uc3RyaW5naWZ5KG1ldGFkYXRhKTsKICAgICAgICAgICAgYXdhaXQgYXBpLmRiLnVwZGF0ZSgnbmZ0cycsIG5mdCk7CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgLy8gZXJyb3Igd2hlbiBwYXJzaW5nIHRoZSBtZXRhZGF0YQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfTsKCmFjdGlvbnMudXBkYXRlTWV0YWRhdGEgPSBhc3luYyAocGF5bG9hZCkgPT4gewogIGNvbnN0IHsgbWV0YWRhdGEsIHN5bWJvbCB9ID0gcGF5bG9hZDsKCiAgaWYgKGFwaS5hc3NlcnQoc3ltYm9sICYmIHR5cGVvZiBzeW1ib2wgPT09ICdzdHJpbmcnCiAgICAmJiBtZXRhZGF0YSAmJiB0eXBlb2YgbWV0YWRhdGEgPT09ICdvYmplY3QnLCAnaW52YWxpZCBwYXJhbXMnKSkgewogICAgLy8gY2hlY2sgaWYgdGhlIE5GVCBleGlzdHMKICAgIGNvbnN0IG5mdCA9IGF3YWl0IGFwaS5kYi5maW5kT25lKCduZnRzJywgeyBzeW1ib2wgfSk7CgogICAgaWYgKG5mdCkgewogICAgICBpZiAoYXBpLmFzc2VydChuZnQuaXNzdWVyID09PSBhcGkuc2VuZGVyLCAnbXVzdCBiZSB0aGUgaXNzdWVyJykpIHsKICAgICAgICB0cnkgewogICAgICAgICAgY29uc3QgZmluYWxNZXRhZGF0YSA9IEpTT04uc3RyaW5naWZ5KG1ldGFkYXRhKTsKCiAgICAgICAgICBpZiAoYXBpLmFzc2VydChmaW5hbE1ldGFkYXRhLmxlbmd0aCA8PSAxMDAwLCAnaW52YWxpZCBtZXRhZGF0YTogbWF4IGxlbmd0aCBvZiAxMDAwJykpIHsKICAgICAgICAgICAgbmZ0Lm1ldGFkYXRhID0gZmluYWxNZXRhZGF0YTsKICAgICAgICAgICAgYXdhaXQgYXBpLmRiLnVwZGF0ZSgnbmZ0cycsIG5mdCk7CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgLy8gZXJyb3Igd2hlbiBzdHJpbmdpZnlpbmcgdGhlIG1ldGFkYXRhCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9OwoKYWN0aW9ucy51cGRhdGVOYW1lID0gYXN5bmMgKHBheWxvYWQpID0+IHsKICBjb25zdCB7IG5hbWUsIHN5bWJvbCB9ID0gcGF5bG9hZDsKCiAgaWYgKGFwaS5hc3NlcnQoc3ltYm9sICYmIHR5cGVvZiBzeW1ib2wgPT09ICdzdHJpbmcnCiAgICAmJiBuYW1lICYmIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJywgJ2ludmFsaWQgcGFyYW1zJykKICAgICYmIGFwaS5hc3NlcnQoYXBpLnZhbGlkYXRvci5pc0FscGhhbnVtZXJpYyhhcGkudmFsaWRhdG9yLmJsYWNrbGlzdChuYW1lLCAnICcpKSAmJiBuYW1lLmxlbmd0aCA+IDAgJiYgbmFtZS5sZW5ndGggPD0gNTAsICdpbnZhbGlkIG5hbWU6IGxldHRlcnMsIG51bWJlcnMsIHdoaXRlc3BhY2VzIG9ubHksIG1heCBsZW5ndGggb2YgNTAnKSkgewogICAgLy8gY2hlY2sgaWYgdGhlIE5GVCBleGlzdHMKICAgIGNvbnN0IG5mdCA9IGF3YWl0IGFwaS5kYi5maW5kT25lKCduZnRzJywgeyBzeW1ib2wgfSk7CgogICAgaWYgKG5mdCkgewogICAgICBpZiAoYXBpLmFzc2VydChuZnQuaXNzdWVyID09PSBhcGkuc2VuZGVyLCAnbXVzdCBiZSB0aGUgaXNzdWVyJykpIHsKICAgICAgICBuZnQubmFtZSA9IG5hbWU7CiAgICAgICAgYXdhaXQgYXBpLmRiLnVwZGF0ZSgnbmZ0cycsIG5mdCk7CiAgICAgIH0KICAgIH0KICB9Cn07CgphY3Rpb25zLnVwZGF0ZU9yZ05hbWUgPSBhc3luYyAocGF5bG9hZCkgPT4gewogIGNvbnN0IHsgb3JnTmFtZSwgc3ltYm9sIH0gPSBwYXlsb2FkOwoKICBpZiAoYXBpLmFzc2VydChzeW1ib2wgJiYgdHlwZW9mIHN5bWJvbCA9PT0gJ3N0cmluZycKICAgICYmIG9yZ05hbWUgJiYgdHlwZW9mIG9yZ05hbWUgPT09ICdzdHJpbmcnLCAnaW52YWxpZCBwYXJhbXMnKQogICAgJiYgYXBpLmFzc2VydChhcGkudmFsaWRhdG9yLmlzQWxwaGFudW1lcmljKGFwaS52YWxpZGF0b3IuYmxhY2tsaXN0KG9yZ05hbWUsICcgJykpICYmIG9yZ05hbWUubGVuZ3RoID4gMCAmJiBvcmdOYW1lLmxlbmd0aCA8PSA1MCwgJ2ludmFsaWQgb3JnIG5hbWU6IGxldHRlcnMsIG51bWJlcnMsIHdoaXRlc3BhY2VzIG9ubHksIG1heCBsZW5ndGggb2YgNTAnKSkgewogICAgLy8gY2hlY2sgaWYgdGhlIE5GVCBleGlzdHMKICAgIGNvbnN0IG5mdCA9IGF3YWl0IGFwaS5kYi5maW5kT25lKCduZnRzJywgeyBzeW1ib2wgfSk7CgogICAgaWYgKG5mdCkgewogICAgICBpZiAoYXBpLmFzc2VydChuZnQuaXNzdWVyID09PSBhcGkuc2VuZGVyLCAnbXVzdCBiZSB0aGUgaXNzdWVyJykpIHsKICAgICAgICBuZnQub3JnTmFtZSA9IG9yZ05hbWU7CiAgICAgICAgYXdhaXQgYXBpLmRiLnVwZGF0ZSgnbmZ0cycsIG5mdCk7CiAgICAgIH0KICAgIH0KICB9Cn07CgphY3Rpb25zLnVwZGF0ZVByb2R1Y3ROYW1lID0gYXN5bmMgKHBheWxvYWQpID0+IHsKICBjb25zdCB7IHByb2R1Y3ROYW1lLCBzeW1ib2wgfSA9IHBheWxvYWQ7CgogIGlmIChhcGkuYXNzZXJ0KHN5bWJvbCAmJiB0eXBlb2Ygc3ltYm9sID09PSAnc3RyaW5nJwogICAgJiYgcHJvZHVjdE5hbWUgJiYgdHlwZW9mIHByb2R1Y3ROYW1lID09PSAnc3RyaW5nJywgJ2ludmFsaWQgcGFyYW1zJykKICAgICYmIGFwaS5hc3NlcnQoYXBpLnZhbGlkYXRvci5pc0FscGhhbnVtZXJpYyhhcGkudmFsaWRhdG9yLmJsYWNrbGlzdChwcm9kdWN0TmFtZSwgJyAnKSkgJiYgcHJvZHVjdE5hbWUubGVuZ3RoID4gMCAmJiBwcm9kdWN0TmFtZS5sZW5ndGggPD0gNTAsICdpbnZhbGlkIHByb2R1Y3QgbmFtZTogbGV0dGVycywgbnVtYmVycywgd2hpdGVzcGFjZXMgb25seSwgbWF4IGxlbmd0aCBvZiA1MCcpKSB7CiAgICAvLyBjaGVjayBpZiB0aGUgTkZUIGV4aXN0cwogICAgY29uc3QgbmZ0ID0gYXdhaXQgYXBpLmRiLmZpbmRPbmUoJ25mdHMnLCB7IHN5bWJvbCB9KTsKCiAgICBpZiAobmZ0KSB7CiAgICAgIGlmIChhcGkuYXNzZXJ0KG5mdC5pc3N1ZXIgPT09IGFwaS5zZW5kZXIsICdtdXN0IGJlIHRoZSBpc3N1ZXInKSkgewogICAgICAgIG5mdC5wcm9kdWN0TmFtZSA9IHByb2R1Y3ROYW1lOwogICAgICAgIGF3YWl0IGFwaS5kYi51cGRhdGUoJ25mdHMnLCBuZnQpOwogICAgICB9CiAgICB9CiAgfQp9OwoKYWN0aW9ucy5hZGRBdXRob3JpemVkSXNzdWluZ0FjY291bnRzID0gYXN5bmMgKHBheWxvYWQpID0+IHsKICBjb25zdCB7IGFjY291bnRzLCBzeW1ib2wsIGlzU2lnbmVkV2l0aEFjdGl2ZUtleSB9ID0gcGF5bG9hZDsKCiAgaWYgKGFwaS5hc3NlcnQoaXNTaWduZWRXaXRoQWN0aXZlS2V5ID09PSB0cnVlLCAneW91IG11c3QgdXNlIGEgY3VzdG9tX2pzb24gc2lnbmVkIHdpdGggeW91ciBhY3RpdmUga2V5JykKICAgICYmIGFwaS5hc3NlcnQoc3ltYm9sICYmIHR5cGVvZiBzeW1ib2wgPT09ICdzdHJpbmcnCiAgICAgICYmIGFjY291bnRzICYmIHR5cGVvZiBhY2NvdW50cyA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShhY2NvdW50cyksICdpbnZhbGlkIHBhcmFtcycpCiAgICAmJiBhcGkuYXNzZXJ0KGFjY291bnRzLmxlbmd0aCA8PSBNQVhfTlVNX0FVVEhPUklaRURfSVNTVUVSUywgYGNhbm5vdCBoYXZlIG1vcmUgdGhhbiAke01BWF9OVU1fQVVUSE9SSVpFRF9JU1NVRVJTfSBhdXRob3JpemVkIGlzc3VpbmcgYWNjb3VudHNgKSkgewogICAgY29uc3QgdmFsaWRDb250ZW50cyA9IGlzVmFsaWRBY2NvdW50c0FycmF5KGFjY291bnRzKTsKICAgIGlmIChhcGkuYXNzZXJ0KHZhbGlkQ29udGVudHMsICdpbnZhbGlkIGFjY291bnQgbGlzdCcpKSB7CiAgICAgIC8vIGNoZWNrIGlmIHRoZSBORlQgZXhpc3RzCiAgICAgIGNvbnN0IG5mdCA9IGF3YWl0IGFwaS5kYi5maW5kT25lKCduZnRzJywgeyBzeW1ib2wgfSk7CgogICAgICBpZiAobmZ0KSB7CiAgICAgICAgY29uc3Qgc2FuaXRpemVkTGlzdCA9IFtdOwogICAgICAgIC8vIGZpbHRlciBvdXQgZHVwbGljYXRlIGFjY291bnRzCiAgICAgICAgYWNjb3VudHMuZm9yRWFjaCgoYWNjb3VudCkgPT4gewogICAgICAgICAgY29uc3QgZmluYWxBY2NvdW50ID0gYWNjb3VudC50cmltKCkudG9Mb3dlckNhc2UoKTsKICAgICAgICAgIGxldCBpc0R1cGxpY2F0ZSA9IGZhbHNlOwogICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZnQuYXV0aG9yaXplZElzc3VpbmdBY2NvdW50cy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICBpZiAoZmluYWxBY2NvdW50ID09PSBuZnQuYXV0aG9yaXplZElzc3VpbmdBY2NvdW50c1tpXSkgewogICAgICAgICAgICAgIGlzRHVwbGljYXRlID0gdHJ1ZTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKCFpc0R1cGxpY2F0ZSkgewogICAgICAgICAgICBzYW5pdGl6ZWRMaXN0LnB1c2goZmluYWxBY2NvdW50KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgaWYgKGFwaS5hc3NlcnQobmZ0Lmlzc3VlciA9PT0gYXBpLnNlbmRlciwgJ211c3QgYmUgdGhlIGlzc3VlcicpCiAgICAgICAgICAmJiBhcGkuYXNzZXJ0KCFjb250YWluc0R1cGxpY2F0ZXMoc2FuaXRpemVkTGlzdCksICdjYW5ub3QgYWRkIHRoZSBzYW1lIGFjY291bnQgdHdpY2UnKQogICAgICAgICAgJiYgYXBpLmFzc2VydChuZnQuYXV0aG9yaXplZElzc3VpbmdBY2NvdW50cy5sZW5ndGggKyBzYW5pdGl6ZWRMaXN0Lmxlbmd0aCA8PSBNQVhfTlVNX0FVVEhPUklaRURfSVNTVUVSUywgYGNhbm5vdCBoYXZlIG1vcmUgdGhhbiAke01BWF9OVU1fQVVUSE9SSVpFRF9JU1NVRVJTfSBhdXRob3JpemVkIGlzc3VpbmcgYWNjb3VudHNgKSkgewogICAgICAgICAgY29uc3QgZmluYWxBY2NvdW50TGlzdCA9IG5mdC5hdXRob3JpemVkSXNzdWluZ0FjY291bnRzLmNvbmNhdChzYW5pdGl6ZWRMaXN0KTsKICAgICAgICAgIG5mdC5hdXRob3JpemVkSXNzdWluZ0FjY291bnRzID0gZmluYWxBY2NvdW50TGlzdDsKICAgICAgICAgIGF3YWl0IGFwaS5kYi51cGRhdGUoJ25mdHMnLCBuZnQpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfTsKCmFjdGlvbnMuYWRkQXV0aG9yaXplZElzc3VpbmdDb250cmFjdHMgPSBhc3luYyAocGF5bG9hZCkgPT4gewogIGNvbnN0IHsgY29udHJhY3RzLCBzeW1ib2wsIGlzU2lnbmVkV2l0aEFjdGl2ZUtleSB9ID0gcGF5bG9hZDsKCiAgaWYgKGFwaS5hc3NlcnQoaXNTaWduZWRXaXRoQWN0aXZlS2V5ID09PSB0cnVlLCAneW91IG11c3QgdXNlIGEgY3VzdG9tX2pzb24gc2lnbmVkIHdpdGggeW91ciBhY3RpdmUga2V5JykKICAgICYmIGFwaS5hc3NlcnQoc3ltYm9sICYmIHR5cGVvZiBzeW1ib2wgPT09ICdzdHJpbmcnCiAgICAgICYmIGNvbnRyYWN0cyAmJiB0eXBlb2YgY29udHJhY3RzID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KGNvbnRyYWN0cyksICdpbnZhbGlkIHBhcmFtcycpCiAgICAmJiBhcGkuYXNzZXJ0KGNvbnRyYWN0cy5sZW5ndGggPD0gTUFYX05VTV9BVVRIT1JJWkVEX0lTU1VFUlMsIGBjYW5ub3QgaGF2ZSBtb3JlIHRoYW4gJHtNQVhfTlVNX0FVVEhPUklaRURfSVNTVUVSU30gYXV0aG9yaXplZCBpc3N1aW5nIGNvbnRyYWN0c2ApKSB7CiAgICBjb25zdCB2YWxpZENvbnRlbnRzID0gaXNWYWxpZENvbnRyYWN0c0FycmF5KGNvbnRyYWN0cyk7CiAgICBpZiAoYXBpLmFzc2VydCh2YWxpZENvbnRlbnRzLCAnaW52YWxpZCBjb250cmFjdCBsaXN0JykpIHsKICAgICAgLy8gY2hlY2sgaWYgdGhlIE5GVCBleGlzdHMKICAgICAgY29uc3QgbmZ0ID0gYXdhaXQgYXBpLmRiLmZpbmRPbmUoJ25mdHMnLCB7IHN5bWJvbCB9KTsKCiAgICAgIGlmIChuZnQpIHsKICAgICAgICBjb25zdCBzYW5pdGl6ZWRMaXN0ID0gW107CiAgICAgICAgLy8gZmlsdGVyIG91dCBkdXBsaWNhdGUgY29udHJhY3RzCiAgICAgICAgY29udHJhY3RzLmZvckVhY2goKGNvbnRyYWN0KSA9PiB7CiAgICAgICAgICBjb25zdCBmaW5hbENvbnRyYWN0ID0gY29udHJhY3QudHJpbSgpOwogICAgICAgICAgbGV0IGlzRHVwbGljYXRlID0gZmFsc2U7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5mdC5hdXRob3JpemVkSXNzdWluZ0NvbnRyYWN0cy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICBpZiAoZmluYWxDb250cmFjdCA9PT0gbmZ0LmF1dGhvcml6ZWRJc3N1aW5nQ29udHJhY3RzW2ldKSB7CiAgICAgICAgICAgICAgaXNEdXBsaWNhdGUgPSB0cnVlOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIWlzRHVwbGljYXRlKSB7CiAgICAgICAgICAgIHNhbml0aXplZExpc3QucHVzaChmaW5hbENvbnRyYWN0KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgaWYgKGFwaS5hc3NlcnQobmZ0Lmlzc3VlciA9PT0gYXBpLnNlbmRlciwgJ211c3QgYmUgdGhlIGlzc3VlcicpCiAgICAgICAgICAmJiBhcGkuYXNzZXJ0KCFjb250YWluc0R1cGxpY2F0ZXMoc2FuaXRpemVkTGlzdCksICdjYW5ub3QgYWRkIHRoZSBzYW1lIGNvbnRyYWN0IHR3aWNlJykKICAgICAgICAgICYmIGFwaS5hc3NlcnQobmZ0LmF1dGhvcml6ZWRJc3N1aW5nQ29udHJhY3RzLmxlbmd0aCArIHNhbml0aXplZExpc3QubGVuZ3RoIDw9IE1BWF9OVU1fQVVUSE9SSVpFRF9JU1NVRVJTLCBgY2Fubm90IGhhdmUgbW9yZSB0aGFuICR7TUFYX05VTV9BVVRIT1JJWkVEX0lTU1VFUlN9IGF1dGhvcml6ZWQgaXNzdWluZyBjb250cmFjdHNgKSkgewogICAgICAgICAgY29uc3QgZmluYWxDb250cmFjdExpc3QgPSBuZnQuYXV0aG9yaXplZElzc3VpbmdDb250cmFjdHMuY29uY2F0KHNhbml0aXplZExpc3QpOwogICAgICAgICAgbmZ0LmF1dGhvcml6ZWRJc3N1aW5nQ29udHJhY3RzID0gZmluYWxDb250cmFjdExpc3Q7CiAgICAgICAgICBhd2FpdCBhcGkuZGIudXBkYXRlKCduZnRzJywgbmZ0KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn07CgphY3Rpb25zLnJlbW92ZUF1dGhvcml6ZWRJc3N1aW5nQWNjb3VudHMgPSBhc3luYyAocGF5bG9hZCkgPT4gewogIGNvbnN0IHsgYWNjb3VudHMsIHN5bWJvbCwgaXNTaWduZWRXaXRoQWN0aXZlS2V5IH0gPSBwYXlsb2FkOwoKICBpZiAoYXBpLmFzc2VydChpc1NpZ25lZFdpdGhBY3RpdmVLZXkgPT09IHRydWUsICd5b3UgbXVzdCB1c2UgYSBjdXN0b21fanNvbiBzaWduZWQgd2l0aCB5b3VyIGFjdGl2ZSBrZXknKQogICAgJiYgYXBpLmFzc2VydChzeW1ib2wgJiYgdHlwZW9mIHN5bWJvbCA9PT0gJ3N0cmluZycKICAgICAgJiYgYWNjb3VudHMgJiYgdHlwZW9mIGFjY291bnRzID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KGFjY291bnRzKSwgJ2ludmFsaWQgcGFyYW1zJykKICAgICYmIGFwaS5hc3NlcnQoYWNjb3VudHMubGVuZ3RoIDw9IE1BWF9OVU1fQVVUSE9SSVpFRF9JU1NVRVJTLCBgY2Fubm90IHJlbW92ZSBtb3JlIHRoYW4gJHtNQVhfTlVNX0FVVEhPUklaRURfSVNTVUVSU30gYXV0aG9yaXplZCBpc3N1aW5nIGFjY291bnRzYCkpIHsKICAgIGNvbnN0IHZhbGlkQ29udGVudHMgPSBpc1ZhbGlkQWNjb3VudHNBcnJheShhY2NvdW50cyk7CiAgICBpZiAoYXBpLmFzc2VydCh2YWxpZENvbnRlbnRzLCAnaW52YWxpZCBhY2NvdW50IGxpc3QnKSkgewogICAgICAvLyBjaGVjayBpZiB0aGUgTkZUIGV4aXN0cwogICAgICBjb25zdCBuZnQgPSBhd2FpdCBhcGkuZGIuZmluZE9uZSgnbmZ0cycsIHsgc3ltYm9sIH0pOwoKICAgICAgaWYgKG5mdCkgewogICAgICAgIGlmIChhcGkuYXNzZXJ0KG5mdC5pc3N1ZXIgPT09IGFwaS5zZW5kZXIsICdtdXN0IGJlIHRoZSBpc3N1ZXInKSkgewogICAgICAgICAgLy8gYnVpbGQgZmluYWwgbGlzdCwgcmVtb3ZpbmcgZW50cmllcyB0aGF0IGFyZSBib3RoIGluIHRoZSBpbnB1dCBsaXN0ICYgY3VycmVudCBhdXRob3JpemVkIGxpc3QKICAgICAgICAgIGNvbnN0IGZpbmFsQWNjb3VudExpc3QgPSBuZnQuYXV0aG9yaXplZElzc3VpbmdBY2NvdW50cy5maWx0ZXIoKGN1cnJlbnRWYWx1ZSkgPT4gewogICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjY291bnRzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgY29uc3QgZmluYWxBY2NvdW50ID0gYWNjb3VudHNbaV0udHJpbSgpLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA9PT0gZmluYWxBY2NvdW50KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfSk7CgogICAgICAgICAgbmZ0LmF1dGhvcml6ZWRJc3N1aW5nQWNjb3VudHMgPSBmaW5hbEFjY291bnRMaXN0OwogICAgICAgICAgYXdhaXQgYXBpLmRiLnVwZGF0ZSgnbmZ0cycsIG5mdCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9OwoKYWN0aW9ucy5yZW1vdmVBdXRob3JpemVkSXNzdWluZ0NvbnRyYWN0cyA9IGFzeW5jIChwYXlsb2FkKSA9PiB7CiAgY29uc3QgeyBjb250cmFjdHMsIHN5bWJvbCwgaXNTaWduZWRXaXRoQWN0aXZlS2V5IH0gPSBwYXlsb2FkOwoKICBpZiAoYXBpLmFzc2VydChpc1NpZ25lZFdpdGhBY3RpdmVLZXkgPT09IHRydWUsICd5b3UgbXVzdCB1c2UgYSBjdXN0b21fanNvbiBzaWduZWQgd2l0aCB5b3VyIGFjdGl2ZSBrZXknKQogICAgJiYgYXBpLmFzc2VydChzeW1ib2wgJiYgdHlwZW9mIHN5bWJvbCA9PT0gJ3N0cmluZycKICAgICAgJiYgY29udHJhY3RzICYmIHR5cGVvZiBjb250cmFjdHMgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkoY29udHJhY3RzKSwgJ2ludmFsaWQgcGFyYW1zJykKICAgICYmIGFwaS5hc3NlcnQoY29udHJhY3RzLmxlbmd0aCA8PSBNQVhfTlVNX0FVVEhPUklaRURfSVNTVUVSUywgYGNhbm5vdCByZW1vdmUgbW9yZSB0aGFuICR7TUFYX05VTV9BVVRIT1JJWkVEX0lTU1VFUlN9IGF1dGhvcml6ZWQgaXNzdWluZyBjb250cmFjdHNgKSkgewogICAgY29uc3QgdmFsaWRDb250ZW50cyA9IGlzVmFsaWRDb250cmFjdHNBcnJheShjb250cmFjdHMpOwogICAgaWYgKGFwaS5hc3NlcnQodmFsaWRDb250ZW50cywgJ2ludmFsaWQgY29udHJhY3QgbGlzdCcpKSB7CiAgICAgIC8vIGNoZWNrIGlmIHRoZSBORlQgZXhpc3RzCiAgICAgIGNvbnN0IG5mdCA9IGF3YWl0IGFwaS5kYi5maW5kT25lKCduZnRzJywgeyBzeW1ib2wgfSk7CgogICAgICBpZiAobmZ0KSB7CiAgICAgICAgaWYgKGFwaS5hc3NlcnQobmZ0Lmlzc3VlciA9PT0gYXBpLnNlbmRlciwgJ211c3QgYmUgdGhlIGlzc3VlcicpKSB7CiAgICAgICAgICAvLyBidWlsZCBmaW5hbCBsaXN0LCByZW1vdmluZyBlbnRyaWVzIHRoYXQgYXJlIGJvdGggaW4gdGhlIGlucHV0IGxpc3QgJiBjdXJyZW50IGF1dGhvcml6ZWQgbGlzdAogICAgICAgICAgY29uc3QgZmluYWxDb250cmFjdExpc3QgPSBuZnQuYXV0aG9yaXplZElzc3VpbmdDb250cmFjdHMuZmlsdGVyKChjdXJyZW50VmFsdWUpID0+IHsKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250cmFjdHMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgICBjb25zdCBmaW5hbENvbnRyYWN0ID0gY29udHJhY3RzW2ldLnRyaW0oKTsKICAgICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlID09PSBmaW5hbENvbnRyYWN0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfSk7CgogICAgICAgICAgbmZ0LmF1dGhvcml6ZWRJc3N1aW5nQ29udHJhY3RzID0gZmluYWxDb250cmFjdExpc3Q7CiAgICAgICAgICBhd2FpdCBhcGkuZGIudXBkYXRlKCduZnRzJywgbmZ0KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn07CgphY3Rpb25zLnRyYW5zZmVyT3duZXJzaGlwID0gYXN5bmMgKHBheWxvYWQpID0+IHsKICBjb25zdCB7IHN5bWJvbCwgdG8sIGlzU2lnbmVkV2l0aEFjdGl2ZUtleSB9ID0gcGF5bG9hZDsKCiAgaWYgKGFwaS5hc3NlcnQoaXNTaWduZWRXaXRoQWN0aXZlS2V5ID09PSB0cnVlLCAneW91IG11c3QgdXNlIGEgY3VzdG9tX2pzb24gc2lnbmVkIHdpdGggeW91ciBhY3RpdmUga2V5JykKICAgICYmIGFwaS5hc3NlcnQoc3ltYm9sICYmIHR5cGVvZiBzeW1ib2wgPT09ICdzdHJpbmcnCiAgICAgICYmIHRvICYmIHR5cGVvZiB0byA9PT0gJ3N0cmluZycsICdpbnZhbGlkIHBhcmFtcycpKSB7CiAgICAvLyBjaGVjayBpZiB0aGUgTkZUIGV4aXN0cwogICAgY29uc3QgbmZ0ID0gYXdhaXQgYXBpLmRiLmZpbmRPbmUoJ25mdHMnLCB7IHN5bWJvbCB9KTsKCiAgICBpZiAobmZ0KSB7CiAgICAgIGlmIChhcGkuYXNzZXJ0KG5mdC5pc3N1ZXIgPT09IGFwaS5zZW5kZXIsICdtdXN0IGJlIHRoZSBpc3N1ZXInKSkgewogICAgICAgIGNvbnN0IGZpbmFsVG8gPSB0by50cmltKCkudG9Mb3dlckNhc2UoKTsKCiAgICAgICAgaWYgKGFwaS5hc3NlcnQoaXNWYWxpZEhpdmVBY2NvdW50TGVuZ3RoKGZpbmFsVG8pLCAnaW52YWxpZCB0bycpKSB7CiAgICAgICAgICBuZnQuaXNzdWVyID0gZmluYWxUbzsKICAgICAgICAgIGF3YWl0IGFwaS5kYi51cGRhdGUoJ25mdHMnLCBuZnQpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfTsKCmFjdGlvbnMuZW5hYmxlRGVsZWdhdGlvbiA9IGFzeW5jIChwYXlsb2FkKSA9PiB7CiAgY29uc3QgewogICAgc3ltYm9sLAogICAgdW5kZWxlZ2F0aW9uQ29vbGRvd24sCiAgICBpc1NpZ25lZFdpdGhBY3RpdmVLZXksCiAgfSA9IHBheWxvYWQ7CgogIC8vIGdldCBjb250cmFjdCBwYXJhbXMKICBjb25zdCBwYXJhbXMgPSBhd2FpdCBhcGkuZGIuZmluZE9uZSgncGFyYW1zJywge30pOwogIGNvbnN0IHsgZW5hYmxlRGVsZWdhdGlvbkZlZSB9ID0gcGFyYW1zOwoKICAvLyBnZXQgYXBpLnNlbmRlcidzIFVUSUxJVFlfVE9LRU5fU1lNQk9MIGJhbGFuY2UKICBjb25zdCB1dGlsaXR5VG9rZW5CYWxhbmNlID0gYXdhaXQgYXBpLmRiLmZpbmRPbmVJblRhYmxlKCd0b2tlbnMnLCAnYmFsYW5jZXMnLCB7IGFjY291bnQ6IGFwaS5zZW5kZXIsIHN5bWJvbDogVVRJTElUWV9UT0tFTl9TWU1CT0wgfSk7CgogIGNvbnN0IGF1dGhvcml6ZWQgPSBhcGkuQmlnTnVtYmVyKGVuYWJsZURlbGVnYXRpb25GZWUpLmx0ZSgwKQogICAgPyB0cnVlCiAgICA6IHV0aWxpdHlUb2tlbkJhbGFuY2UgJiYgYXBpLkJpZ051bWJlcih1dGlsaXR5VG9rZW5CYWxhbmNlLmJhbGFuY2UpLmd0ZShlbmFibGVEZWxlZ2F0aW9uRmVlKTsKCiAgaWYgKGFwaS5hc3NlcnQoYXV0aG9yaXplZCwgJ3lvdSBtdXN0IGhhdmUgZW5vdWdoIHRva2VucyB0byBjb3ZlciBmZWVzJykKICAgICYmIGFwaS5hc3NlcnQoaXNTaWduZWRXaXRoQWN0aXZlS2V5ID09PSB0cnVlLCAneW91IG11c3QgdXNlIGEgY3VzdG9tX2pzb24gc2lnbmVkIHdpdGggeW91ciBhY3RpdmUga2V5JykKICAgICYmIGFwaS5hc3NlcnQoc3ltYm9sICYmIHR5cGVvZiBzeW1ib2wgPT09ICdzdHJpbmcnLCAnaW52YWxpZCBzeW1ib2wnKQogICAgJiYgYXBpLmFzc2VydCh1bmRlbGVnYXRpb25Db29sZG93biAmJiBOdW1iZXIuaXNJbnRlZ2VyKHVuZGVsZWdhdGlvbkNvb2xkb3duKSAmJiB1bmRlbGVnYXRpb25Db29sZG93biA+IDAgJiYgdW5kZWxlZ2F0aW9uQ29vbGRvd24gPD0gMTgyNTAsICd1bmRlbGVnYXRpb25Db29sZG93biBtdXN0IGJlIGFuIGludGVnZXIgYmV0d2VlbiAxIGFuZCAxODI1MCcpKSB7CiAgICBjb25zdCBuZnQgPSBhd2FpdCBhcGkuZGIuZmluZE9uZSgnbmZ0cycsIHsgc3ltYm9sIH0pOwoKICAgIGlmIChhcGkuYXNzZXJ0KG5mdCAhPT0gbnVsbCwgJ3N5bWJvbCBkb2VzIG5vdCBleGlzdCcpCiAgICAgICYmIGFwaS5hc3NlcnQobmZ0Lmlzc3VlciA9PT0gYXBpLnNlbmRlciwgJ211c3QgYmUgdGhlIGlzc3VlcicpCiAgICAgICYmIGFwaS5hc3NlcnQobmZ0LmRlbGVnYXRpb25FbmFibGVkID09PSB1bmRlZmluZWQgfHwgbmZ0LmRlbGVnYXRpb25FbmFibGVkID09PSBmYWxzZSwgJ2RlbGVnYXRpb24gYWxyZWFkeSBlbmFibGVkJykpIHsKICAgICAgLy8gYnVybiB0aGUgZmVlcwogICAgICBpZiAoYXBpLkJpZ051bWJlcihlbmFibGVEZWxlZ2F0aW9uRmVlKS5ndCgwKSkgewogICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFwaS5leGVjdXRlU21hcnRDb250cmFjdCgndG9rZW5zJywgJ3RyYW5zZmVyJywgewogICAgICAgICAgdG86ICdudWxsJywgc3ltYm9sOiBVVElMSVRZX1RPS0VOX1NZTUJPTCwgcXVhbnRpdHk6IGVuYWJsZURlbGVnYXRpb25GZWUsIGlzU2lnbmVkV2l0aEFjdGl2ZUtleSwKICAgICAgICB9KTsKICAgICAgICAvLyBjaGVjayBpZiB0aGUgdG9rZW5zIHdlcmUgc2VudAogICAgICAgIGlmICghaXNUb2tlblRyYW5zZmVyVmVyaWZpZWQocmVzLCBhcGkuc2VuZGVyLCAnbnVsbCcsIFVUSUxJVFlfVE9LRU5fU1lNQk9MLCBlbmFibGVEZWxlZ2F0aW9uRmVlLCAndHJhbnNmZXInKSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfQoKICAgICAgbmZ0LmRlbGVnYXRpb25FbmFibGVkID0gdHJ1ZTsKICAgICAgbmZ0LnVuZGVsZWdhdGlvbkNvb2xkb3duID0gdW5kZWxlZ2F0aW9uQ29vbGRvd247CiAgICAgIGF3YWl0IGFwaS5kYi51cGRhdGUoJ25mdHMnLCBuZnQpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9CiAgcmV0dXJuIGZhbHNlOwp9OwoKYWN0aW9ucy51cGRhdGVQcm9wZXJ0eURlZmluaXRpb24gPSBhc3luYyAocGF5bG9hZCkgPT4gewogIGNvbnN0IHsKICAgIHN5bWJvbCwgbmFtZSwgbmV3TmFtZSwgdHlwZSwgaXNSZWFkT25seSwgaXNTaWduZWRXaXRoQWN0aXZlS2V5LAogIH0gPSBwYXlsb2FkOwoKICBpZiAoYXBpLmFzc2VydChpc1NpZ25lZFdpdGhBY3RpdmVLZXkgPT09IHRydWUsICd5b3UgbXVzdCB1c2UgYSBjdXN0b21fanNvbiBzaWduZWQgd2l0aCB5b3VyIGFjdGl2ZSBrZXknKQogICAgJiYgYXBpLmFzc2VydChzeW1ib2wgJiYgdHlwZW9mIHN5bWJvbCA9PT0gJ3N0cmluZycKICAgICAgJiYgbmFtZSAmJiB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycsICdpbnZhbGlkIHBhcmFtcycpCiAgICAmJiBhcGkuYXNzZXJ0KGFwaS52YWxpZGF0b3IuaXNBbHBoYW51bWVyaWMobmFtZSkgJiYgbmFtZS5sZW5ndGggPiAwICYmIG5hbWUubGVuZ3RoIDw9IDI1LCAnaW52YWxpZCBuYW1lOiBsZXR0ZXJzICYgbnVtYmVycyBvbmx5LCBtYXggbGVuZ3RoIG9mIDI1JykKICAgICYmIGFwaS5hc3NlcnQobmV3TmFtZSA9PT0gdW5kZWZpbmVkCiAgICAgIHx8ICh0eXBlb2YgbmV3TmFtZSA9PT0gJ3N0cmluZycgJiYgYXBpLnZhbGlkYXRvci5pc0FscGhhbnVtZXJpYyhuZXdOYW1lKSAmJiBuZXdOYW1lLmxlbmd0aCA+IDAgJiYgbmV3TmFtZS5sZW5ndGggPD0gMjUpLCAnaW52YWxpZCBuZXcgbmFtZTogbGV0dGVycyAmIG51bWJlcnMgb25seSwgbWF4IGxlbmd0aCBvZiAyNScpCiAgICAmJiBhcGkuYXNzZXJ0KHR5cGUgPT09IHVuZGVmaW5lZAogICAgICB8fCAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnICYmICh0eXBlID09PSAnbnVtYmVyJyB8fCB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlID09PSAnYm9vbGVhbicpKSwgJ2ludmFsaWQgdHlwZTogbXVzdCBiZSBudW1iZXIsIHN0cmluZywgb3IgYm9vbGVhbicpCiAgICAmJiBhcGkuYXNzZXJ0KGlzUmVhZE9ubHkgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXNSZWFkT25seSA9PT0gJ2Jvb2xlYW4nLCAnaW52YWxpZCBpc1JlYWRPbmx5OiBtdXN0IGJlIHRydWUgb3IgZmFsc2UnKSkgewogICAgLy8gY2hlY2sgaWYgdGhlIE5GVCBleGlzdHMKICAgIGNvbnN0IG5mdCA9IGF3YWl0IGFwaS5kYi5maW5kT25lKCduZnRzJywgeyBzeW1ib2wgfSk7CgogICAgaWYgKG5mdCkgewogICAgICBpZiAoYXBpLmFzc2VydChuZnQuc3VwcGx5ID09PSAwLCAnY2Fubm90IGNoYW5nZSBkYXRhIHByb3BlcnR5IGRlZmluaXRpb247IHRva2VucyBhbHJlYWR5IGlzc3VlZCcpCiAgICAgICAgJiYgYXBpLmFzc2VydChuYW1lIGluIG5mdC5wcm9wZXJ0aWVzLCAncHJvcGVydHkgbXVzdCBleGlzdCcpCiAgICAgICAgJiYgYXBpLmFzc2VydChuZnQuaXNzdWVyID09PSBhcGkuc2VuZGVyLCAnbXVzdCBiZSB0aGUgaXNzdWVyJykpIHsKICAgICAgICAvLyBleHRyYSB2YWxpZGF0aW9ucyBmb3IgY2hhbmdpbmcgdGhlIG5hbWUgb2YgYSBwcm9wZXJ0eQogICAgICAgIGlmIChuZXdOYW1lICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIGlmIChuZnQuZ3JvdXBCeSAhPT0gdW5kZWZpbmVkICYmIG5mdC5ncm91cEJ5Lmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgaWYgKCFhcGkuYXNzZXJ0KCFuZnQuZ3JvdXBCeS5pbmNsdWRlcyhuYW1lKSwgJ2Nhbm5vdCBjaGFuZ2UgZGF0YSBwcm9wZXJ0eSBuYW1lOyBwcm9wZXJ0eSBpcyBwYXJ0IG9mIGdyb3VwQnknKSkgewogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKCFhcGkuYXNzZXJ0KG5ld05hbWUgIT09IG5hbWUsICduZXcgbmFtZSBtdXN0IGJlIGRpZmZlcmVudCBmcm9tIG9sZCBuYW1lJykKICAgICAgICAgICAgfHwgIWFwaS5hc3NlcnQoIShuZXdOYW1lIGluIG5mdC5wcm9wZXJ0aWVzKSwgJ3RoZXJlIGlzIGFscmVhZHkgYSBkYXRhIHByb3BlcnR5IHdpdGggdGhlIGdpdmVuIG5ldyBuYW1lJykpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgbGV0IHNob3VsZFVwZGF0ZSA9IGZhbHNlOwogICAgICAgIGNvbnN0IG9yaWdpbmFsVHlwZSA9IG5mdC5wcm9wZXJ0aWVzW25hbWVdLnR5cGU7CiAgICAgICAgY29uc3Qgb3JpZ2luYWxJc1JlYWRPbmx5ID0gbmZ0LnByb3BlcnRpZXNbbmFtZV0uaXNSZWFkT25seTsKICAgICAgICBpZiAodHlwZSAhPT0gdW5kZWZpbmVkICYmIHR5cGUgIT09IG9yaWdpbmFsVHlwZSkgewogICAgICAgICAgbmZ0LnByb3BlcnRpZXNbbmFtZV0udHlwZSA9IHR5cGU7CiAgICAgICAgICBzaG91bGRVcGRhdGUgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoaXNSZWFkT25seSAhPT0gdW5kZWZpbmVkICYmIGlzUmVhZE9ubHkgIT09IG9yaWdpbmFsSXNSZWFkT25seSkgewogICAgICAgICAgbmZ0LnByb3BlcnRpZXNbbmFtZV0uaXNSZWFkT25seSA9IGlzUmVhZE9ubHk7CiAgICAgICAgICBzaG91bGRVcGRhdGUgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAobmV3TmFtZSAhPT0gdW5kZWZpbmVkICYmIG5ld05hbWUgIT09IG5hbWUpIHsKICAgICAgICAgIG5mdC5wcm9wZXJ0aWVzW25ld05hbWVdID0gbmZ0LnByb3BlcnRpZXNbbmFtZV07CiAgICAgICAgICBkZWxldGUgbmZ0LnByb3BlcnRpZXNbbmFtZV07CiAgICAgICAgICBzaG91bGRVcGRhdGUgPSB0cnVlOwogICAgICAgIH0KCiAgICAgICAgaWYgKHNob3VsZFVwZGF0ZSkgewogICAgICAgICAgYXdhaXQgYXBpLmRiLnVwZGF0ZSgnbmZ0cycsIG5mdCk7CgogICAgICAgICAgYXBpLmVtaXQoJ3VwZGF0ZVByb3BlcnR5RGVmaW5pdGlvbicsIHsKICAgICAgICAgICAgc3ltYm9sLCBvcmlnaW5hbE5hbWU6IG5hbWUsIG9yaWdpbmFsVHlwZSwgb3JpZ2luYWxJc1JlYWRPbmx5LCBuZXdOYW1lLCBuZXdUeXBlOiB0eXBlLCBuZXdJc1JlYWRPbmx5OiBpc1JlYWRPbmx5LAogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn07CgphY3Rpb25zLmFkZFByb3BlcnR5ID0gYXN5bmMgKHBheWxvYWQpID0+IHsKICBjb25zdCB7CiAgICBzeW1ib2wsIG5hbWUsIHR5cGUsIGlzUmVhZE9ubHksIGF1dGhvcml6ZWRFZGl0aW5nQWNjb3VudHMsIGF1dGhvcml6ZWRFZGl0aW5nQ29udHJhY3RzLCBpc1NpZ25lZFdpdGhBY3RpdmVLZXksCiAgfSA9IHBheWxvYWQ7CgogIC8vIGdldCBjb250cmFjdCBwYXJhbXMKICBjb25zdCBwYXJhbXMgPSBhd2FpdCBhcGkuZGIuZmluZE9uZSgncGFyYW1zJywge30pOwogIGNvbnN0IHsKICAgIGRhdGFQcm9wZXJ0eUNyZWF0aW9uRmVlLAogIH0gPSBwYXJhbXM7CgogIGlmIChhcGkuYXNzZXJ0KGlzU2lnbmVkV2l0aEFjdGl2ZUtleSA9PT0gdHJ1ZSwgJ3lvdSBtdXN0IHVzZSBhIGN1c3RvbV9qc29uIHNpZ25lZCB3aXRoIHlvdXIgYWN0aXZlIGtleScpCiAgICAmJiBhcGkuYXNzZXJ0KHN5bWJvbCAmJiB0eXBlb2Ygc3ltYm9sID09PSAnc3RyaW5nJwogICAgICAmJiBuYW1lICYmIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJwogICAgICAmJiAoaXNSZWFkT25seSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpc1JlYWRPbmx5ID09PSAnYm9vbGVhbicpCiAgICAgICYmIChhdXRob3JpemVkRWRpdGluZ0FjY291bnRzID09PSB1bmRlZmluZWQgfHwgKGF1dGhvcml6ZWRFZGl0aW5nQWNjb3VudHMgJiYgdHlwZW9mIGF1dGhvcml6ZWRFZGl0aW5nQWNjb3VudHMgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkoYXV0aG9yaXplZEVkaXRpbmdBY2NvdW50cykpKQogICAgICAmJiAoYXV0aG9yaXplZEVkaXRpbmdDb250cmFjdHMgPT09IHVuZGVmaW5lZCB8fCAoYXV0aG9yaXplZEVkaXRpbmdDb250cmFjdHMgJiYgdHlwZW9mIGF1dGhvcml6ZWRFZGl0aW5nQ29udHJhY3RzID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KGF1dGhvcml6ZWRFZGl0aW5nQ29udHJhY3RzKSkpCiAgICAgICYmIHR5cGUgJiYgdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnLCAnaW52YWxpZCBwYXJhbXMnKQogICAgJiYgYXBpLmFzc2VydChhcGkudmFsaWRhdG9yLmlzQWxwaGFudW1lcmljKG5hbWUpICYmIG5hbWUubGVuZ3RoID4gMCAmJiBuYW1lLmxlbmd0aCA8PSAyNSwgJ2ludmFsaWQgbmFtZTogbGV0dGVycyAmIG51bWJlcnMgb25seSwgbWF4IGxlbmd0aCBvZiAyNScpCiAgICAmJiBhcGkuYXNzZXJ0KHR5cGUgPT09ICdudW1iZXInIHx8IHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGUgPT09ICdib29sZWFuJywgJ2ludmFsaWQgdHlwZTogbXVzdCBiZSBudW1iZXIsIHN0cmluZywgb3IgYm9vbGVhbicpKSB7CiAgICAvLyBjaGVjayBpZiB0aGUgTkZUIGV4aXN0cwogICAgY29uc3QgbmZ0ID0gYXdhaXQgYXBpLmRiLmZpbmRPbmUoJ25mdHMnLCB7IHN5bWJvbCB9KTsKCiAgICBpZiAobmZ0KSB7CiAgICAgIGlmIChhcGkuYXNzZXJ0KCEobmFtZSBpbiBuZnQucHJvcGVydGllcyksICdjYW5ub3QgYWRkIHRoZSBzYW1lIHByb3BlcnR5IHR3aWNlJykKICAgICAgICAmJiBhcGkuYXNzZXJ0KG5mdC5pc3N1ZXIgPT09IGFwaS5zZW5kZXIsICdtdXN0IGJlIHRoZSBpc3N1ZXInKSkgewogICAgICAgIGNvbnN0IHByb3BlcnR5Q291bnQgPSBPYmplY3Qua2V5cyhuZnQucHJvcGVydGllcykubGVuZ3RoOwogICAgICAgIGlmIChwcm9wZXJ0eUNvdW50ID49IDMpIHsKICAgICAgICAgIC8vIGZpcnN0IDMgcHJvcGVydGllcyBhcmUgZnJlZSwgYWZ0ZXIgdGhhdCB5b3UgbmVlZCB0byBwYXkgdGhlIGZlZSBmb3IgZWFjaCBhZGRpdGlvbmFsIHByb3BlcnR5CiAgICAgICAgICBjb25zdCB1dGlsaXR5VG9rZW5CYWxhbmNlID0gYXdhaXQgYXBpLmRiLmZpbmRPbmVJblRhYmxlKCd0b2tlbnMnLCAnYmFsYW5jZXMnLCB7CiAgICAgICAgICAgIGFjY291bnQ6IGFwaS5zZW5kZXIsIHN5bWJvbDogVVRJTElUWV9UT0tFTl9TWU1CT0wsCiAgICAgICAgICB9KTsKICAgICAgICAgIGNvbnN0IGF1dGhvcml6ZWRDcmVhdGlvbiA9IGFwaS5CaWdOdW1iZXIoZGF0YVByb3BlcnR5Q3JlYXRpb25GZWUpLmx0ZSgwKQogICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgOiB1dGlsaXR5VG9rZW5CYWxhbmNlICYmIGFwaS5CaWdOdW1iZXIodXRpbGl0eVRva2VuQmFsYW5jZS5iYWxhbmNlKS5ndGUoZGF0YVByb3BlcnR5Q3JlYXRpb25GZWUpOwoKICAgICAgICAgIGlmIChhcGkuYXNzZXJ0KGF1dGhvcml6ZWRDcmVhdGlvbiwgJ3lvdSBtdXN0IGhhdmUgZW5vdWdoIHRva2VucyB0byBjb3ZlciB0aGUgY3JlYXRpb24gZmVlcycpKSB7CiAgICAgICAgICAgIGlmIChhcGkuQmlnTnVtYmVyKGRhdGFQcm9wZXJ0eUNyZWF0aW9uRmVlKS5ndCgwKSkgewogICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFwaS5leGVjdXRlU21hcnRDb250cmFjdCgndG9rZW5zJywgJ3RyYW5zZmVyJywgewogICAgICAgICAgICAgICAgdG86ICdudWxsJywgc3ltYm9sOiBVVElMSVRZX1RPS0VOX1NZTUJPTCwgcXVhbnRpdHk6IGRhdGFQcm9wZXJ0eUNyZWF0aW9uRmVlLCBpc1NpZ25lZFdpdGhBY3RpdmVLZXksCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHRva2VucyB3ZXJlIHNlbnQKICAgICAgICAgICAgICBpZiAoIWlzVG9rZW5UcmFuc2ZlclZlcmlmaWVkKHJlcywgYXBpLnNlbmRlciwgJ251bGwnLCBVVElMSVRZX1RPS0VOX1NZTUJPTCwgZGF0YVByb3BlcnR5Q3JlYXRpb25GZWUsICd0cmFuc2ZlcicpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBjb25zdCBmaW5hbElzUmVhZE9ubHkgPSBpc1JlYWRPbmx5ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGlzUmVhZE9ubHk7CiAgICAgICAgY29uc3QgaW5pdGlhbEFjY291bnRMaXN0ID0gYXV0aG9yaXplZEVkaXRpbmdBY2NvdW50cyA9PT0gdW5kZWZpbmVkID8gW2FwaS5zZW5kZXJdIDogW107CgogICAgICAgIGNvbnN0IG5ld1Byb3BlcnR5ID0gewogICAgICAgICAgdHlwZSwKICAgICAgICAgIGlzUmVhZE9ubHk6IGZpbmFsSXNSZWFkT25seSwKICAgICAgICAgIGF1dGhvcml6ZWRFZGl0aW5nQWNjb3VudHM6IGluaXRpYWxBY2NvdW50TGlzdCwKICAgICAgICAgIGF1dGhvcml6ZWRFZGl0aW5nQ29udHJhY3RzOiBbXSwKICAgICAgICB9OwoKICAgICAgICBuZnQucHJvcGVydGllc1tuYW1lXSA9IG5ld1Byb3BlcnR5OwogICAgICAgIGF3YWl0IGFwaS5kYi51cGRhdGUoJ25mdHMnLCBuZnQpOwoKICAgICAgICAvLyBvcHRpb25hbGx5IGNhbiBhZGQgbGlzdCBvZiBhdXRob3JpemVkIGFjY291bnRzICYgY29udHJhY3RzIG5vdwogICAgICAgIGlmIChhdXRob3JpemVkRWRpdGluZ0FjY291bnRzIHx8IGF1dGhvcml6ZWRFZGl0aW5nQ29udHJhY3RzKSB7CiAgICAgICAgICBhd2FpdCBhY3Rpb25zLnNldFByb3BlcnR5UGVybWlzc2lvbnMoewogICAgICAgICAgICBzeW1ib2wsIG5hbWUsIGFjY291bnRzOiBhdXRob3JpemVkRWRpdGluZ0FjY291bnRzLCBjb250cmFjdHM6IGF1dGhvcml6ZWRFZGl0aW5nQ29udHJhY3RzLCBpc1NpZ25lZFdpdGhBY3RpdmVLZXksCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9CiAgcmV0dXJuIGZhbHNlOwp9OwoKYWN0aW9ucy5zZXRQcm9wZXJ0eVBlcm1pc3Npb25zID0gYXN5bmMgKHBheWxvYWQpID0+IHsKICBjb25zdCB7CiAgICBzeW1ib2wsIG5hbWUsIGFjY291bnRzLCBjb250cmFjdHMsIGlzU2lnbmVkV2l0aEFjdGl2ZUtleSwKICB9ID0gcGF5bG9hZDsKCiAgaWYgKGFwaS5hc3NlcnQoaXNTaWduZWRXaXRoQWN0aXZlS2V5ID09PSB0cnVlLCAneW91IG11c3QgdXNlIGEgY3VzdG9tX2pzb24gc2lnbmVkIHdpdGggeW91ciBhY3RpdmUga2V5JykKICAgICYmIGFwaS5hc3NlcnQoc3ltYm9sICYmIHR5cGVvZiBzeW1ib2wgPT09ICdzdHJpbmcnCiAgICAgICYmIG5hbWUgJiYgdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnCiAgICAgICYmIChhY2NvdW50cyA9PT0gdW5kZWZpbmVkIHx8IChhY2NvdW50cyAmJiB0eXBlb2YgYWNjb3VudHMgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkoYWNjb3VudHMpKSkKICAgICAgJiYgKGNvbnRyYWN0cyA9PT0gdW5kZWZpbmVkIHx8IChjb250cmFjdHMgJiYgdHlwZW9mIGNvbnRyYWN0cyA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShjb250cmFjdHMpKSksICdpbnZhbGlkIHBhcmFtcycpCiAgICAmJiBhcGkuYXNzZXJ0KGFwaS52YWxpZGF0b3IuaXNBbHBoYW51bWVyaWMobmFtZSkgJiYgbmFtZS5sZW5ndGggPiAwICYmIG5hbWUubGVuZ3RoIDw9IDI1LCAnaW52YWxpZCBuYW1lOiBsZXR0ZXJzICYgbnVtYmVycyBvbmx5LCBtYXggbGVuZ3RoIG9mIDI1JykKICAgICYmIGFwaS5hc3NlcnQoYWNjb3VudHMgPT09IHVuZGVmaW5lZCB8fCBhY2NvdW50cy5sZW5ndGggPD0gTUFYX05VTV9BVVRIT1JJWkVEX0lTU1VFUlMsIGBjYW5ub3QgaGF2ZSBtb3JlIHRoYW4gJHtNQVhfTlVNX0FVVEhPUklaRURfSVNTVUVSU30gYXV0aG9yaXplZCBhY2NvdW50c2ApCiAgICAmJiBhcGkuYXNzZXJ0KGNvbnRyYWN0cyA9PT0gdW5kZWZpbmVkIHx8IGNvbnRyYWN0cy5sZW5ndGggPD0gTUFYX05VTV9BVVRIT1JJWkVEX0lTU1VFUlMsIGBjYW5ub3QgaGF2ZSBtb3JlIHRoYW4gJHtNQVhfTlVNX0FVVEhPUklaRURfSVNTVUVSU30gYXV0aG9yaXplZCBjb250cmFjdHNgKQogICAgJiYgYXBpLmFzc2VydChhY2NvdW50cyA9PT0gdW5kZWZpbmVkIHx8IGlzVmFsaWRBY2NvdW50c0FycmF5KGFjY291bnRzKSwgJ2ludmFsaWQgYWNjb3VudCBsaXN0JykKICAgICYmIGFwaS5hc3NlcnQoY29udHJhY3RzID09PSB1bmRlZmluZWQgfHwgaXNWYWxpZENvbnRyYWN0c0FycmF5KGNvbnRyYWN0cyksICdpbnZhbGlkIGNvbnRyYWN0IGxpc3QnKSkgewogICAgLy8gY2hlY2sgaWYgdGhlIE5GVCBleGlzdHMKICAgIGNvbnN0IG5mdCA9IGF3YWl0IGFwaS5kYi5maW5kT25lKCduZnRzJywgeyBzeW1ib2wgfSk7CgogICAgaWYgKG5mdCkgewogICAgICBpZiAoYXBpLmFzc2VydChuYW1lIGluIG5mdC5wcm9wZXJ0aWVzLCAncHJvcGVydHkgbXVzdCBleGlzdCcpCiAgICAgICAgJiYgYXBpLmFzc2VydChuZnQuaXNzdWVyID09PSBhcGkuc2VuZGVyLCAnbXVzdCBiZSB0aGUgaXNzdWVyJykpIHsKICAgICAgICBsZXQgc2FuaXRpemVkQWNjb3VudExpc3QgPSBbXTsKICAgICAgICBsZXQgc2FuaXRpemVkQ29udHJhY3RMaXN0ID0gW107CgogICAgICAgIGlmIChhY2NvdW50cykgewogICAgICAgICAgc2FuaXRpemVkQWNjb3VudExpc3QgPSBhY2NvdW50cy5tYXAoYWNjb3VudCA9PiBhY2NvdW50LnRyaW0oKS50b0xvd2VyQ2FzZSgpKTsKICAgICAgICB9CiAgICAgICAgaWYgKGNvbnRyYWN0cykgewogICAgICAgICAgc2FuaXRpemVkQ29udHJhY3RMaXN0ID0gY29udHJhY3RzLm1hcChjb250cmFjdCA9PiBjb250cmFjdC50cmltKCkpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGFwaS5hc3NlcnQoYWNjb3VudHMgPT09IHVuZGVmaW5lZCB8fCAhY29udGFpbnNEdXBsaWNhdGVzKHNhbml0aXplZEFjY291bnRMaXN0KSwgJ2Nhbm5vdCBhZGQgdGhlIHNhbWUgYWNjb3VudCB0d2ljZScpCiAgICAgICAgICAmJiBhcGkuYXNzZXJ0KGNvbnRyYWN0cyA9PT0gdW5kZWZpbmVkIHx8ICFjb250YWluc0R1cGxpY2F0ZXMoc2FuaXRpemVkQ29udHJhY3RMaXN0KSwgJ2Nhbm5vdCBhZGQgdGhlIHNhbWUgY29udHJhY3QgdHdpY2UnKSkgewogICAgICAgICAgbGV0IHNob3VsZFVwZGF0ZSA9IGZhbHNlOwogICAgICAgICAgaWYgKGFjY291bnRzKSB7CiAgICAgICAgICAgIG5mdC5wcm9wZXJ0aWVzW25hbWVdLmF1dGhvcml6ZWRFZGl0aW5nQWNjb3VudHMgPSBzYW5pdGl6ZWRBY2NvdW50TGlzdDsKICAgICAgICAgICAgc2hvdWxkVXBkYXRlID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChjb250cmFjdHMpIHsKICAgICAgICAgICAgbmZ0LnByb3BlcnRpZXNbbmFtZV0uYXV0aG9yaXplZEVkaXRpbmdDb250cmFjdHMgPSBzYW5pdGl6ZWRDb250cmFjdExpc3Q7CiAgICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKSB7CiAgICAgICAgICAgIGF3YWl0IGFwaS5kYi51cGRhdGUoJ25mdHMnLCBuZnQpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfTsKCmFjdGlvbnMuc2V0R3JvdXBCeSA9IGFzeW5jIChwYXlsb2FkKSA9PiB7CiAgY29uc3QgewogICAgc3ltYm9sLCBwcm9wZXJ0aWVzLCBpc1NpZ25lZFdpdGhBY3RpdmVLZXksCiAgfSA9IHBheWxvYWQ7CgogIGlmIChhcGkuYXNzZXJ0KGlzU2lnbmVkV2l0aEFjdGl2ZUtleSA9PT0gdHJ1ZSwgJ3lvdSBtdXN0IHVzZSBhIGN1c3RvbV9qc29uIHNpZ25lZCB3aXRoIHlvdXIgYWN0aXZlIGtleScpCiAgICAmJiBhcGkuYXNzZXJ0KHN5bWJvbCAmJiB0eXBlb2Ygc3ltYm9sID09PSAnc3RyaW5nJwogICAgICAmJiBwcm9wZXJ0aWVzICYmIHR5cGVvZiBwcm9wZXJ0aWVzID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KHByb3BlcnRpZXMpLCAnaW52YWxpZCBwYXJhbXMnKSkgewogICAgLy8gY2hlY2sgaWYgdGhlIE5GVCBleGlzdHMKICAgIGNvbnN0IG5mdCA9IGF3YWl0IGFwaS5kYi5maW5kT25lKCduZnRzJywgeyBzeW1ib2wgfSk7CgogICAgaWYgKG5mdCkgewogICAgICBjb25zdCBuZnRQcm9wZXJ0eUNvdW50ID0gT2JqZWN0LmtleXMobmZ0LnByb3BlcnRpZXMpLmxlbmd0aDsKICAgICAgaWYgKGFwaS5hc3NlcnQobmZ0Lmlzc3VlciA9PT0gYXBpLnNlbmRlciwgJ211c3QgYmUgdGhlIGlzc3VlcicpCiAgICAgICAgJiYgYXBpLmFzc2VydChuZnQuZ3JvdXBCeSA9PT0gdW5kZWZpbmVkIHx8IG5mdC5ncm91cEJ5Lmxlbmd0aCA9PT0gMCwgJ2xpc3QgaXMgYWxyZWFkeSBzZXQnKQogICAgICAgICYmIGFwaS5hc3NlcnQocHJvcGVydGllcy5sZW5ndGggPD0gbmZ0UHJvcGVydHlDb3VudCwgJ2Nhbm5vdCBzZXQgbW9yZSBkYXRhIHByb3BlcnRpZXMgdGhhbiBORlQgaGFzJykKICAgICAgICAmJiBhcGkuYXNzZXJ0KCFjb250YWluc0R1cGxpY2F0ZXMocHJvcGVydGllcyksICdsaXN0IGNhbm5vdCBjb250YWluIGR1cGxpY2F0ZXMnKSkgewogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcGVydGllcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgY29uc3QgbmFtZSA9IHByb3BlcnRpZXNbaV07CiAgICAgICAgICBpZiAoIWFwaS5hc3NlcnQobmFtZSAmJiB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycKICAgICAgICAgICAgJiYgbmFtZSBpbiBuZnQucHJvcGVydGllcywgJ2RhdGEgcHJvcGVydHkgbXVzdCBleGlzdCcpKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIG5mdC5ncm91cEJ5ID0gcHJvcGVydGllczsKICAgICAgICBhd2FpdCBhcGkuZGIudXBkYXRlKCduZnRzJywgbmZ0KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn07CgphY3Rpb25zLnNldFByb3BlcnRpZXMgPSBhc3luYyAocGF5bG9hZCkgPT4gewogIGNvbnN0IHsKICAgIHN5bWJvbCwgZnJvbVR5cGUsIG5mdHMsIGNhbGxpbmdDb250cmFjdEluZm8sCiAgfSA9IHBheWxvYWQ7CiAgY29uc3QgdHlwZXMgPSBbJ3VzZXInLCAnY29udHJhY3QnXTsKCiAgY29uc3QgZmluYWxGcm9tVHlwZSA9IGZyb21UeXBlID09PSB1bmRlZmluZWQgPyAndXNlcicgOiBmcm9tVHlwZTsKCiAgaWYgKGFwaS5hc3NlcnQobmZ0cyAmJiB0eXBlb2YgbmZ0cyA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShuZnRzKQogICAgJiYgZmluYWxGcm9tVHlwZSAmJiB0eXBlb2YgZmluYWxGcm9tVHlwZSA9PT0gJ3N0cmluZycgJiYgdHlwZXMuaW5jbHVkZXMoZmluYWxGcm9tVHlwZSkKICAgICYmIHN5bWJvbCAmJiB0eXBlb2Ygc3ltYm9sID09PSAnc3RyaW5nJwogICAgJiYgKGNhbGxpbmdDb250cmFjdEluZm8gfHwgKGNhbGxpbmdDb250cmFjdEluZm8gPT09IHVuZGVmaW5lZCAmJiBmaW5hbEZyb21UeXBlID09PSAndXNlcicpKSwgJ2ludmFsaWQgcGFyYW1zJykKICAgICYmIGFwaS5hc3NlcnQobmZ0cy5sZW5ndGggPD0gTUFYX05VTV9ORlRTX0VESVRBQkxFLCBgY2Fubm90IHNldCBwcm9wZXJ0aWVzIG9uIG1vcmUgdGhhbiAke01BWF9OVU1fTkZUU19FRElUQUJMRX0gTkZUIGluc3RhbmNlcyBhdCBvbmNlYCkpIHsKICAgIGNvbnN0IGZpbmFsRnJvbSA9IGZpbmFsRnJvbVR5cGUgPT09ICd1c2VyJyA/IGFwaS5zZW5kZXIgOiBjYWxsaW5nQ29udHJhY3RJbmZvLm5hbWU7CiAgICAvLyBjaGVjayBpZiB0aGUgTkZUIGV4aXN0cwogICAgY29uc3QgbmZ0ID0gYXdhaXQgYXBpLmRiLmZpbmRPbmUoJ25mdHMnLCB7IHN5bWJvbCB9KTsKCiAgICBpZiAoYXBpLmFzc2VydChuZnQgIT09IG51bGwsICdzeW1ib2wgZG9lcyBub3QgZXhpc3QnKSkgewogICAgICBpZiAoIWlzVmFsaWREYXRhUHJvcGVydGllc0FycmF5KGZpbmFsRnJvbSwgZmluYWxGcm9tVHlwZSwgbmZ0LCBuZnRzKSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXRlbXBsYXRlCiAgICAgIGNvbnN0IGluc3RhbmNlVGFibGVOYW1lID0gc3ltYm9sICsgJ2luc3RhbmNlcyc7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmZ0cy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgIGNvbnN0IHsgaWQsIHByb3BlcnRpZXMgfSA9IG5mdHNbaV07CiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlCiAgICAgICAgICBjb250aW51ZTsgLy8gZG9uJ3QgYm90aGVyIHByb2Nlc3NpbmcgZW1wdHkgcHJvcGVydGllcwogICAgICAgIH0KCiAgICAgICAgY29uc3QgbmZ0SW5zdGFuY2UgPSBhd2FpdCBhcGkuZGIuZmluZE9uZShpbnN0YW5jZVRhYmxlTmFtZSwgeyBfaWQ6IGFwaS5CaWdOdW1iZXIoaWQpLnRvTnVtYmVyKCkgfSk7CiAgICAgICAgaWYgKGFwaS5hc3NlcnQobmZ0SW5zdGFuY2UgIT09IG51bGwsICduZnQgaW5zdGFuY2UgZG9lcyBub3QgZXhpc3QnKSkgewogICAgICAgICAgbGV0IHNob3VsZFVwZGF0ZSA9IGZhbHNlOwogICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4CiAgICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCBkYXRhXSBvZiBPYmplY3QuZW50cmllcyhwcm9wZXJ0aWVzKSkgewogICAgICAgICAgICBjb25zdCBwcm9wZXJ0eVNjaGVtYSA9IG5mdC5wcm9wZXJ0aWVzW25hbWVdOwogICAgICAgICAgICBpZiAocHJvcGVydHlTY2hlbWEuaXNSZWFkT25seSkgewogICAgICAgICAgICAgIC8vIHJlYWQtb25seSBwcm9wZXJ0aWVzIGNhbiBvbmx5IGJlIHNldCBvbmNlCiAgICAgICAgICAgICAgaWYgKGFwaS5hc3NlcnQoIShuYW1lIGluIG5mdEluc3RhbmNlLnByb3BlcnRpZXMpLCAnY2Fubm90IGVkaXQgcmVhZC1vbmx5IHByb3BlcnRpZXMnKSkgewogICAgICAgICAgICAgICAgbmZ0SW5zdGFuY2UucHJvcGVydGllc1tuYW1lXSA9IGRhdGE7CiAgICAgICAgICAgICAgICBzaG91bGRVcGRhdGUgPSB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBuZnRJbnN0YW5jZS5wcm9wZXJ0aWVzW25hbWVdID0gZGF0YTsKICAgICAgICAgICAgICBzaG91bGRVcGRhdGUgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKSB7CiAgICAgICAgICAgIGF3YWl0IGFwaS5kYi51cGRhdGUoaW5zdGFuY2VUYWJsZU5hbWUsIG5mdEluc3RhbmNlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn07CgphY3Rpb25zLmJ1cm4gPSBhc3luYyAocGF5bG9hZCkgPT4gewogIGNvbnN0IHsKICAgIGZyb21UeXBlLCBuZnRzLCBpc1NpZ25lZFdpdGhBY3RpdmVLZXksIGNhbGxpbmdDb250cmFjdEluZm8sCiAgfSA9IHBheWxvYWQ7CiAgY29uc3QgdHlwZXMgPSBbJ3VzZXInLCAnY29udHJhY3QnXTsKCiAgY29uc3QgZmluYWxGcm9tVHlwZSA9IGZyb21UeXBlID09PSB1bmRlZmluZWQgPyAndXNlcicgOiBmcm9tVHlwZTsKCiAgaWYgKGFwaS5hc3NlcnQoaXNTaWduZWRXaXRoQWN0aXZlS2V5ID09PSB0cnVlLCAneW91IG11c3QgdXNlIGEgY3VzdG9tX2pzb24gc2lnbmVkIHdpdGggeW91ciBhY3RpdmUga2V5JykKICAgICYmIGFwaS5hc3NlcnQoZmluYWxGcm9tVHlwZSAmJiB0eXBlb2YgZmluYWxGcm9tVHlwZSA9PT0gJ3N0cmluZycgJiYgdHlwZXMuaW5jbHVkZXMoZmluYWxGcm9tVHlwZSkKICAgICAgJiYgKGNhbGxpbmdDb250cmFjdEluZm8gfHwgKGNhbGxpbmdDb250cmFjdEluZm8gPT09IHVuZGVmaW5lZCAmJiBmaW5hbEZyb21UeXBlID09PSAndXNlcicpKQogICAgICAmJiBuZnRzICYmIHR5cGVvZiBuZnRzID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KG5mdHMpLCAnaW52YWxpZCBwYXJhbXMnKQogICAgJiYgaXNWYWxpZE5mdElkQXJyYXkobmZ0cykpIHsKICAgIGNvbnN0IGZpbmFsRnJvbSA9IGZpbmFsRnJvbVR5cGUgPT09ICd1c2VyJyA/IGFwaS5zZW5kZXIgOiBjYWxsaW5nQ29udHJhY3RJbmZvLm5hbWU7CgogICAgbGV0IGNvbnRhaW5lckNvdW50ID0gMDsKICAgIGxldCB0b2tlbkNvdW50ID0gMDsKICAgIGxldCBpc0ZpcnN0SW5zdGFuY2VDb250YWluZXIgPSBmYWxzZTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmZ0cy5sZW5ndGg7IGkgKz0gMSkgewogICAgICBjb25zdCB7IHN5bWJvbCwgaWRzIH0gPSBuZnRzW2ldOwogICAgICAvLyBjaGVjayBpZiB0aGUgTkZUIGV4aXN0cwogICAgICBjb25zdCBuZnQgPSBhd2FpdCBhcGkuZGIuZmluZE9uZSgnbmZ0cycsIHsgc3ltYm9sIH0pOwogICAgICBpZiAobmZ0KSB7CiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci10ZW1wbGF0ZQogICAgICAgIGNvbnN0IGluc3RhbmNlVGFibGVOYW1lID0gc3ltYm9sICsgJ2luc3RhbmNlcyc7CiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpZHMubGVuZ3RoOyBqICs9IDEpIHsKICAgICAgICAgIGNvbnN0IGlkID0gaWRzW2pdOwogICAgICAgICAgY29uc3QgbmZ0SW5zdGFuY2UgPSBhd2FpdCBhcGkuZGIuZmluZE9uZShpbnN0YW5jZVRhYmxlTmFtZSwgeyBfaWQ6IGFwaS5CaWdOdW1iZXIoaWQpLnRvTnVtYmVyKCkgfSk7CiAgICAgICAgICBpZiAobmZ0SW5zdGFuY2UpIHsKICAgICAgICAgICAgLy8gY2FuJ3QgbWl4IGNvbnRhaW5lciBhbmQgbm9uLWNvbnRhaW5lciBORlQgaW5zdGFuY2VzLCBhbHNvCiAgICAgICAgICAgIC8vIGxpbWl0IGhvdyBtYW55IGNvbnRhaW5lciBORlQgaW5zdGFuY2VzIGNhbiBiZSBidXJuZWQgYXQgb25jZQogICAgICAgICAgICBsZXQgaXNCdXJuQXV0aG9yaXplZCA9IHRydWU7CiAgICAgICAgICAgIGlmIChuZnRJbnN0YW5jZS5sb2NrZWROZnRzICYmIG5mdEluc3RhbmNlLmxvY2tlZE5mdHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgIGlmICh0b2tlbkNvdW50ID09PSAwKSB7CiAgICAgICAgICAgICAgICBpc0ZpcnN0SW5zdGFuY2VDb250YWluZXIgPSB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjb250YWluZXJDb3VudCArPSAxOwogICAgICAgICAgICAgIGlmIChjb250YWluZXJDb3VudCA+IE1BWF9OVU1fQ09OVEFJTkVSX05GVFNfT1BFUkFCTEUgfHwgIWlzRmlyc3RJbnN0YW5jZUNvbnRhaW5lcikgewogICAgICAgICAgICAgICAgaXNCdXJuQXV0aG9yaXplZCA9IGZhbHNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChpc0ZpcnN0SW5zdGFuY2VDb250YWluZXIpIHsKICAgICAgICAgICAgICBpc0J1cm5BdXRob3JpemVkID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdG9rZW5Db3VudCArPSAxOwoKICAgICAgICAgICAgLy8gdmVyaWZ5IGFjdGlvbiBpcyBiZWluZyBwZXJmb3JtZWQgYnkgdGhlIGFjY291bnQgdGhhdCBvd25zIHRoaXMgaW5zdGFuY2UKICAgICAgICAgICAgLy8gYW5kIHRoZXJlIGlzIG5vIGV4aXN0aW5nIGRlbGVnYXRpb24gYW5kIGNvbnRhaW5lciByZXN0cmljdGlvbnMgYXJlIHNhdGlzZmllZAogICAgICAgICAgICBpZiAobmZ0SW5zdGFuY2UuYWNjb3VudCA9PT0gZmluYWxGcm9tCiAgICAgICAgICAgICAgJiYgKChuZnRJbnN0YW5jZS5vd25lZEJ5ID09PSAndScgJiYgZmluYWxGcm9tVHlwZSA9PT0gJ3VzZXInKQogICAgICAgICAgICAgICAgfHwgKG5mdEluc3RhbmNlLm93bmVkQnkgPT09ICdjJyAmJiBmaW5hbEZyb21UeXBlID09PSAnY29udHJhY3QnKSkKICAgICAgICAgICAgICAmJiBuZnRJbnN0YW5jZS5kZWxlZ2F0ZWRUbyA9PT0gdW5kZWZpbmVkCiAgICAgICAgICAgICAgJiYgaXNCdXJuQXV0aG9yaXplZCkgewogICAgICAgICAgICAgIC8vIHJlbGVhc2UgYW55IGxvY2tlZCB0b2tlbnMgYmFjayB0byB0aGUgb3duaW5nIGFjY291bnQKICAgICAgICAgICAgICBjb25zdCBmaW5hbExvY2tUb2tlbnMgPSB7fTsKICAgICAgICAgICAgICBsZXQgaXNUcmFuc2ZlclN1Y2Nlc3MgPSB0cnVlOwogICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheAogICAgICAgICAgICAgIGZvciAoY29uc3QgW2xvY2tzeW1ib2wsIHF1YW50aXR5XSBvZiBPYmplY3QuZW50cmllcyhuZnRJbnN0YW5jZS5sb2NrZWRUb2tlbnMpKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBhcGkudHJhbnNmZXJUb2tlbnMoZmluYWxGcm9tLCBsb2Nrc3ltYm9sLCBxdWFudGl0eSwgZmluYWxGcm9tVHlwZSk7CiAgICAgICAgICAgICAgICBpZiAoIWlzVG9rZW5UcmFuc2ZlclZlcmlmaWVkKHJlcywgJ25mdCcsIGZpbmFsRnJvbSwgbG9ja3N5bWJvbCwgcXVhbnRpdHksICd0cmFuc2ZlckZyb21Db250cmFjdCcpKSB7CiAgICAgICAgICAgICAgICAgIGZpbmFsTG9ja1Rva2Vuc1tsb2Nrc3ltYm9sXSA9IHF1YW50aXR5OwogICAgICAgICAgICAgICAgICBpc1RyYW5zZmVyU3VjY2VzcyA9IGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBhcGkuYXNzZXJ0KGlzVHJhbnNmZXJTdWNjZXNzLCBgdW5hYmxlIHRvIHJlbGVhc2UgbG9ja2VkIHRva2VucyBpbjogJHtzeW1ib2x9LCBpZCAke2lkfWApOwogICAgICAgICAgICAgIC8vIHJlbGVhc2UgYW55IGxvY2tlZCBORlQgaW5zdGFuY2VzIGJhY2sgdG8gdGhlIG93bmluZyBhY2NvdW50CiAgICAgICAgICAgICAgY29uc3Qgb3JpZ0xvY2tOZnRzID0gKG5mdEluc3RhbmNlLmxvY2tlZE5mdHMgJiYgbmZ0SW5zdGFuY2UubG9ja2VkTmZ0cy5sZW5ndGggPiAwKSA/IG5mdEluc3RhbmNlLmxvY2tlZE5mdHMgOiBbXTsKICAgICAgICAgICAgICBpZiAoaXNUcmFuc2ZlclN1Y2Nlc3MgJiYgbmZ0SW5zdGFuY2UubG9ja2VkTmZ0cyAmJiBuZnRJbnN0YW5jZS5sb2NrZWROZnRzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRyYW5zZmVyQW5kVmVyaWZ5TmZ0cyhDT05UUkFDVF9OQU1FLCAnY29udHJhY3QnLCBmaW5hbEZyb20sIGZpbmFsRnJvbVR5cGUsIG5mdEluc3RhbmNlLmxvY2tlZE5mdHMsIGlzU2lnbmVkV2l0aEFjdGl2ZUtleSwgeyBuYW1lOiBDT05UUkFDVF9OQU1FIH0pOwogICAgICAgICAgICAgICAgbmZ0SW5zdGFuY2UubG9ja2VkTmZ0cyA9IHJlcy5mYWlsOwogICAgICAgICAgICAgICAgaWYgKG5mdEluc3RhbmNlLmxvY2tlZE5mdHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICBpc1RyYW5zZmVyU3VjY2VzcyA9IGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYXBpLmFzc2VydChpc1RyYW5zZmVyU3VjY2VzcywgYHVuYWJsZSB0byByZWxlYXNlIGxvY2tlZCBORlQgaW5zdGFuY2VzIGluOiAke3N5bWJvbH0sIGlkICR7aWR9YCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNvbnN0IG9yaWdPd25lZEJ5ID0gbmZ0SW5zdGFuY2Uub3duZWRCeTsKICAgICAgICAgICAgICBjb25zdCBvcmlnTG9ja1Rva2VucyA9IG5mdEluc3RhbmNlLmxvY2tlZFRva2VuczsKICAgICAgICAgICAgICBuZnRJbnN0YW5jZS5sb2NrZWRUb2tlbnMgPSBmaW5hbExvY2tUb2tlbnM7CiAgICAgICAgICAgICAgaWYgKGlzVHJhbnNmZXJTdWNjZXNzKSB7CiAgICAgICAgICAgICAgICBuZnRJbnN0YW5jZS5wcmV2aW91c0FjY291bnQgPSBuZnRJbnN0YW5jZS5hY2NvdW50OwogICAgICAgICAgICAgICAgbmZ0SW5zdGFuY2UucHJldmlvdXNPd25lZEJ5ID0gbmZ0SW5zdGFuY2Uub3duZWRCeTsKICAgICAgICAgICAgICAgIG5mdEluc3RhbmNlLmFjY291bnQgPSAnbnVsbCc7CiAgICAgICAgICAgICAgICBuZnRJbnN0YW5jZS5vd25lZEJ5ID0gJ3UnOwogICAgICAgICAgICAgICAgbmZ0LmNpcmN1bGF0aW5nU3VwcGx5IC09IDE7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBhd2FpdCBhcGkuZGIudXBkYXRlKGluc3RhbmNlVGFibGVOYW1lLCBuZnRJbnN0YW5jZSk7CiAgICAgICAgICAgICAgaWYgKGlzVHJhbnNmZXJTdWNjZXNzKSB7CiAgICAgICAgICAgICAgICBhcGkuZW1pdCgnYnVybicsIHsKICAgICAgICAgICAgICAgICAgYWNjb3VudDogZmluYWxGcm9tLCBvd25lZEJ5OiBvcmlnT3duZWRCeSwgdW5sb2NrZWRUb2tlbnM6IG9yaWdMb2NrVG9rZW5zLCB1bmxvY2tlZE5mdHM6IG9yaWdMb2NrTmZ0cywgc3ltYm9sLCBpZCwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gbWFrZSBzdXJlIGNpcmN1bGF0aW5nIHN1cHBseSBpcyB1cGRhdGVkCiAgICAgICAgYXdhaXQgYXBpLmRiLnVwZGF0ZSgnbmZ0cycsIG5mdCk7CiAgICAgIH0KICAgIH0KICB9Cn07CgphY3Rpb25zLnRyYW5zZmVyID0gYXN5bmMgKHBheWxvYWQpID0+IHsKICBjb25zdCB7CiAgICBmcm9tVHlwZSwgdG8sIHRvVHlwZSwgbmZ0cywgaXNTaWduZWRXaXRoQWN0aXZlS2V5LCBjYWxsaW5nQ29udHJhY3RJbmZvLAogIH0gPSBwYXlsb2FkOwogIGNvbnN0IHR5cGVzID0gWyd1c2VyJywgJ2NvbnRyYWN0J107CgogIGNvbnN0IGZpbmFsVG9UeXBlID0gdG9UeXBlID09PSB1bmRlZmluZWQgPyAndXNlcicgOiB0b1R5cGU7CiAgY29uc3QgZmluYWxGcm9tVHlwZSA9IGZyb21UeXBlID09PSB1bmRlZmluZWQgPyAndXNlcicgOiBmcm9tVHlwZTsKCiAgaWYgKGFwaS5hc3NlcnQoaXNTaWduZWRXaXRoQWN0aXZlS2V5ID09PSB0cnVlLCAneW91IG11c3QgdXNlIGEgY3VzdG9tX2pzb24gc2lnbmVkIHdpdGggeW91ciBhY3RpdmUga2V5JykKICAgICYmIGFwaS5hc3NlcnQoZmluYWxGcm9tVHlwZSAmJiB0eXBlb2YgZmluYWxGcm9tVHlwZSA9PT0gJ3N0cmluZycgJiYgdHlwZXMuaW5jbHVkZXMoZmluYWxGcm9tVHlwZSkKICAgICAgJiYgdG8gJiYgdHlwZW9mIHRvID09PSAnc3RyaW5nJwogICAgICAmJiBmaW5hbFRvVHlwZSAmJiB0eXBlb2YgZmluYWxUb1R5cGUgPT09ICdzdHJpbmcnICYmIHR5cGVzLmluY2x1ZGVzKGZpbmFsVG9UeXBlKQogICAgICAmJiAoY2FsbGluZ0NvbnRyYWN0SW5mbyB8fCAoY2FsbGluZ0NvbnRyYWN0SW5mbyA9PT0gdW5kZWZpbmVkICYmIGZpbmFsRnJvbVR5cGUgPT09ICd1c2VyJykpCiAgICAgICYmIG5mdHMgJiYgdHlwZW9mIG5mdHMgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkobmZ0cyksICdpbnZhbGlkIHBhcmFtcycpCiAgICAmJiBpc1ZhbGlkTmZ0SWRBcnJheShuZnRzKSkgewogICAgY29uc3QgZmluYWxUbyA9IGZpbmFsVG9UeXBlID09PSAndXNlcicgPyB0by50cmltKCkudG9Mb3dlckNhc2UoKSA6IHRvLnRyaW0oKTsKICAgIGNvbnN0IHRvVmFsaWQgPSBmaW5hbFRvVHlwZSA9PT0gJ3VzZXInID8gaXNWYWxpZEhpdmVBY2NvdW50TGVuZ3RoKGZpbmFsVG8pIDogaXNWYWxpZENvbnRyYWN0TGVuZ3RoKGZpbmFsVG8pOwogICAgY29uc3QgZmluYWxGcm9tID0gZmluYWxGcm9tVHlwZSA9PT0gJ3VzZXInID8gYXBpLnNlbmRlciA6IGNhbGxpbmdDb250cmFjdEluZm8ubmFtZTsKCiAgICBpZiAoYXBpLmFzc2VydCh0b1ZhbGlkLCAnaW52YWxpZCB0bycpCiAgICAgICYmIGFwaS5hc3NlcnQoIShmaW5hbFRvVHlwZSA9PT0gZmluYWxGcm9tVHlwZSAmJiBmaW5hbFRvID09PSBmaW5hbEZyb20pLCAnY2Fubm90IHRyYW5zZmVyIHRvIHNlbGYnKQogICAgICAmJiBhcGkuYXNzZXJ0KCEoZmluYWxUb1R5cGUgPT09ICd1c2VyJyAmJiBmaW5hbFRvID09PSAnbnVsbCcpLCAnY2Fubm90IHRyYW5zZmVyIHRvIG51bGw7IHVzZSBidXJuIGFjdGlvbiBpbnN0ZWFkJykpIHsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZnRzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgY29uc3QgeyBzeW1ib2wsIGlkcyB9ID0gbmZ0c1tpXTsKICAgICAgICAvLyBjaGVjayBpZiB0aGUgTkZUIGV4aXN0cwogICAgICAgIGNvbnN0IG5mdCA9IGF3YWl0IGFwaS5kYi5maW5kT25lKCduZnRzJywgeyBzeW1ib2wgfSk7CiAgICAgICAgaWYgKG5mdCkgewogICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci10ZW1wbGF0ZQogICAgICAgICAgY29uc3QgaW5zdGFuY2VUYWJsZU5hbWUgPSBzeW1ib2wgKyAnaW5zdGFuY2VzJzsKICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaWRzLmxlbmd0aDsgaiArPSAxKSB7CiAgICAgICAgICAgIGNvbnN0IGlkID0gaWRzW2pdOwogICAgICAgICAgICBjb25zdCBuZnRJbnN0YW5jZSA9IGF3YWl0IGFwaS5kYi5maW5kT25lKGluc3RhbmNlVGFibGVOYW1lLCB7IF9pZDogYXBpLkJpZ051bWJlcihpZCkudG9OdW1iZXIoKSB9KTsKICAgICAgICAgICAgaWYgKG5mdEluc3RhbmNlKSB7CiAgICAgICAgICAgICAgLy8gdmVyaWZ5IGFjdGlvbiBpcyBiZWluZyBwZXJmb3JtZWQgYnkgdGhlIGFjY291bnQgdGhhdCBvd25zIHRoaXMgaW5zdGFuY2UKICAgICAgICAgICAgICAvLyBhbmQgdGhlcmUgaXMgbm8gZXhpc3RpbmcgZGVsZWdhdGlvbgogICAgICAgICAgICAgIGlmIChuZnRJbnN0YW5jZS5hY2NvdW50ID09PSBmaW5hbEZyb20KICAgICAgICAgICAgICAgICYmICgobmZ0SW5zdGFuY2Uub3duZWRCeSA9PT0gJ3UnICYmIGZpbmFsRnJvbVR5cGUgPT09ICd1c2VyJykKICAgICAgICAgICAgICAgICAgfHwgKG5mdEluc3RhbmNlLm93bmVkQnkgPT09ICdjJyAmJiBmaW5hbEZyb21UeXBlID09PSAnY29udHJhY3QnKSkKICAgICAgICAgICAgICAgICYmIG5mdEluc3RhbmNlLmRlbGVnYXRlZFRvID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdPd25lZEJ5ID0gbmZ0SW5zdGFuY2Uub3duZWRCeTsKICAgICAgICAgICAgICAgIGNvbnN0IG5ld093bmVkQnkgPSBmaW5hbFRvVHlwZSA9PT0gJ3VzZXInID8gJ3UnIDogJ2MnOwoKICAgICAgICAgICAgICAgIG5mdEluc3RhbmNlLnByZXZpb3VzQWNjb3VudCA9IG5mdEluc3RhbmNlLmFjY291bnQ7CiAgICAgICAgICAgICAgICBuZnRJbnN0YW5jZS5wcmV2aW91c093bmVkQnkgPSBuZnRJbnN0YW5jZS5vd25lZEJ5OwogICAgICAgICAgICAgICAgbmZ0SW5zdGFuY2UuYWNjb3VudCA9IGZpbmFsVG87CiAgICAgICAgICAgICAgICBuZnRJbnN0YW5jZS5vd25lZEJ5ID0gbmV3T3duZWRCeTsKCiAgICAgICAgICAgICAgICBhd2FpdCBhcGkuZGIudXBkYXRlKGluc3RhbmNlVGFibGVOYW1lLCBuZnRJbnN0YW5jZSk7CgogICAgICAgICAgICAgICAgYXBpLmVtaXQoJ3RyYW5zZmVyJywgewogICAgICAgICAgICAgICAgICBmcm9tOiBmaW5hbEZyb20sIGZyb21UeXBlOiBvcmlnT3duZWRCeSwgdG86IGZpbmFsVG8sIHRvVHlwZTogbmV3T3duZWRCeSwgc3ltYm9sLCBpZCwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfTsKCmFjdGlvbnMuZGVsZWdhdGUgPSBhc3luYyAocGF5bG9hZCkgPT4gewogIGNvbnN0IHsKICAgIGZyb21UeXBlLCB0bywgdG9UeXBlLCBuZnRzLCBpc1NpZ25lZFdpdGhBY3RpdmVLZXksIGNhbGxpbmdDb250cmFjdEluZm8sCiAgfSA9IHBheWxvYWQ7CiAgY29uc3QgdHlwZXMgPSBbJ3VzZXInLCAnY29udHJhY3QnXTsKCiAgY29uc3QgZmluYWxUb1R5cGUgPSB0b1R5cGUgPT09IHVuZGVmaW5lZCA/ICd1c2VyJyA6IHRvVHlwZTsKICBjb25zdCBmaW5hbEZyb21UeXBlID0gZnJvbVR5cGUgPT09IHVuZGVmaW5lZCA/ICd1c2VyJyA6IGZyb21UeXBlOwoKICBpZiAoYXBpLmFzc2VydChpc1NpZ25lZFdpdGhBY3RpdmVLZXkgPT09IHRydWUsICd5b3UgbXVzdCB1c2UgYSBjdXN0b21fanNvbiBzaWduZWQgd2l0aCB5b3VyIGFjdGl2ZSBrZXknKQogICAgJiYgYXBpLmFzc2VydChmaW5hbEZyb21UeXBlICYmIHR5cGVvZiBmaW5hbEZyb21UeXBlID09PSAnc3RyaW5nJyAmJiB0eXBlcy5pbmNsdWRlcyhmaW5hbEZyb21UeXBlKQogICAgICAmJiB0byAmJiB0eXBlb2YgdG8gPT09ICdzdHJpbmcnCiAgICAgICYmIGZpbmFsVG9UeXBlICYmIHR5cGVvZiBmaW5hbFRvVHlwZSA9PT0gJ3N0cmluZycgJiYgdHlwZXMuaW5jbHVkZXMoZmluYWxUb1R5cGUpCiAgICAgICYmIChjYWxsaW5nQ29udHJhY3RJbmZvIHx8IChjYWxsaW5nQ29udHJhY3RJbmZvID09PSB1bmRlZmluZWQgJiYgZmluYWxGcm9tVHlwZSA9PT0gJ3VzZXInKSkKICAgICAgJiYgbmZ0cyAmJiB0eXBlb2YgbmZ0cyA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShuZnRzKSwgJ2ludmFsaWQgcGFyYW1zJykKICAgICYmIGlzVmFsaWROZnRJZEFycmF5KG5mdHMpKSB7CiAgICBjb25zdCBmaW5hbFRvID0gZmluYWxUb1R5cGUgPT09ICd1c2VyJyA/IHRvLnRyaW0oKS50b0xvd2VyQ2FzZSgpIDogdG8udHJpbSgpOwogICAgY29uc3QgdG9WYWxpZCA9IGZpbmFsVG9UeXBlID09PSAndXNlcicgPyBpc1ZhbGlkSGl2ZUFjY291bnRMZW5ndGgoZmluYWxUbykgOiBpc1ZhbGlkQ29udHJhY3RMZW5ndGgoZmluYWxUbyk7CiAgICBjb25zdCBmaW5hbEZyb20gPSBmaW5hbEZyb21UeXBlID09PSAndXNlcicgPyBhcGkuc2VuZGVyIDogY2FsbGluZ0NvbnRyYWN0SW5mby5uYW1lOwoKICAgIGlmIChhcGkuYXNzZXJ0KHRvVmFsaWQsICdpbnZhbGlkIHRvJykKICAgICAgJiYgYXBpLmFzc2VydCghKGZpbmFsVG9UeXBlID09PSBmaW5hbEZyb21UeXBlICYmIGZpbmFsVG8gPT09IGZpbmFsRnJvbSksICdjYW5ub3QgZGVsZWdhdGUgdG8gc2VsZicpCiAgICAgICYmIGFwaS5hc3NlcnQoIShmaW5hbFRvVHlwZSA9PT0gJ3VzZXInICYmIGZpbmFsVG8gPT09ICdudWxsJyksICdjYW5ub3QgZGVsZWdhdGUgdG8gbnVsbCcpKSB7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmZ0cy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgIGNvbnN0IHsgc3ltYm9sLCBpZHMgfSA9IG5mdHNbaV07CiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIE5GVCBleGlzdHMKICAgICAgICBjb25zdCBuZnQgPSBhd2FpdCBhcGkuZGIuZmluZE9uZSgnbmZ0cycsIHsgc3ltYm9sIH0pOwogICAgICAgIGlmIChuZnQpIHsKICAgICAgICAgIGlmIChhcGkuYXNzZXJ0KG5mdC5kZWxlZ2F0aW9uRW5hYmxlZCA9PT0gdHJ1ZSwgYGRlbGVnYXRpb24gbm90IGVuYWJsZWQgZm9yICR7c3ltYm9sfWApKSB7CiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItdGVtcGxhdGUKICAgICAgICAgICAgY29uc3QgaW5zdGFuY2VUYWJsZU5hbWUgPSBzeW1ib2wgKyAnaW5zdGFuY2VzJzsKICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpZHMubGVuZ3RoOyBqICs9IDEpIHsKICAgICAgICAgICAgICBjb25zdCBpZCA9IGlkc1tqXTsKICAgICAgICAgICAgICBjb25zdCBuZnRJbnN0YW5jZSA9IGF3YWl0IGFwaS5kYi5maW5kT25lKGluc3RhbmNlVGFibGVOYW1lLCB7IF9pZDogYXBpLkJpZ051bWJlcihpZCkudG9OdW1iZXIoKSB9KTsKICAgICAgICAgICAgICBpZiAobmZ0SW5zdGFuY2UpIHsKICAgICAgICAgICAgICAgIC8vIHZlcmlmeSBhY3Rpb24gaXMgYmVpbmcgcGVyZm9ybWVkIGJ5IHRoZSBhY2NvdW50IHRoYXQgb3ducyB0aGlzIGluc3RhbmNlCiAgICAgICAgICAgICAgICAvLyBhbmQgdGhlcmUgaXMgbm8gZXhpc3RpbmcgZGVsZWdhdGlvbgogICAgICAgICAgICAgICAgaWYgKG5mdEluc3RhbmNlLmFjY291bnQgPT09IGZpbmFsRnJvbQogICAgICAgICAgICAgICAgICAmJiAoKG5mdEluc3RhbmNlLm93bmVkQnkgPT09ICd1JyAmJiBmaW5hbEZyb21UeXBlID09PSAndXNlcicpCiAgICAgICAgICAgICAgICAgICAgfHwgKG5mdEluc3RhbmNlLm93bmVkQnkgPT09ICdjJyAmJiBmaW5hbEZyb21UeXBlID09PSAnY29udHJhY3QnKSkKICAgICAgICAgICAgICAgICAgJiYgbmZ0SW5zdGFuY2UuZGVsZWdhdGVkVG8gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICBjb25zdCBuZXdPd25lZEJ5ID0gZmluYWxUb1R5cGUgPT09ICd1c2VyJyA/ICd1JyA6ICdjJzsKCiAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0RlbGVnYXRpb24gPSB7CiAgICAgICAgICAgICAgICAgICAgYWNjb3VudDogZmluYWxUbywKICAgICAgICAgICAgICAgICAgICBvd25lZEJ5OiBuZXdPd25lZEJ5LAogICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgbmZ0SW5zdGFuY2UuZGVsZWdhdGVkVG8gPSBuZXdEZWxlZ2F0aW9uOwoKICAgICAgICAgICAgICAgICAgYXdhaXQgYXBpLmRiLnVwZGF0ZShpbnN0YW5jZVRhYmxlTmFtZSwgbmZ0SW5zdGFuY2UpOwoKICAgICAgICAgICAgICAgICAgYXBpLmVtaXQoJ2RlbGVnYXRlJywgewogICAgICAgICAgICAgICAgICAgIGZyb206IGZpbmFsRnJvbSwgZnJvbVR5cGU6IG5mdEluc3RhbmNlLm93bmVkQnksIHRvOiBmaW5hbFRvLCB0b1R5cGU6IG5ld093bmVkQnksIHN5bWJvbCwgaWQsCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfTsKCmFjdGlvbnMudW5kZWxlZ2F0ZSA9IGFzeW5jIChwYXlsb2FkKSA9PiB7CiAgY29uc3QgewogICAgZnJvbVR5cGUsIG5mdHMsIGlzU2lnbmVkV2l0aEFjdGl2ZUtleSwgY2FsbGluZ0NvbnRyYWN0SW5mbywKICB9ID0gcGF5bG9hZDsKICBjb25zdCB0eXBlcyA9IFsndXNlcicsICdjb250cmFjdCddOwoKICBjb25zdCBmaW5hbEZyb21UeXBlID0gZnJvbVR5cGUgPT09IHVuZGVmaW5lZCA/ICd1c2VyJyA6IGZyb21UeXBlOwoKICBpZiAoYXBpLmFzc2VydChpc1NpZ25lZFdpdGhBY3RpdmVLZXkgPT09IHRydWUsICd5b3UgbXVzdCB1c2UgYSBjdXN0b21fanNvbiBzaWduZWQgd2l0aCB5b3VyIGFjdGl2ZSBrZXknKQogICAgJiYgYXBpLmFzc2VydChmaW5hbEZyb21UeXBlICYmIHR5cGVvZiBmaW5hbEZyb21UeXBlID09PSAnc3RyaW5nJyAmJiB0eXBlcy5pbmNsdWRlcyhmaW5hbEZyb21UeXBlKQogICAgICAmJiAoY2FsbGluZ0NvbnRyYWN0SW5mbyB8fCAoY2FsbGluZ0NvbnRyYWN0SW5mbyA9PT0gdW5kZWZpbmVkICYmIGZpbmFsRnJvbVR5cGUgPT09ICd1c2VyJykpCiAgICAgICYmIG5mdHMgJiYgdHlwZW9mIG5mdHMgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkobmZ0cyksICdpbnZhbGlkIHBhcmFtcycpCiAgICAmJiBpc1ZhbGlkTmZ0SWRBcnJheShuZnRzKSkgewogICAgY29uc3QgZmluYWxGcm9tID0gZmluYWxGcm9tVHlwZSA9PT0gJ3VzZXInID8gYXBpLnNlbmRlciA6IGNhbGxpbmdDb250cmFjdEluZm8ubmFtZTsKICAgIGNvbnN0IGJsb2NrRGF0ZSA9IG5ldyBEYXRlKGAke2FwaS5oaXZlQmxvY2tUaW1lc3RhbXB9LjAwMFpgKTsKCiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5mdHMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgY29uc3QgeyBzeW1ib2wsIGlkcyB9ID0gbmZ0c1tpXTsKICAgICAgLy8gY2hlY2sgaWYgdGhlIE5GVCBleGlzdHMKICAgICAgY29uc3QgbmZ0ID0gYXdhaXQgYXBpLmRiLmZpbmRPbmUoJ25mdHMnLCB7IHN5bWJvbCB9KTsKICAgICAgaWYgKG5mdCkgewogICAgICAgIGlmIChhcGkuYXNzZXJ0KG5mdC5kZWxlZ2F0aW9uRW5hYmxlZCA9PT0gdHJ1ZSwgYGRlbGVnYXRpb24gbm90IGVuYWJsZWQgZm9yICR7c3ltYm9sfWApKSB7CiAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIHVuZGVsZWdhdGlvbiBjb21wbGV0aW9uIHRpbWUKICAgICAgICAgIGNvbnN0IGNvb2xkb3duUGVyaW9kTWlsbGlzZWMgPSBuZnQudW5kZWxlZ2F0aW9uQ29vbGRvd24gKiAyNCAqIDM2MDAgKiAxMDAwOwogICAgICAgICAgY29uc3QgY29tcGxldGVUaW1lc3RhbXAgPSBibG9ja0RhdGUuZ2V0VGltZSgpICsgY29vbGRvd25QZXJpb2RNaWxsaXNlYzsKICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItdGVtcGxhdGUKICAgICAgICAgIGNvbnN0IGluc3RhbmNlVGFibGVOYW1lID0gc3ltYm9sICsgJ2luc3RhbmNlcyc7CgogICAgICAgICAgY29uc3QgdW5kZWxlZ2F0aW9uID0gewogICAgICAgICAgICBzeW1ib2wsCiAgICAgICAgICAgIGlkczogW10sCiAgICAgICAgICAgIGNvbXBsZXRlVGltZXN0YW1wLAogICAgICAgICAgfTsKCiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGlkcy5sZW5ndGg7IGogKz0gMSkgewogICAgICAgICAgICBjb25zdCBpZCA9IGlkc1tqXTsKICAgICAgICAgICAgY29uc3QgbmZ0SW5zdGFuY2UgPSBhd2FpdCBhcGkuZGIuZmluZE9uZShpbnN0YW5jZVRhYmxlTmFtZSwgeyBfaWQ6IGFwaS5CaWdOdW1iZXIoaWQpLnRvTnVtYmVyKCkgfSk7CiAgICAgICAgICAgIGlmIChuZnRJbnN0YW5jZSkgewogICAgICAgICAgICAgIC8vIHZlcmlmeSBhY3Rpb24gaXMgYmVpbmcgcGVyZm9ybWVkIGJ5IHRoZSBhY2NvdW50IHRoYXQgb3ducyB0aGlzIGluc3RhbmNlCiAgICAgICAgICAgICAgLy8gYW5kIHRoZXJlIGlzIGFuIGV4aXN0aW5nIGRlbGVnYXRpb24gdGhhdCBpcyBub3QgcGVuZGluZyB1bmRlbGVnYXRpb24KICAgICAgICAgICAgICBpZiAobmZ0SW5zdGFuY2UuYWNjb3VudCA9PT0gZmluYWxGcm9tCiAgICAgICAgICAgICAgICAmJiAoKG5mdEluc3RhbmNlLm93bmVkQnkgPT09ICd1JyAmJiBmaW5hbEZyb21UeXBlID09PSAndXNlcicpCiAgICAgICAgICAgICAgICAgIHx8IChuZnRJbnN0YW5jZS5vd25lZEJ5ID09PSAnYycgJiYgZmluYWxGcm9tVHlwZSA9PT0gJ2NvbnRyYWN0JykpCiAgICAgICAgICAgICAgICAmJiBuZnRJbnN0YW5jZS5kZWxlZ2F0ZWRUbwogICAgICAgICAgICAgICAgJiYgbmZ0SW5zdGFuY2UuZGVsZWdhdGVkVG8udW5kZWxlZ2F0ZUF0ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIG5mdEluc3RhbmNlLmRlbGVnYXRlZFRvLnVuZGVsZWdhdGVBdCA9IGNvbXBsZXRlVGltZXN0YW1wOwogICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlCiAgICAgICAgICAgICAgICB1bmRlbGVnYXRpb24uaWRzLnB1c2gobmZ0SW5zdGFuY2UuX2lkKTsKCiAgICAgICAgICAgICAgICBhd2FpdCBhcGkuZGIudXBkYXRlKGluc3RhbmNlVGFibGVOYW1lLCBuZnRJbnN0YW5jZSk7CgogICAgICAgICAgICAgICAgYXBpLmVtaXQoJ3VuZGVsZWdhdGVTdGFydCcsIHsKICAgICAgICAgICAgICAgICAgZnJvbTogbmZ0SW5zdGFuY2UuZGVsZWdhdGVkVG8uYWNjb3VudCwgZnJvbVR5cGU6IG5mdEluc3RhbmNlLmRlbGVnYXRlZFRvLm93bmVkQnksIHN5bWJvbCwgaWQsCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodW5kZWxlZ2F0aW9uLmlkcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGF3YWl0IGFwaS5kYi5pbnNlcnQoJ3BlbmRpbmdVbmRlbGVnYXRpb25zJywgdW5kZWxlZ2F0aW9uKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn07Cgpjb25zdCBwcm9jZXNzVW5kZWxlZ2F0aW9uID0gYXN5bmMgKHVuZGVsZWdhdGlvbikgPT4gewogIGNvbnN0IHsKICAgIHN5bWJvbCwKICAgIGlkcywKICB9ID0gdW5kZWxlZ2F0aW9uOwoKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXRlbXBsYXRlCiAgY29uc3QgaW5zdGFuY2VUYWJsZU5hbWUgPSBzeW1ib2wgKyAnaW5zdGFuY2VzJzsKCiAgY29uc3QgaW5zdGFuY2VzID0gYXdhaXQgYXBpLmRiLmZpbmQoCiAgICBpbnN0YW5jZVRhYmxlTmFtZSwKICAgIHsKICAgICAgX2lkOiB7CiAgICAgICAgJGluOiBpZHMsCiAgICAgIH0sCiAgICB9LAogICAgTUFYX05VTV9ORlRTX09QRVJBQkxFLAogICAgMCwKICAgIFt7IGluZGV4OiAnX2lkJywgZGVzY2VuZGluZzogZmFsc2UgfV0sCiAgKTsKCiAgLy8gcmVtb3ZlIHRoZSBkZWxlZ2F0aW9uIGluZm9ybWF0aW9uIGZyb20gZWFjaCBORlQgaW5zdGFuY2UKICBmb3IgKGxldCBpID0gMDsgaSA8IGluc3RhbmNlcy5sZW5ndGg7IGkgKz0gMSkgewogICAgZGVsZXRlIGluc3RhbmNlc1tpXS5kZWxlZ2F0ZWRUbzsKICAgIGF3YWl0IGFwaS5kYi51cGRhdGUoaW5zdGFuY2VUYWJsZU5hbWUsIGluc3RhbmNlc1tpXSwgeyBkZWxlZ2F0ZWRUbzogJycgfSk7CiAgfQoKICAvLyByZW1vdmUgdGhlIHBlbmRpbmcgdW5kZWxlZ2F0aW9uIGl0c2VsZgogIGF3YWl0IGFwaS5kYi5yZW1vdmUoJ3BlbmRpbmdVbmRlbGVnYXRpb25zJywgdW5kZWxlZ2F0aW9uKTsKCiAgYXBpLmVtaXQoJ3VuZGVsZWdhdGVEb25lJywgeyBzeW1ib2wsIGlkcyB9KTsKfTsKCmFjdGlvbnMuY2hlY2tQZW5kaW5nVW5kZWxlZ2F0aW9ucyA9IGFzeW5jICgpID0+IHsKICBpZiAoYXBpLmFzc2VydChhcGkuc2VuZGVyID09PSAnbnVsbCcsICdub3QgYXV0aG9yaXplZCcpKSB7CiAgICBjb25zdCBibG9ja0RhdGUgPSBuZXcgRGF0ZShgJHthcGkuaGl2ZUJsb2NrVGltZXN0YW1wfS4wMDBaYCk7CiAgICBjb25zdCB0aW1lc3RhbXAgPSBibG9ja0RhdGUuZ2V0VGltZSgpOwoKICAgIC8vIGdldCBhbGwgdGhlIHBlbmRpbmcgdW5kZWxlZ2F0aW9ucyB0aGF0IGFyZSByZWFkeSB0byBiZSByZWxlYXNlZAogICAgbGV0IHBlbmRpbmdVbmRlbGVnYXRpb25zID0gYXdhaXQgYXBpLmRiLmZpbmQoCiAgICAgICdwZW5kaW5nVW5kZWxlZ2F0aW9ucycsCiAgICAgIHsKICAgICAgICBjb21wbGV0ZVRpbWVzdGFtcDogewogICAgICAgICAgJGx0ZTogdGltZXN0YW1wLAogICAgICAgIH0sCiAgICAgIH0sCiAgICApOwoKICAgIGxldCBuYlBlbmRpbmdVbmRlbGVnYXRpb25zID0gcGVuZGluZ1VuZGVsZWdhdGlvbnMubGVuZ3RoOwogICAgd2hpbGUgKG5iUGVuZGluZ1VuZGVsZWdhdGlvbnMgPiAwKSB7CiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBuYlBlbmRpbmdVbmRlbGVnYXRpb25zOyBpbmRleCArPSAxKSB7CiAgICAgICAgY29uc3QgcGVuZGluZ1VuZGVsZWdhdGlvbiA9IHBlbmRpbmdVbmRlbGVnYXRpb25zW2luZGV4XTsKICAgICAgICBhd2FpdCBwcm9jZXNzVW5kZWxlZ2F0aW9uKHBlbmRpbmdVbmRlbGVnYXRpb24pOwogICAgICB9CgogICAgICBwZW5kaW5nVW5kZWxlZ2F0aW9ucyA9IGF3YWl0IGFwaS5kYi5maW5kKAogICAgICAgICdwZW5kaW5nVW5kZWxlZ2F0aW9ucycsCiAgICAgICAgewogICAgICAgICAgY29tcGxldGVUaW1lc3RhbXA6IHsKICAgICAgICAgICAgJGx0ZTogdGltZXN0YW1wLAogICAgICAgICAgfSwKICAgICAgICB9LAogICAgICApOwoKICAgICAgbmJQZW5kaW5nVW5kZWxlZ2F0aW9ucyA9IHBlbmRpbmdVbmRlbGVnYXRpb25zLmxlbmd0aDsKICAgIH0KICB9Cn07CgphY3Rpb25zLmNyZWF0ZSA9IGFzeW5jIChwYXlsb2FkKSA9PiB7CiAgY29uc3QgewogICAgbmFtZSwgb3JnTmFtZSwgcHJvZHVjdE5hbWUsIHN5bWJvbCwgdXJsLCBtYXhTdXBwbHksIGF1dGhvcml6ZWRJc3N1aW5nQWNjb3VudHMsIGF1dGhvcml6ZWRJc3N1aW5nQ29udHJhY3RzLCBpc1NpZ25lZFdpdGhBY3RpdmVLZXksCiAgfSA9IHBheWxvYWQ7CgogIC8vIGdldCBjb250cmFjdCBwYXJhbXMKICBjb25zdCBwYXJhbXMgPSBhd2FpdCBhcGkuZGIuZmluZE9uZSgncGFyYW1zJywge30pOwogIGNvbnN0IHsgbmZ0Q3JlYXRpb25GZWUgfSA9IHBhcmFtczsKCiAgLy8gZ2V0IGFwaS5zZW5kZXIncyBVVElMSVRZX1RPS0VOX1NZTUJPTCBiYWxhbmNlCiAgY29uc3QgdXRpbGl0eVRva2VuQmFsYW5jZSA9IGF3YWl0IGFwaS5kYi5maW5kT25lSW5UYWJsZSgndG9rZW5zJywgJ2JhbGFuY2VzJywgeyBhY2NvdW50OiBhcGkuc2VuZGVyLCBzeW1ib2w6IFVUSUxJVFlfVE9LRU5fU1lNQk9MIH0pOwoKICBjb25zdCBhdXRob3JpemVkQ3JlYXRpb24gPSBhcGkuQmlnTnVtYmVyKG5mdENyZWF0aW9uRmVlKS5sdGUoMCkKICAgID8gdHJ1ZQogICAgOiB1dGlsaXR5VG9rZW5CYWxhbmNlICYmIGFwaS5CaWdOdW1iZXIodXRpbGl0eVRva2VuQmFsYW5jZS5iYWxhbmNlKS5ndGUobmZ0Q3JlYXRpb25GZWUpOwoKICBpZiAoYXBpLmFzc2VydChhdXRob3JpemVkQ3JlYXRpb24sICd5b3UgbXVzdCBoYXZlIGVub3VnaCB0b2tlbnMgdG8gY292ZXIgdGhlIGNyZWF0aW9uIGZlZXMnKQogICAgJiYgYXBpLmFzc2VydChpc1NpZ25lZFdpdGhBY3RpdmVLZXkgPT09IHRydWUsICd5b3UgbXVzdCB1c2UgYSBjdXN0b21fanNvbiBzaWduZWQgd2l0aCB5b3VyIGFjdGl2ZSBrZXknKQogICAgJiYgYXBpLmFzc2VydChuYW1lICYmIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJwogICAgICAmJiBzeW1ib2wgJiYgdHlwZW9mIHN5bWJvbCA9PT0gJ3N0cmluZycKICAgICAgJiYgKHVybCA9PT0gdW5kZWZpbmVkIHx8ICh1cmwgJiYgdHlwZW9mIHVybCA9PT0gJ3N0cmluZycpKQogICAgICAmJiAob3JnTmFtZSA9PT0gdW5kZWZpbmVkIHx8IChvcmdOYW1lICYmIHR5cGVvZiBvcmdOYW1lID09PSAnc3RyaW5nJykpCiAgICAgICYmIChwcm9kdWN0TmFtZSA9PT0gdW5kZWZpbmVkIHx8IChwcm9kdWN0TmFtZSAmJiB0eXBlb2YgcHJvZHVjdE5hbWUgPT09ICdzdHJpbmcnKSkKICAgICAgJiYgKGF1dGhvcml6ZWRJc3N1aW5nQWNjb3VudHMgPT09IHVuZGVmaW5lZCB8fCAoYXV0aG9yaXplZElzc3VpbmdBY2NvdW50cyAmJiB0eXBlb2YgYXV0aG9yaXplZElzc3VpbmdBY2NvdW50cyA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShhdXRob3JpemVkSXNzdWluZ0FjY291bnRzKSkpCiAgICAgICYmIChhdXRob3JpemVkSXNzdWluZ0NvbnRyYWN0cyA9PT0gdW5kZWZpbmVkIHx8IChhdXRob3JpemVkSXNzdWluZ0NvbnRyYWN0cyAmJiB0eXBlb2YgYXV0aG9yaXplZElzc3VpbmdDb250cmFjdHMgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkoYXV0aG9yaXplZElzc3VpbmdDb250cmFjdHMpKSkKICAgICAgJiYgKG1heFN1cHBseSA9PT0gdW5kZWZpbmVkIHx8IChtYXhTdXBwbHkgJiYgdHlwZW9mIG1heFN1cHBseSA9PT0gJ3N0cmluZycgJiYgIWFwaS5CaWdOdW1iZXIobWF4U3VwcGx5KS5pc05hTigpKSksICdpbnZhbGlkIHBhcmFtcycpKSB7CiAgICBpZiAoYXBpLmFzc2VydChhcGkudmFsaWRhdG9yLmlzQWxwaGEoc3ltYm9sKSAmJiBhcGkudmFsaWRhdG9yLmlzVXBwZXJjYXNlKHN5bWJvbCkgJiYgc3ltYm9sLmxlbmd0aCA+IDAgJiYgc3ltYm9sLmxlbmd0aCA8PSBNQVhfU1lNQk9MX0xFTkdUSCwgYGludmFsaWQgc3ltYm9sOiB1cHBlcmNhc2UgbGV0dGVycyBvbmx5LCBtYXggbGVuZ3RoIG9mICR7TUFYX1NZTUJPTF9MRU5HVEh9YCkKICAgICAgJiYgYXBpLmFzc2VydChSRVNFUlZFRF9TWU1CT0xTW3N5bWJvbF0gPT09IHVuZGVmaW5lZCB8fCBhcGkuc2VuZGVyID09PSBSRVNFUlZFRF9TWU1CT0xTW3N5bWJvbF0sICdjYW5ub3QgdXNlIHRoaXMgc3ltYm9sJykKICAgICAgJiYgYXBpLmFzc2VydChhcGkudmFsaWRhdG9yLmlzQWxwaGFudW1lcmljKGFwaS52YWxpZGF0b3IuYmxhY2tsaXN0KG5hbWUsICcgJykpICYmIG5hbWUubGVuZ3RoID4gMCAmJiBuYW1lLmxlbmd0aCA8PSA1MCwgJ2ludmFsaWQgbmFtZTogbGV0dGVycywgbnVtYmVycywgd2hpdGVzcGFjZXMgb25seSwgbWF4IGxlbmd0aCBvZiA1MCcpCiAgICAgICYmIGFwaS5hc3NlcnQob3JnTmFtZSA9PT0gdW5kZWZpbmVkCiAgICAgICAgfHwgKGFwaS52YWxpZGF0b3IuaXNBbHBoYW51bWVyaWMoYXBpLnZhbGlkYXRvci5ibGFja2xpc3Qob3JnTmFtZSwgJyAnKSkgJiYgb3JnTmFtZS5sZW5ndGggPiAwICYmIG9yZ05hbWUubGVuZ3RoIDw9IDUwKSwgJ2ludmFsaWQgb3JnIG5hbWU6IGxldHRlcnMsIG51bWJlcnMsIHdoaXRlc3BhY2VzIG9ubHksIG1heCBsZW5ndGggb2YgNTAnKQogICAgICAmJiBhcGkuYXNzZXJ0KHByb2R1Y3ROYW1lID09PSB1bmRlZmluZWQKICAgICAgICB8fCAoYXBpLnZhbGlkYXRvci5pc0FscGhhbnVtZXJpYyhhcGkudmFsaWRhdG9yLmJsYWNrbGlzdChwcm9kdWN0TmFtZSwgJyAnKSkgJiYgcHJvZHVjdE5hbWUubGVuZ3RoID4gMCAmJiBwcm9kdWN0TmFtZS5sZW5ndGggPD0gNTApLCAnaW52YWxpZCBwcm9kdWN0IG5hbWU6IGxldHRlcnMsIG51bWJlcnMsIHdoaXRlc3BhY2VzIG9ubHksIG1heCBsZW5ndGggb2YgNTAnKQogICAgICAmJiBhcGkuYXNzZXJ0KHVybCA9PT0gdW5kZWZpbmVkIHx8IHVybC5sZW5ndGggPD0gMjU1LCAnaW52YWxpZCB1cmw6IG1heCBsZW5ndGggb2YgMjU1JykKICAgICAgJiYgYXBpLmFzc2VydChtYXhTdXBwbHkgPT09IHVuZGVmaW5lZCB8fCBhcGkuQmlnTnVtYmVyKG1heFN1cHBseSkuZ3QoMCksICdtYXhTdXBwbHkgbXVzdCBiZSBwb3NpdGl2ZScpCiAgICAgICYmIGFwaS5hc3NlcnQobWF4U3VwcGx5ID09PSB1bmRlZmluZWQgfHwgYXBpLkJpZ051bWJlcihtYXhTdXBwbHkpLmx0ZShOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiksIGBtYXhTdXBwbHkgbXVzdCBiZSBsb3dlciB0aGFuICR7TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJ9YCkpIHsKICAgICAgLy8gY2hlY2sgaWYgdGhlIE5GVCBhbHJlYWR5IGV4aXN0cwogICAgICBjb25zdCBuZnQgPSBhd2FpdCBhcGkuZGIuZmluZE9uZSgnbmZ0cycsIHsgc3ltYm9sIH0pOwoKICAgICAgaWYgKGFwaS5hc3NlcnQobmZ0ID09PSBudWxsLCAnc3ltYm9sIGFscmVhZHkgZXhpc3RzJykpIHsKICAgICAgICAvLyBidXJuIHRoZSB0b2tlbiBjcmVhdGlvbiBmZWVzCiAgICAgICAgaWYgKGFwaS5CaWdOdW1iZXIobmZ0Q3JlYXRpb25GZWUpLmd0KDApKSB7CiAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBhcGkuZXhlY3V0ZVNtYXJ0Q29udHJhY3QoJ3Rva2VucycsICd0cmFuc2ZlcicsIHsKICAgICAgICAgICAgdG86ICdudWxsJywgc3ltYm9sOiBVVElMSVRZX1RPS0VOX1NZTUJPTCwgcXVhbnRpdHk6IG5mdENyZWF0aW9uRmVlLCBpc1NpZ25lZFdpdGhBY3RpdmVLZXksCiAgICAgICAgICB9KTsKICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSB0b2tlbnMgd2VyZSBzZW50CiAgICAgICAgICBpZiAoIWlzVG9rZW5UcmFuc2ZlclZlcmlmaWVkKHJlcywgYXBpLnNlbmRlciwgJ251bGwnLCBVVElMSVRZX1RPS0VOX1NZTUJPTCwgbmZ0Q3JlYXRpb25GZWUsICd0cmFuc2ZlcicpKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGNvbnN0IGZpbmFsTWF4U3VwcGx5ID0gbWF4U3VwcGx5ID09PSB1bmRlZmluZWQgPyAwIDogYXBpLkJpZ051bWJlcihtYXhTdXBwbHkpLmludGVnZXJWYWx1ZShhcGkuQmlnTnVtYmVyLlJPVU5EX0RPV04pLnRvTnVtYmVyKCk7CiAgICAgICAgY29uc3QgZmluYWxPcmdOYW1lID0gb3JnTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBvcmdOYW1lOwogICAgICAgIGNvbnN0IGZpbmFsUHJvZHVjdE5hbWUgPSBwcm9kdWN0TmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBwcm9kdWN0TmFtZTsKICAgICAgICBjb25zdCBmaW5hbFVybCA9IHVybCA9PT0gdW5kZWZpbmVkID8gJycgOiB1cmw7CiAgICAgICAgbGV0IG1ldGFkYXRhID0gewogICAgICAgICAgdXJsOiBmaW5hbFVybCwKICAgICAgICB9OwogICAgICAgIG1ldGFkYXRhID0gSlNPTi5zdHJpbmdpZnkobWV0YWRhdGEpOwoKICAgICAgICBjb25zdCBpbml0aWFsQWNjb3VudExpc3QgPSBhdXRob3JpemVkSXNzdWluZ0FjY291bnRzID09PSB1bmRlZmluZWQgPyBbYXBpLnNlbmRlcl0gOiBbXTsKCiAgICAgICAgY29uc3QgbmV3TmZ0ID0gewogICAgICAgICAgaXNzdWVyOiBhcGkuc2VuZGVyLAogICAgICAgICAgc3ltYm9sLAogICAgICAgICAgbmFtZSwKICAgICAgICAgIG9yZ05hbWU6IGZpbmFsT3JnTmFtZSwKICAgICAgICAgIHByb2R1Y3ROYW1lOiBmaW5hbFByb2R1Y3ROYW1lLAogICAgICAgICAgbWV0YWRhdGEsCiAgICAgICAgICBtYXhTdXBwbHk6IGZpbmFsTWF4U3VwcGx5LAogICAgICAgICAgc3VwcGx5OiAwLAogICAgICAgICAgY2lyY3VsYXRpbmdTdXBwbHk6IDAsCiAgICAgICAgICBkZWxlZ2F0aW9uRW5hYmxlZDogZmFsc2UsCiAgICAgICAgICB1bmRlbGVnYXRpb25Db29sZG93bjogMCwKICAgICAgICAgIGF1dGhvcml6ZWRJc3N1aW5nQWNjb3VudHM6IGluaXRpYWxBY2NvdW50TGlzdCwKICAgICAgICAgIGF1dGhvcml6ZWRJc3N1aW5nQ29udHJhY3RzOiBbXSwKICAgICAgICAgIHByb3BlcnRpZXM6IHt9LAogICAgICAgICAgZ3JvdXBCeTogW10sCiAgICAgICAgfTsKCiAgICAgICAgLy8gY3JlYXRlIGEgbmV3IHRhYmxlIHRvIGhvbGQgaXNzdWVkIGluc3RhbmNlcyBvZiB0aGlzIE5GVAogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItdGVtcGxhdGUKICAgICAgICBjb25zdCBpbnN0YW5jZVRhYmxlTmFtZSA9IHN5bWJvbCArICdpbnN0YW5jZXMnOwogICAgICAgIGNvbnN0IHRhYmxlRXhpc3RzID0gYXdhaXQgYXBpLmRiLnRhYmxlRXhpc3RzKGluc3RhbmNlVGFibGVOYW1lKTsKICAgICAgICBpZiAodGFibGVFeGlzdHMgPT09IGZhbHNlKSB7CiAgICAgICAgICBhd2FpdCBhcGkuZGIuY3JlYXRlVGFibGUoaW5zdGFuY2VUYWJsZU5hbWUsIFsnYWNjb3VudCcsICdvd25lZEJ5J10pOwogICAgICAgIH0KCiAgICAgICAgYXdhaXQgYXBpLmRiLmluc2VydCgnbmZ0cycsIG5ld05mdCk7CgogICAgICAgIC8vIG9wdGlvbmFsbHkgY2FuIGFkZCBsaXN0IG9mIGF1dGhvcml6ZWQgYWNjb3VudHMgJiBjb250cmFjdHMgbm93CiAgICAgICAgaWYgKCEoYXV0aG9yaXplZElzc3VpbmdBY2NvdW50cyA9PT0gdW5kZWZpbmVkKSkgewogICAgICAgICAgYXdhaXQgYWN0aW9ucy5hZGRBdXRob3JpemVkSXNzdWluZ0FjY291bnRzKHsgYWNjb3VudHM6IGF1dGhvcml6ZWRJc3N1aW5nQWNjb3VudHMsIHN5bWJvbCwgaXNTaWduZWRXaXRoQWN0aXZlS2V5IH0pOwogICAgICAgIH0KICAgICAgICBpZiAoIShhdXRob3JpemVkSXNzdWluZ0NvbnRyYWN0cyA9PT0gdW5kZWZpbmVkKSkgewogICAgICAgICAgYXdhaXQgYWN0aW9ucy5hZGRBdXRob3JpemVkSXNzdWluZ0NvbnRyYWN0cyh7IGNvbnRyYWN0czogYXV0aG9yaXplZElzc3VpbmdDb250cmFjdHMsIHN5bWJvbCwgaXNTaWduZWRXaXRoQWN0aXZlS2V5IH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn07CgphY3Rpb25zLmlzc3VlID0gYXN5bmMgKHBheWxvYWQpID0+IHsKICBjb25zdCB7CiAgICBzeW1ib2wsIGZyb21UeXBlLCB0bywgdG9UeXBlLCBmZWVTeW1ib2wsIGxvY2tUb2tlbnMsIGxvY2tOZnRzLCBwcm9wZXJ0aWVzLCBpc1NpZ25lZFdpdGhBY3RpdmVLZXksIGNhbGxpbmdDb250cmFjdEluZm8sCiAgfSA9IHBheWxvYWQ7CiAgY29uc3QgdHlwZXMgPSBbJ3VzZXInLCAnY29udHJhY3QnXTsKCiAgY29uc3QgZmluYWxUb1R5cGUgPSB0b1R5cGUgPT09IHVuZGVmaW5lZCA/ICd1c2VyJyA6IHRvVHlwZTsKICBjb25zdCBmaW5hbEZyb21UeXBlID0gZnJvbVR5cGUgPT09IHVuZGVmaW5lZCA/ICd1c2VyJyA6IGZyb21UeXBlOwoKICAvLyBnZXQgY29udHJhY3QgcGFyYW1zCiAgY29uc3QgcGFyYW1zID0gYXdhaXQgYXBpLmRiLmZpbmRPbmUoJ3BhcmFtcycsIHt9KTsKICBjb25zdCB7IG5mdElzc3VhbmNlRmVlIH0gPSBwYXJhbXM7CgogIGlmIChhcGkuYXNzZXJ0KGlzU2lnbmVkV2l0aEFjdGl2ZUtleSA9PT0gdHJ1ZSwgJ3lvdSBtdXN0IHVzZSBhIGN1c3RvbV9qc29uIHNpZ25lZCB3aXRoIHlvdXIgYWN0aXZlIGtleScpCiAgICAmJiBhcGkuYXNzZXJ0KHN5bWJvbCAmJiB0eXBlb2Ygc3ltYm9sID09PSAnc3RyaW5nJwogICAgICAmJiBmaW5hbEZyb21UeXBlICYmIHR5cGVvZiBmaW5hbEZyb21UeXBlID09PSAnc3RyaW5nJyAmJiB0eXBlcy5pbmNsdWRlcyhmaW5hbEZyb21UeXBlKQogICAgICAmJiAoY2FsbGluZ0NvbnRyYWN0SW5mbyB8fCAoY2FsbGluZ0NvbnRyYWN0SW5mbyA9PT0gdW5kZWZpbmVkICYmIGZpbmFsRnJvbVR5cGUgPT09ICd1c2VyJykpCiAgICAgICYmIHRvICYmIHR5cGVvZiB0byA9PT0gJ3N0cmluZycKICAgICAgJiYgZmluYWxUb1R5cGUgJiYgdHlwZW9mIGZpbmFsVG9UeXBlID09PSAnc3RyaW5nJyAmJiB0eXBlcy5pbmNsdWRlcyhmaW5hbFRvVHlwZSkKICAgICAgJiYgZmVlU3ltYm9sICYmIHR5cGVvZiBmZWVTeW1ib2wgPT09ICdzdHJpbmcnICYmIGZlZVN5bWJvbCBpbiBuZnRJc3N1YW5jZUZlZQogICAgICAmJiAocHJvcGVydGllcyA9PT0gdW5kZWZpbmVkIHx8IChwcm9wZXJ0aWVzICYmIHR5cGVvZiBwcm9wZXJ0aWVzID09PSAnb2JqZWN0JykpCiAgICAgICYmIChsb2NrVG9rZW5zID09PSB1bmRlZmluZWQgfHwgKGxvY2tUb2tlbnMgJiYgdHlwZW9mIGxvY2tUb2tlbnMgPT09ICdvYmplY3QnKSkKICAgICAgJiYgKGxvY2tOZnRzID09PSB1bmRlZmluZWQgfHwgKGxvY2tOZnRzICYmIHR5cGVvZiBsb2NrTmZ0cyA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShsb2NrTmZ0cykpKSwgJ2ludmFsaWQgcGFyYW1zJykKICAgICYmIChsb2NrTmZ0cyA9PT0gdW5kZWZpbmVkIHx8IGlzVmFsaWROZnRJZEFycmF5KGxvY2tOZnRzKSkpIHsKICAgIGNvbnN0IGZpbmFsVG8gPSBmaW5hbFRvVHlwZSA9PT0gJ3VzZXInID8gdG8udHJpbSgpLnRvTG93ZXJDYXNlKCkgOiB0by50cmltKCk7CiAgICBjb25zdCB0b1ZhbGlkID0gZmluYWxUb1R5cGUgPT09ICd1c2VyJyA/IGlzVmFsaWRIaXZlQWNjb3VudExlbmd0aChmaW5hbFRvKSA6IGlzVmFsaWRDb250cmFjdExlbmd0aChmaW5hbFRvKTsKICAgIGNvbnN0IGZpbmFsRnJvbSA9IGZpbmFsRnJvbVR5cGUgPT09ICd1c2VyJyA/IGFwaS5zZW5kZXIgOiBjYWxsaW5nQ29udHJhY3RJbmZvLm5hbWU7CiAgICBjb25zdCBiYWxhbmNlVGFibGVOYW1lID0gZmluYWxGcm9tVHlwZSA9PT0gJ3VzZXInID8gJ2JhbGFuY2VzJyA6ICdjb250cmFjdHNCYWxhbmNlcyc7CiAgICBpZiAoYXBpLmFzc2VydCh0b1ZhbGlkLCAnaW52YWxpZCB0bycpKSB7CiAgICAgIC8vIGNoZWNrIGlmIHRoZSBORlQgYW5kIGZlZSB0b2tlbiBleGlzdAogICAgICBjb25zdCBuZnQgPSBhd2FpdCBhcGkuZGIuZmluZE9uZSgnbmZ0cycsIHsgc3ltYm9sIH0pOwogICAgICBjb25zdCBmZWVUb2tlbiA9IGF3YWl0IGFwaS5kYi5maW5kT25lSW5UYWJsZSgndG9rZW5zJywgJ3Rva2VucycsIHsgc3ltYm9sOiBmZWVTeW1ib2wgfSk7CgogICAgICBpZiAoYXBpLmFzc2VydChuZnQgIT09IG51bGwsICdzeW1ib2wgZG9lcyBub3QgZXhpc3QnKQogICAgICAgICYmIGFwaS5hc3NlcnQoZmVlVG9rZW4gIT09IG51bGwsICdmZWUgc3ltYm9sIGRvZXMgbm90IGV4aXN0JykpIHsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXRlbXBsYXRlCiAgICAgICAgY29uc3QgaW5zdGFuY2VUYWJsZU5hbWUgPSBzeW1ib2wgKyAnaW5zdGFuY2VzJzsKICAgICAgICAvLyB2ZXJpZnkgY2FsbGVyIGhhcyBhdXRob3JpdHkgdG8gaXNzdWUgdGhpcyBORlQgJiB3ZSBoYXZlIG5vdCByZWFjaGVkIG1heCBzdXBwbHkKICAgICAgICBpZiAoYXBpLmFzc2VydCgoZmluYWxGcm9tVHlwZSA9PT0gJ2NvbnRyYWN0JyAmJiBuZnQuYXV0aG9yaXplZElzc3VpbmdDb250cmFjdHMuaW5jbHVkZXMoZmluYWxGcm9tKSkKICAgICAgICAgIHx8IChmaW5hbEZyb21UeXBlID09PSAndXNlcicgJiYgbmZ0LmF1dGhvcml6ZWRJc3N1aW5nQWNjb3VudHMuaW5jbHVkZXMoZmluYWxGcm9tKSksICdub3QgYWxsb3dlZCB0byBpc3N1ZSB0b2tlbnMnKQogICAgICAgICAgJiYgYXBpLmFzc2VydChuZnQubWF4U3VwcGx5ID09PSAwIHx8IChuZnQuc3VwcGx5IDwgbmZ0Lm1heFN1cHBseSksICdtYXggc3VwcGx5IGxpbWl0IHJlYWNoZWQnKSkgewogICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBjb3N0IG9mIGlzc3VpbmcgdGhpcyBORlQKICAgICAgICAgIGNvbnN0IHByb3BlcnR5Q291bnQgPSBPYmplY3Qua2V5cyhuZnQucHJvcGVydGllcykubGVuZ3RoOwogICAgICAgICAgY29uc3QgcHJvcGVydHlGZWUgPSBhcGkuQmlnTnVtYmVyKG5mdElzc3VhbmNlRmVlW2ZlZVN5bWJvbF0pLm11bHRpcGxpZWRCeShwcm9wZXJ0eUNvdW50KTsgLy8gZXh0cmEgZmVlcyBwZXIgcHJvcGVydHkKICAgICAgICAgIGNvbnN0IGlzc3VhbmNlRmVlID0gY2FsY3VsYXRlQmFsYW5jZShuZnRJc3N1YW5jZUZlZVtmZWVTeW1ib2xdLCBwcm9wZXJ0eUZlZSwgZmVlVG9rZW4ucHJlY2lzaW9uLCB0cnVlKTsgLy8gYmFzZSBmZWUgKyBwcm9wZXJ0eSBmZWVzCiAgICAgICAgICBjb25zdCBmZWVUb2tlbkJhbGFuY2UgPSBhd2FpdCBhcGkuZGIuZmluZE9uZUluVGFibGUoJ3Rva2VucycsIGJhbGFuY2VUYWJsZU5hbWUsIHsgYWNjb3VudDogZmluYWxGcm9tLCBzeW1ib2w6IGZlZVN5bWJvbCB9KTsKICAgICAgICAgIGNvbnN0IGF1dGhvcml6ZWRDcmVhdGlvbiA9IGFwaS5CaWdOdW1iZXIoaXNzdWFuY2VGZWUpLmx0ZSgwKQogICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgOiBmZWVUb2tlbkJhbGFuY2UgJiYgYXBpLkJpZ051bWJlcihmZWVUb2tlbkJhbGFuY2UuYmFsYW5jZSkuZ3RlKGlzc3VhbmNlRmVlKTsKICAgICAgICAgIC8vIHNhbml0eSBjaGVja3Mgb24gYW55IHRva2VucyB0aGUgaXNzdWVyIHdhbnRzIHRvIGxvY2sgdXAgaW4gdGhpcyBORlQKICAgICAgICAgIGlmIChsb2NrVG9rZW5zKSB7CiAgICAgICAgICAgIGNvbnN0IGlzTG9ja1ZhbGlkID0gYXdhaXQgaXNWYWxpZFRva2VuQmFza2V0KGxvY2tUb2tlbnMsIGJhbGFuY2VUYWJsZU5hbWUsIGZpbmFsRnJvbSwgZmVlU3ltYm9sLCBpc3N1YW5jZUZlZSk7CiAgICAgICAgICAgIGlmICghYXBpLmFzc2VydChpc0xvY2tWYWxpZCwKICAgICAgICAgICAgICBgaW52YWxpZCBiYXNrZXQgb2YgdG9rZW5zIHRvIGxvY2sgKGNhbm5vdCBsb2NrIG1vcmUgdGhhbiAke01BWF9OVU1fTE9DS0VEX1RPS0VOX1RZUEVTfSB0b2tlbiB0eXBlczsgaXNzdWluZyBhY2NvdW50IG11c3QgaGF2ZSBlbm91Z2ggYmFsYW5jZSlgKSkgewogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vIGVuc3VyZSBhbnkgaW5jbHVkZWQgZGF0YSBwcm9wZXJ0aWVzIGFyZSB2YWxpZAogICAgICAgICAgbGV0IGZpbmFsUHJvcGVydGllcyA9IHt9OwogICAgICAgICAgaWYgKCEocHJvcGVydGllcyA9PT0gdW5kZWZpbmVkKSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGlmICghaXNWYWxpZERhdGFQcm9wZXJ0aWVzKGZpbmFsRnJvbSwgZmluYWxGcm9tVHlwZSwgbmZ0LCBwcm9wZXJ0aWVzKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmaW5hbFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChhcGkuYXNzZXJ0KGF1dGhvcml6ZWRDcmVhdGlvbiwgJ3lvdSBtdXN0IGhhdmUgZW5vdWdoIHRva2VucyB0byBjb3ZlciB0aGUgaXNzdWFuY2UgZmVlcycpKSB7CiAgICAgICAgICAgIC8vIGJ1cm4gdGhlIHRva2VuIGlzc3VhbmNlIGZlZXMKICAgICAgICAgICAgaWYgKGFwaS5CaWdOdW1iZXIoaXNzdWFuY2VGZWUpLmd0KDApKSB7CiAgICAgICAgICAgICAgaWYgKGZpbmFsRnJvbVR5cGUgPT09ICdjb250cmFjdCcpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFwaS50cmFuc2ZlclRva2Vuc0Zyb21DYWxsaW5nQ29udHJhY3QoJ251bGwnLCBmZWVTeW1ib2wsIGlzc3VhbmNlRmVlLCAndXNlcicpOwogICAgICAgICAgICAgICAgaWYgKCFhcGkuYXNzZXJ0KGlzVG9rZW5UcmFuc2ZlclZlcmlmaWVkKHJlcywgZmluYWxGcm9tLCAnbnVsbCcsIGZlZVN5bWJvbCwgaXNzdWFuY2VGZWUsICd0cmFuc2ZlckZyb21Db250cmFjdCcpLCAndW5hYmxlIHRvIHRyYW5zZmVyIGlzc3VhbmNlIGZlZScpKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXBpLmV4ZWN1dGVTbWFydENvbnRyYWN0KCd0b2tlbnMnLCAndHJhbnNmZXInLCB7CiAgICAgICAgICAgICAgICAgIHRvOiAnbnVsbCcsIHN5bWJvbDogZmVlU3ltYm9sLCBxdWFudGl0eTogaXNzdWFuY2VGZWUsIGlzU2lnbmVkV2l0aEFjdGl2ZUtleSwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaWYgKCFhcGkuYXNzZXJ0KGlzVG9rZW5UcmFuc2ZlclZlcmlmaWVkKHJlcywgZmluYWxGcm9tLCAnbnVsbCcsIGZlZVN5bWJvbCwgaXNzdWFuY2VGZWUsICd0cmFuc2ZlcicpLCAndW5hYmxlIHRvIHRyYW5zZmVyIGlzc3VhbmNlIGZlZScpKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIGFueSBsb2NrZWQgdG9rZW5zIHNob3VsZCBiZSBzZW50IHRvIHRoZSBuZnQgY29udHJhY3QgZm9yIGN1c3RvZGlhbnNoaXAKICAgICAgICAgICAgY29uc3QgZmluYWxMb2NrVG9rZW5zID0ge307CiAgICAgICAgICAgIGlmIChsb2NrVG9rZW5zKSB7CiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4CiAgICAgICAgICAgICAgZm9yIChjb25zdCBbbG9ja3N5bWJvbCwgcXVhbnRpdHldIG9mIE9iamVjdC5lbnRyaWVzKGxvY2tUb2tlbnMpKSB7CiAgICAgICAgICAgICAgICBpZiAoZmluYWxGcm9tVHlwZSA9PT0gJ2NvbnRyYWN0JykgewogICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBhcGkudHJhbnNmZXJUb2tlbnNGcm9tQ2FsbGluZ0NvbnRyYWN0KENPTlRSQUNUX05BTUUsIGxvY2tzeW1ib2wsIHF1YW50aXR5LCAnY29udHJhY3QnKTsKICAgICAgICAgICAgICAgICAgaWYgKGlzVG9rZW5UcmFuc2ZlclZlcmlmaWVkKHJlcywgZmluYWxGcm9tLCBDT05UUkFDVF9OQU1FLCBsb2Nrc3ltYm9sLCBxdWFudGl0eSwgJ3RyYW5zZmVyRnJvbUNvbnRyYWN0JykpIHsKICAgICAgICAgICAgICAgICAgICBmaW5hbExvY2tUb2tlbnNbbG9ja3N5bWJvbF0gPSBxdWFudGl0eTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXBpLmV4ZWN1dGVTbWFydENvbnRyYWN0KCd0b2tlbnMnLCAndHJhbnNmZXJUb0NvbnRyYWN0JywgewogICAgICAgICAgICAgICAgICAgIHRvOiBDT05UUkFDVF9OQU1FLCBzeW1ib2w6IGxvY2tzeW1ib2wsIHF1YW50aXR5LCBpc1NpZ25lZFdpdGhBY3RpdmVLZXksCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICBpZiAoaXNUb2tlblRyYW5zZmVyVmVyaWZpZWQocmVzLCBmaW5hbEZyb20sIENPTlRSQUNUX05BTUUsIGxvY2tzeW1ib2wsIHF1YW50aXR5LCAndHJhbnNmZXJUb0NvbnRyYWN0JykpIHsKICAgICAgICAgICAgICAgICAgICBmaW5hbExvY2tUb2tlbnNbbG9ja3N5bWJvbF0gPSBxdWFudGl0eTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gYW55IGxvY2tlZCBORlQgaW5zdGFuY2VzIHNob3VsZCBiZSBzZW50IHRvIHRoZSBuZnQgY29udHJhY3QgZm9yIGN1c3RvZGlhbnNoaXAKICAgICAgICAgICAgbGV0IGZpbmFsTG9ja05mdHMgPSBbXTsKICAgICAgICAgICAgaWYgKGxvY2tOZnRzICYmIGxvY2tOZnRzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0cmFuc2ZlckFuZFZlcmlmeU5mdHMoZmluYWxGcm9tLCBmaW5hbEZyb21UeXBlLCBDT05UUkFDVF9OQU1FLCAnY29udHJhY3QnLCBsb2NrTmZ0cywgaXNTaWduZWRXaXRoQWN0aXZlS2V5LCBjYWxsaW5nQ29udHJhY3RJbmZvKTsKICAgICAgICAgICAgICBmaW5hbExvY2tOZnRzID0gcmVzLnN1Y2Nlc3M7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IG93bmVkQnkgPSBmaW5hbFRvVHlwZSA9PT0gJ3VzZXInID8gJ3UnIDogJ2MnOwoKICAgICAgICAgICAgLy8gZmluYWxseSwgd2UgY2FuIGlzc3VlIHRoZSBORlQhCiAgICAgICAgICAgIGxldCBuZXdJbnN0YW5jZSA9IHt9OwogICAgICAgICAgICBpZiAoZmluYWxMb2NrTmZ0cy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgbmV3SW5zdGFuY2UgPSB7CiAgICAgICAgICAgICAgICBhY2NvdW50OiBmaW5hbFRvLAogICAgICAgICAgICAgICAgb3duZWRCeSwKICAgICAgICAgICAgICAgIGxvY2tlZFRva2VuczogZmluYWxMb2NrVG9rZW5zLAogICAgICAgICAgICAgICAgbG9ja2VkTmZ0czogZmluYWxMb2NrTmZ0cywKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IGZpbmFsUHJvcGVydGllcywKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIG5ld0luc3RhbmNlID0gewogICAgICAgICAgICAgICAgYWNjb3VudDogZmluYWxUbywKICAgICAgICAgICAgICAgIG93bmVkQnksCiAgICAgICAgICAgICAgICBsb2NrZWRUb2tlbnM6IGZpbmFsTG9ja1Rva2VucywKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IGZpbmFsUHJvcGVydGllcywKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhcGkuZGIuaW5zZXJ0KGluc3RhbmNlVGFibGVOYW1lLCBuZXdJbnN0YW5jZSk7CgogICAgICAgICAgICAvLyB1cGRhdGUgc3VwcGx5IGFuZCBjaXJjdWxhdGluZyBzdXBwbHkgZm9yIG1haW4gTkZUIHJlY29yZAogICAgICAgICAgICBuZnQuc3VwcGx5ICs9IDE7CiAgICAgICAgICAgIGlmIChmaW5hbFRvICE9PSAnbnVsbCcgfHwgZmluYWxUb1R5cGUgPT09ICdjb250cmFjdCcpIHsKICAgICAgICAgICAgICBuZnQuY2lyY3VsYXRpbmdTdXBwbHkgKz0gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBhd2FpdCBhcGkuZGIudXBkYXRlKCduZnRzJywgbmZ0KTsKCiAgICAgICAgICAgIGFwaS5lbWl0KCdpc3N1ZScsIHsKICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGUKICAgICAgICAgICAgICBmcm9tOiBmaW5hbEZyb20sIGZyb21UeXBlOiBmaW5hbEZyb21UeXBlLCB0bzogZmluYWxUbywgdG9UeXBlOiBmaW5hbFRvVHlwZSwgc3ltYm9sLCBsb2NrZWRUb2tlbnM6IGZpbmFsTG9ja1Rva2VucywgbG9ja2VkTmZ0czogZmluYWxMb2NrTmZ0cywgcHJvcGVydGllczogZmluYWxQcm9wZXJ0aWVzLCBpZDogcmVzdWx0Ll9pZCwKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn07CgphY3Rpb25zLmlzc3VlTXVsdGlwbGUgPSBhc3luYyAocGF5bG9hZCkgPT4gewogIGNvbnN0IHsKICAgIGluc3RhbmNlcywgaXNTaWduZWRXaXRoQWN0aXZlS2V5LCBjYWxsaW5nQ29udHJhY3RJbmZvLAogIH0gPSBwYXlsb2FkOwoKICBpZiAoYXBpLmFzc2VydChpc1NpZ25lZFdpdGhBY3RpdmVLZXkgPT09IHRydWUsICd5b3UgbXVzdCB1c2UgYSBjdXN0b21fanNvbiBzaWduZWQgd2l0aCB5b3VyIGFjdGl2ZSBrZXknKQogICAgJiYgYXBpLmFzc2VydChpbnN0YW5jZXMgJiYgdHlwZW9mIGluc3RhbmNlcyA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShpbnN0YW5jZXMpLCAnaW52YWxpZCBwYXJhbXMnKQogICAgJiYgYXBpLmFzc2VydChpbnN0YW5jZXMubGVuZ3RoIDw9IE1BWF9OVU1fTkZUU19JU1NVQUJMRSwgYGNhbm5vdCBpc3N1ZSBtb3JlIHRoYW4gJHtNQVhfTlVNX05GVFNfSVNTVUFCTEV9IE5GVCBpbnN0YW5jZXMgYXQgb25jZWApKSB7CiAgICAvLyBhZGRpdGlvbmFsIGNoZWNrIGZvciBsb2NrZWQgTkZUIGluc3RhbmNlcwogICAgbGV0IGNvbnRhaW5lckNvdW50ID0gMDsKICAgIGluc3RhbmNlcy5mb3JFYWNoKChpbnN0YW5jZSkgPT4gewogICAgICBpZiAoaW5zdGFuY2UubG9ja05mdHMpIHsKICAgICAgICBjb250YWluZXJDb3VudCArPSAxOwogICAgICB9CiAgICB9KTsKCiAgICBpZiAoYXBpLmFzc2VydChjb250YWluZXJDb3VudCA8PSBNQVhfTlVNX0NPTlRBSU5FUl9ORlRTX09QRVJBQkxFLCBgY2Fubm90IGlzc3VlIG1vcmUgdGhhbiAke01BWF9OVU1fQ09OVEFJTkVSX05GVFNfT1BFUkFCTEV9IGNvbnRhaW5lciBORlQgaW5zdGFuY2VzIGF0IG9uY2VgKQogICAgICAmJiBhcGkuYXNzZXJ0KGNvbnRhaW5lckNvdW50ID09PSAwIHx8IGNvbnRhaW5lckNvdW50ID09PSBpbnN0YW5jZXMubGVuZ3RoLCAnY2Fubm90IGlzc3VlIGEgbWl4IG9mIGNvbnRhaW5lciBhbmQgbm9uLWNvbnRhaW5lciBORlQgaW5zdGFuY2VzIHNpbXVsdGFuZW91c2x5JykpIHsKICAgICAgLy8gZG8gdGhlIGlzc3VhbmNlCiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5zdGFuY2VzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgY29uc3QgewogICAgICAgICAgc3ltYm9sLCBmcm9tVHlwZSwgdG8sIHRvVHlwZSwgZmVlU3ltYm9sLCBsb2NrVG9rZW5zLCBsb2NrTmZ0cywgcHJvcGVydGllcywKICAgICAgICB9ID0gaW5zdGFuY2VzW2ldOwogICAgICAgIGF3YWl0IGFjdGlvbnMuaXNzdWUoewogICAgICAgICAgc3ltYm9sLCBmcm9tVHlwZSwgdG8sIHRvVHlwZSwgZmVlU3ltYm9sLCBsb2NrVG9rZW5zLCBsb2NrTmZ0cywgcHJvcGVydGllcywgaXNTaWduZWRXaXRoQWN0aXZlS2V5LCBjYWxsaW5nQ29udHJhY3RJbmZvLAogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfQp9Owo=\"}",
					"executedCodeHash": "a9fcb0e0d0c8e3f97888f8f95b743deb5f20574152118b23be0a8dea3077108b",
					"hash": "9f4753de861cf14e197f2aafa65deb0c8faa133bdc4ce96c0de4a555798cfd08",
					"databaseHash": "",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "hive-engine",
					"contract": "contract",
					"action": "deploy",
					"payload": "{\"name\":\"nftmarket\",\"params\":\"\",\"code\":\"\"}",
					"executedCodeHash": "ab6dbc26ad0b970342cf84f113e4c33c18fad1f9016f97e95e8c93f1ef8a2cde",
					"hash": "8f209268468e7a9d3a5159db155696ef0fc02edcacac4248bdec2e5cc0b862e6",
					"databaseHash": "",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "contract",
					"action": "deploy",
					"payload": "{\"name\":\"inflation\",\"params\":\"\",\"code\":\"LyogZXNsaW50LWRpc2FibGUgbm8tYXdhaXQtaW4tbG9vcCAqLwovKiBnbG9iYWwgYWN0aW9ucywgYXBpICovCgovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGVtcGxhdGUtY3VybHktaW4tc3RyaW5nCmNvbnN0IFVUSUxJVFlfVE9LRU5fU1lNQk9MID0gIkJFRSI7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10ZW1wbGF0ZS1jdXJseS1pbi1zdHJpbmcKY29uc3QgSElWRV9FTkdJTkVfQUNDT1VOVCA9ICJoaXZlLWVuZ2luZSI7CgphY3Rpb25zLmNyZWF0ZVNTQyA9IGFzeW5jICgpID0+IHsKCn07CgphY3Rpb25zLmlzc3VlTmV3VG9rZW5zID0gYXN5bmMgKCkgPT4gewogIGlmIChhcGkuc2VuZGVyICE9PSAnbnVsbCcpIHJldHVybjsKCiAgLy8gaXNzdWUgdG9rZW5zIHRvIEhJVkVfRU5HSU5FX0FDQ09VTlQKICAvLyAxMDBrIHRva2VucyBwZXIgeWVhciA9IDExLjQxNTUyNTExIHRva2VucyBwZXIgaG91ciAoYW4gaG91ciA9IDEyMDAgYmxvY2tzKQogIGxldCBuYlRva2VucyA9ICcxMS40MTU1MjUxMSc7CiAgYXdhaXQgYXBpLmV4ZWN1dGVTbWFydENvbnRyYWN0KCd0b2tlbnMnLCAnaXNzdWUnLAogICAgeyBzeW1ib2w6IFVUSUxJVFlfVE9LRU5fU1lNQk9MLCBxdWFudGl0eTogbmJUb2tlbnMsIHRvOiBISVZFX0VOR0lORV9BQ0NPVU5UIH0pOwoKICAvLyBpc3N1ZSB0b2tlbnMgdG8gZW5ncG9vbAogIC8vIDEwMGsgdG9rZW5zIHBlciB5ZWFyID0gMTEuNDE1NTI1MTEgdG9rZW5zIHBlciBob3VyIChhbiBob3VyID0gMTIwMCBibG9ja3MpCiAgbmJUb2tlbnMgPSAnMTEuNDE1NTI1MTEnOwogIGF3YWl0IGFwaS5leGVjdXRlU21hcnRDb250cmFjdCgndG9rZW5zJywgJ2lzc3VlJywgeyBzeW1ib2w6IFVUSUxJVFlfVE9LRU5fU1lNQk9MLCBxdWFudGl0eTogbmJUb2tlbnMsIHRvOiAnaGl2ZS1taW5lcicgfSk7CgogIC8vIGlzc3VlIHRva2VucyB0byAid2l0bmVzc2VzIiBjb250cmFjdAogIC8vIDIwMGsgdG9rZW5zIHBlciB5ZWFyID0gMjIuODMxMDUwMjIgdG9rZW5zIHBlciBob3VyIChhbiBob3VyID0gMTIwMCBibG9ja3MpCiAgLy8gbmJUb2tlbnMgPSAnMjIuODMxMDUwMjInOwogIC8vIGF3YWl0IGFwaS5leGVjdXRlU21hcnRDb250cmFjdCgndG9rZW5zJywgJ2lzc3VlVG9Db250cmFjdCcsCiAgLy8geyBzeW1ib2w6IFVUSUxJVFlfVE9LRU5fU1lNQk9MLCBxdWFudGl0eTogbmJUb2tlbnMsIHRvOiAnd2l0bmVzc2VzJyB9KTsKfTsK\"}",
					"executedCodeHash": "d569228ce2477d9d7bdce9bb33012daba5d33288916775e990a8c62b2a92cd61",
					"hash": "fb7865ba90ddf0969910d420ac2debcdef74a12c24c34c6d3a7ad616776be15a",
					"databaseHash": "",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "tokens",
					"action": "create",
					"payload": "{ \"name\": \"Hive Engine Token\", \"symbol\": \"BEE\", \"precision\": 8, \"maxSupply\": \"9007199254740991\", \"isSignedWithActiveKey\": true }",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "93e25ffd3efe42ce6475fc69a7c1ec01ba8eb42a7513ec36e30db10d98bbb85b",
					"databaseHash": "cd372fb85148700fa88095e3492d3f9f5beb43e555e5ff26d95f5a6adc36f8e6",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "tokens",
					"action": "enableStaking",
					"payload": "{ \"symbol\": \"BEE\", \"unstakingCooldown\": 40, \"numberTransactions\": 4, \"isSignedWithActiveKey\": true }",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "02bc2d2ad2dd12929499c4cf9265b30cfc988f965a8f44fca933803f597b8dce",
					"databaseHash": "70629dda753befe92a0e93dbc2f167b6f4eb87cbb22d908cbe493a1b957eb2ba",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "tokens",
					"action": "enableDelegation",
					"payload": "{ \"symbol\": \"BEE\", \"undelegationCooldown\": 7, \"isSignedWithActiveKey\": true }",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "79abd5e2fa309b4a1c61a011c79699edbd4173081413dc091d7fcc02024b3cb5",
					"databaseHash": "242fc58b7cef57c90d55a732b773ac517acc4fe92b4ef771fda8634044c0f3e3",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "tokens",
					"action": "updateMetadata",
					"payload": "{\"symbol\":\"BEE\", \"metadata\": { \"url\":\"https://hive-engine.com\", \"icon\": \"https://s3.amazonaws.com/steem-engine/images/icon_steem-engine_gradient.svg\", \"desc\": \"BEE is the native token for the Hive Engine platform\" }}",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "225a01b30dbe2e9609eeb34aaf50e66048779f5fdc287f88feed1e119cfaf6e7",
					"databaseHash": "5b38aed4c3c00d3211dc1e2fcfa830bc175a6addaf22a2ed0701db095c87bec5",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "null",
					"contract": "tokens",
					"action": "issue",
					"payload": "{ \"symbol\": \"BEE\", \"to\": \"hive-engine\", \"quantity\": \"1500000\", \"isSignedWithActiveKey\": true }",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "d86419d46048aca3205af418f36ee328f12b4eb63b63e56117d20a3bac6a25b5",
					"databaseHash": "507eaef969b8e4ddeb62c58050233ec13d22773afda822bee3965699c8122f9a",
					"logs": "{\"events\":[{\"contract\":\"tokens\",\"event\":\"transferFromContract\",\"data\":{\"from\":\"tokens\",\"to\":\"hive-engine\",\"symbol\":\"BEE\",\"quantity\":\"1500000\"}}]}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "honey-swap",
					"contract": "tokens",
					"action": "create",
					"payload": "{ \"name\": \"HIVE Pegged\", \"symbol\": \"SWAP.HIVE\", \"precision\": 8, \"maxSupply\": \"9007199254740991\", \"isSignedWithActiveKey\": true }",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "a5e323235ec93f2f9ac164f8b028a4d100cd27e03452699646e9c72966bd7df5",
					"databaseHash": "6c0ad6d2fdc16effed48043d8d7ee48d1e5753400aab56eacc896f4808e812e4",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "honey-swap",
					"contract": "tokens",
					"action": "updateMetadata",
					"payload": "{\"symbol\":\"SWAP.HIVE\", \"metadata\": { \"desc\": \"HIVE backed by the hive-engine team\" }}",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "49aed78e13dc9bbcb61e16a5f82d4dc5f87c3f80d0c007ede071805b8ff9a7f8",
					"databaseHash": "0eac0ec8bd3f5ef0c3d217ef07af13f986c4aa27e10fa8f812d37a3f98c567b7",
					"logs": "{}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "honey-swap",
					"contract": "tokens",
					"action": "issue",
					"payload": "{ \"symbol\": \"SWAP.HIVE\", \"to\": \"honey-swap\", \"quantity\": \"9007199254740991\", \"isSignedWithActiveKey\": true }",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "ebc1ff3cac1551575bab1d5ac1e6b0bc817fd53e644d9655dc4dce8fcf36c71a",
					"databaseHash": "4dd45fca34669705218f75c7b60be775d6f01b0104024ab4bbfba1d40d87076e",
					"logs": "{\"events\":[{\"contract\":\"tokens\",\"event\":\"transferFromContract\",\"data\":{\"from\":\"tokens\",\"to\":\"honey-swap\",\"symbol\":\"SWAP.HIVE\",\"quantity\":\"9007199254740991\"}}]}"
				},
				{
					"refHiveBlockNumber": 41967000,
					"transactionId": 0,
					"sender": "hive-engine",
					"contract": "tokens",
					"action": "updateParams",
					"payload": "{ \"tokenCreationFee\": \"100\", \"enableDelegationFee\": \"1000\", \"enableStakingFee\": \"1000\" }",
					"executedCodeHash": "9f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "9c16a15f0268257c6e7189a3a04fc29d086875ad658c2c4545b9dae438d21c15",
					"databaseHash": "21b383a0ed1d8a389e99f46c65b1ff8fc1b82d4baba443fd13ad9da664182a9a",
					"logs": "{}"
				}
			],
			"virtualTransactions": [
				{
					"refHiveBlockNumber": 0,
					"transactionId": "0-3",
					"sender": "null",
					"contract": "inflation",
					"action": "issueNewTokens",
					"payload": "{ \"isSignedWithActiveKey\": true }",
					"executedCodeHash": "d569228ce2477d9d7bdce9bb33012daba5d33288916775e990a8c62b2a92cd619f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e109f4e5ec54de1c9ca9365646184ee91d80260f795b6dada8a922ddca8ad4b3e10",
					"hash": "f52a059a9418fb83d66edb35932d49d8e8fb29b8d29ac104f89a4d17b875267c",
					"databaseHash": "c29618888716429e58e1c533cf5dcea1b0bd6c1c4123208212c451ba43bc2001",
					"logs": "{\"events\":[{\"contract\":\"tokens\",\"event\":\"transferFromContract\",\"data\":{\"from\":\"tokens\",\"to\":\"hive-engine\",\"symbol\":\"BEE\",\"quantity\":\"11.41552511\"}},{\"contract\":\"tokens\",\"event\":\"transferFromContract\",\"data\":{\"from\":\"tokens\",\"to\":\"hive-miner\",\"symbol\":\"BEE\",\"quantity\":\"11.41552511\"}}]}"
				}
			],
			"hash": "66e2be521f83eb882b0736054f4e172769e6bcb68303f668799243b4beee8650",
			"databaseHash": "9358cdfbc5d508a188506b51b6fbcb2a1a43322bf74179665520b7dc0510f0c7",
			"merkleRoot": "f85195574e06fdaf304fc2781c1385493244e34a8b793947cfe27d903815222c",
			"round": null,
			"roundHash": "",
			"witness": "",
			"signingKey": "",
			"roundSignature": ""
		}
	}`)

	respData, err := sjson.SetBytes(respData, "id", 1)

	if err != nil {
		panic(err)
	}

	return respData, nil
}
